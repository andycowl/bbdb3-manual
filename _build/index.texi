\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename index.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.4.6.@*
@end ifinfo
@settitle BBDBV3 Documentation
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Miscellaneous
@direntry
* BBDBV3: (index.info). One line description of project.
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
BBDBV3 3.1.2, Sep 15, 2016

Andy Cowling

Copyright @copyright{} 2016, Andy Cowling
@end quotation

@end copying

@titlepage
@title BBDBV3 Documentation
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top BBDBV3 Documentation
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{0}
@c BBDBV3 documentation master file, created by
@c sphinx-quickstart on Wed Sep 14 10:26:03 2016.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

Contents:

@menu
* Introduction:: 
* Tutorial:: 
* Gnus:: 
* Mail:: 
* Org Mode:: 
* Utilities:: 
* Elisp Documentation:: 
* FAQ:: 
* Third party packages:: 
* Lisp library (bbdb): Lisp library bbdb. 
* Lisp library (bbdb-anniv): Lisp library bbdb-anniv. 
* Lisp library (bbdb-com): Lisp library bbdb-com. 
* Lisp library (bbdb-gnus): Lisp library bbdb-gnus. 
* Lisp library (bbdb-ispell): Lisp library bbdb-ispell. 
* Lisp library (bbdb-message): Lisp library bbdb-message. 
* Lisp library (bbdb-mhe): Lisp library bbdb-mhe. 
* Lisp library (bbdb-migrate): Lisp library bbdb-migrate. 
* Lisp library (bbdb-mu4e): Lisp library bbdb-mu4e. 
* Lisp library (bbdb-mua): Lisp library bbdb-mua. 
* Lisp library (bbdb-pgp): Lisp library bbdb-pgp. 
* Lisp library (bbdb-print): Lisp library bbdb-print. 
* Lisp library (bbdb-rmail): Lisp library bbdb-rmail. 
* Lisp library (bbdb-sc): Lisp library bbdb-sc. 
* Lisp library (bbdb-site): Lisp library bbdb-site. 
* Lisp library (bbdb-snarf): Lisp library bbdb-snarf. 
* Lisp library (bbdb-vm): Lisp library bbdb-vm. 
* Lisp library (bbdb-wl): Lisp library bbdb-wl. 
* Indices and tables:: 
* Index:: 

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* History:: 
* What's new in BBDB3 ?:: 
* Where to get BBDB3 ?:: 
* Building:: 
* Configuration:: 
* Upgrading:: 

Tutorial

* Creating an entry:: 
* Searching:: 
* Updating:: 
* Adding fields:: 
* Searching on fields:: 
* Duplicates:: 
* Extended Fields:: 
* Sending email:: 
* Omitting an entry:: 
* Deleting a field:: 
* Deleting an entry:: 
* Birthdays and anniversaries:: 
* Housekeeping:: 
* Snarfing:: 
* Printing:: 
* Dialing:: 

Gnus

* What version of Gnus do I need ?:: 
* Automatically add entries:: 
* Whitelists and blacklists:: 
* Use full name:: 
* Gnus Summary Line:: 

Mail

* MH-E:: 
* mu4e:: 
* notmuch:: 
* rmail:: 
* VM:: 
* Wanderlust:: 

Org Mode

* Agenda:: 

Utilities

* Import:: 
* Export:: 

Elisp Documentation

* Key Index:: 
* Command Index:: 
* Function Index:: 
* Variable Index:: 
* Hooks:: 

FAQ

* What version of Emacs do I need ?:: 
* How do you automatically save BBDB on exit ?:: 
* How to get help with BBDB ?:: 
* How to report a problem with BBDB ?:: 
* File format information:: 
* Tuning BBDB:: 
* Incorrect BBDB version:: 

Third party packages

* Melpa:: 
* Misc:: 

Lisp library (bbdb)

* Functions:: 
* Variables:: 
* Hooks: Hooks<2>. 

Lisp library (bbdb-anniv)

* Functions: Functions<2>. 
* Variables: Variables<2>. 

Lisp library (bbdb-com)

* Commands:: 
* Functions: Functions<3>. 

Lisp library (bbdb-gnus)

* Functions: Functions<4>. 
* Variables: Variables<3>. 

Lisp library (bbdb-ispell)

* Functions: Functions<5>. 
* Variables: Variables<4>. 

Lisp library (bbdb-message)

* Functions: Functions<6>. 

Lisp library (bbdb-mhe)

* Functions: Functions<7>. 

Lisp library (bbdb-migrate)

* Constants:: 
* Functions: Functions<8>. 

Lisp library (bbdb-mu4e)

* Functions: Functions<9>. 

Lisp library (bbdb-mua)

* Constants: Constants<2>. 
* Functions: Functions<10>. 

Lisp library (bbdb-pgp)

* Functions: Functions<11>. 
* Variables: Variables<5>. 

Lisp library (bbdb-print)

* Functions: Functions<12>. 
* Variables: Variables<6>. 

Lisp library (bbdb-rmail)

* Functions: Functions<13>. 

Lisp library (bbdb-sc)

* Functions: Functions<14>. 
* Variables: Variables<7>. 

Lisp library (bbdb-site)

* Constants: Constants<3>. 

Lisp library (bbdb-snarf)

* Functions: Functions<15>. 
* Variables: Variables<8>. 

Lisp library (bbdb-vm)

* Functions: Functions<16>. 
* Variables: Variables<9>. 

Lisp library (bbdb-wl)

* Functions: Functions<17>. 

@end detailmenu
@end menu

@node Introduction,Tutorial,Top,Top
@anchor{introduction introduction}@anchor{1}@anchor{introduction doc}@anchor{2}@anchor{introduction welcome-to-bbdbv3-s-documentation}@anchor{3}
@chapter Introduction


The Big Brother Database (BBDB) is a contact management system for
GNU Emacs version 23 or later.

BBDB offers the following features:


@itemize *

@item 
tight integration with Emacs news and mail readers (Gnus, MH-e,
mu4e, notmuch, Rmail, Wanderlust, VM).

@item 
automatic creation of entries from mail messages and news articles.

@item 
extensible database format with standard and user-defined fields.

@item 
comprehensive management (de-duplication, purge).

@item 
support for different address and phone formats.

@item 
integration of events with Emacs calendar and Orgmode.
@end itemize

@menu
* History:: 
* What's new in BBDB3 ?:: 
* Where to get BBDB3 ?:: 
* Building:: 
* Configuration:: 
* Upgrading:: 

@end menu

@node History,What's new in BBDB3 ?,,Introduction
@anchor{introduction history}@anchor{4}
@section History


Jamie Zawinski implemented the original BBDB package in 1992 and the
package was subsequently maintained bu Waider and later by Robert
Widhopf-Fenk.

The last release of BBDB2 was version 2.35 (released on 30 January 2007).

In May 2010, Roland Winkler announced he was resurrecting the project
and embarking on a major rewrite.

@node What's new in BBDB3 ?,Where to get BBDB3 ?,History,Introduction
@anchor{introduction what-s-new-in-bbdb3}@anchor{5}
@section What's new in BBDB3 ?


[ This section outlines why BBDB2 users may want to upgrade. Need to
improve and extend this section - Roland ?]

Complete overhaul of the code base.

Support for modern Emacs mail readers - mu4e, notmuch, wanderlust

Globalisation - improved support for phone and address formats.

BBDB3 attempted to rationalise the terminology which meant the
changing of some lisp variables and functions.

In BBDB3, "address" is used to refer to snail mail addresses, "mail"
for email addresses and "name" for real names.

BBDB3 treats outgoing messages (i.e. Emacs message and mail mode) like
incoming messages in your Emacs MUA (Gnus, Rmail, VM, etc).  So you
can configure BBDB such that it updates BBDB based on outgoing
messages in much the same way you can do this with incoming messages.

@node Where to get BBDB3 ?,Building,What's new in BBDB3 ?,Introduction
@anchor{introduction where-to-get-bbdb3}@anchor{6}
@section Where to get BBDB3 ?


The latest stable release of BBDB is currently 3.1.2 (released on 27
April 2014) and available for download from:

@indicateurl{http://download.savannah.gnu.org/releases/bbdb/}

The source of the latest development version is available at:

@indicateurl{http://savannah.nongnu.org/projects/bbdb/}

BBDB3 is also available via Melpa@footnote{https://melpa.org/#/}. This version tracks the latest
development version.

@node Building,Configuration,Where to get BBDB3 ?,Introduction
@anchor{introduction building}@anchor{7}@anchor{introduction melpa}@anchor{8}
@section Building


There are a couple of prerequisites for compiling BBDB3 from source:


@itemize *

@item 
autoconf (2.69 or higher)

@item 
automake (1.13 or higher)
@end itemize

Most Linux distributions will have the required versions of
these packages in the standard repositories.

Quick guide for building BBDB3 from source on Linux:

@example
$ sh ./autogen
$ ./configure
$ make
$ sudo make install
@end example

@node Configuration,Upgrading,Building,Introduction
@anchor{introduction configuration}@anchor{9}
@section Configuration


To get started and use BBDB, a single line is required in 'init.el':

@example
(require 'bbdb-loaddefs "/path/to/bbdb/lisp/bbdb-loaddefs.el")
@end example

Localisation - configure your country ?

@node Upgrading,,Configuration,Introduction
@anchor{introduction upgrading}@anchor{a}
@section Upgrading


BBDB3 will automatically detect a BBDB2 database and convert the
contents to the new format. This conversion is done automatically
although it may be prudent to take a copy of the existing BBDB
database.

The default location for the BBDB database is '~/.bbdb' in BBDB2 and
changed to '~/.emacs.d/bbdb' in BBDB3.

@node Tutorial,Gnus,Introduction,Top
@anchor{tutorial doc}@anchor{b}@anchor{tutorial tutorial}@anchor{c}
@chapter Tutorial


This is a gentle, step-by-step tutorial, aimed at newcomers to BBDB,
which includes worked examples showing how to use the software.

The best way to demonstrate the features in BBDB is to actually
illustrate some standard tasks. If you are already an experienced BBDB
user, you may wish to skip this section.

@menu
* Creating an entry:: 
* Searching:: 
* Updating:: 
* Adding fields:: 
* Searching on fields:: 
* Duplicates:: 
* Extended Fields:: 
* Sending email:: 
* Omitting an entry:: 
* Deleting a field:: 
* Deleting an entry:: 
* Birthdays and anniversaries:: 
* Housekeeping:: 
* Snarfing:: 
* Printing:: 
* Dialing:: 

@end menu

@node Creating an entry,Searching,,Tutorial
@anchor{tutorial creating-an-entry}@anchor{d}
@section Creating an entry


The first task to to add a contact to our BBDB:

@example
M-x bbdb-create
@end example

Enter 'Ivan McCormick' as the name.

Leave the fields 'Organizations', 'E-Mail Addresses', 'Snail Mail
Address Label', 'Phone Label' and 'notes' fields blank (simply by
typing 'Enter').

Add another entry for 'David Evans' in the same manner.

Now we have two entries, we can navigate and search our embryonic
BBDB.

@node Searching,Updating,Creating an entry,Tutorial
@anchor{tutorial searching}@anchor{e}
@section Searching


To examine the contents of BBDB, use:

@example
M-x bbdb
@end example

Type 'return' to 'Search records using regexp' which displays all
entries.

BBDB then displays all known contacts and the modeline includes
'1/2/2' which indicates the current entry is '1' out of a current data
set of 2 from a grand total of 2.

The entries are initially sorted by 'Name' order so 'David Evans'
appears first despite being added last.

Navigation uses the familiar 'n' (bbdb-next-record) and 'p'
(bbdb-prev-record) key bindings.

You can also search BBDB using 'b' ('bbdb') which searches across all
fields. For example, searching for 'evans' displays a single record
('David Evans'). The search is case insensitive.

@node Updating,Adding fields,Searching,Tutorial
@anchor{tutorial updating}@anchor{f}
@section Updating


Occasionally, you may want to change contact details.  Search BBDB
(using 'b') to find the contact named 'David Evans'.

Type 'e' ('bbdb-edit-field') to change this contact's first name to 'Dave'.

Save your changes using 's' (bbdb-save). Your changes are now saved to
the BBDB which resides in '~/.emacs.d/bbdb' ('bbdb-file') by default.

@node Adding fields,Searching on fields,Updating,Tutorial
@anchor{tutorial adding-fields}@anchor{10}
@section Adding fields


Add a new contact called 'Adam Clayton' using 'c' ('bbdb-create'). This
time, include additional information for the organization, address,
phone number and email address as follows:

@example
For 'Organizations' enter, 'Island Records'
For email, enter 'adam.clayton@@island.com'
Street, line 1 - '721 Fifth Avenue'
Street, line 2 - 'Midtown Center'
Street, line 2 - 'Manhattan'
City - 'New York City'
State - 'NY'
Postcode - 10022
Country - 'US'
For 'Phone (home), enter '0012127654321'
For the 'notes' field, enter 'U2'
@end example

Now we have a record populated with five fields in addition to
'Name'. The newly created record is displayed.

You can use 't' ('toggle-layout') to view a brief one line summary and
'T' ('show-all-fields') to expose all fields of the contact. The
expanded view includes two standard audit timestamp fields that are
automatically created and maintained by BBDB; 'creation-date' and
'timestamp'

For a newly created record, both timestamp fields will be identical
but the 'timestamp' field will automatically track whenever a
subsequent update is made to the record. The timestamps can be
valuable in purging historic, outdated data and examining recent
records.

Use 'TAB' ('bbdb-next-field') to navigate to the next field and
'BACKSPACE' ('bbdb-prev-field') to go back to the previous field.

If you made any errors during the creation of the contact, you can
navigate to the field and then use 'e' ('bbdb-edit-field') to edit and
correct the field.

@node Searching on fields,Duplicates,Adding fields,Tutorial
@anchor{tutorial searching-on-fields}@anchor{11}
@section Searching on fields


In addition to the general search ('b') which searches across all
fields, you can also search for contacts on individual fields (which
is quicker and more efficient for larger databases).

For example, to search for all contacts with an email address
containing 'island.com', use '/ m' and enter 'island'.

The full list of field searches is


@multitable {xxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxx} 
@headitem

Key binding

@tab

Field

@item

'b'

@tab

General

@item

'/ 1'

@tab

Single record

@item

'/ m'

@tab

Email

@item

'/ n'

@tab

Name

@item

'/ o'

@tab

Organization

@item

'/ p'

@tab

Phone

@item

'/ a'

@tab

Address

@item

'/ x'

@tab

Xfields

@item

'/ m'

@tab

Email

@item

'/ d'

@tab

Duplicates

@item

'/ c'

@tab

Changed

@item

'+'

@tab

Append

@item

'!'

@tab

Invert

@end multitable


@node Duplicates,Extended Fields,Searching on fields,Tutorial
@anchor{tutorial duplicates}@anchor{12}
@section Duplicates


BBDB offers help in managing a contact database. A common problem is
that of duplicate entries; a person who has different aliases ('Dave',
'David') or multiple email addresses (e.g. home, work) or
historic, outdated fields.

Add a new entry for 'Larry Mullen' with an email address of
@email{'larry.mullen@@islandrecords.com}'.

Add another entry for 'Larry Mullen Jnr' with the same email address
of @email{'larry.mullen@@islandrecords.com}'.

Display all entries using 'b' and use '/ d' ('bbdb-search-duplicates')
to search for duplicate entries.

The two similar entries for 'Larry Mullen' should be displayed.

To merge these two entries, use M-x bbdb-merge-records. BBDB will use
the currently displayed record ('Larry Mullen Jnr') as the first entry
and prompt for the second record:

@example
merge record "Larry Mullen Jnr" into:
@end example

Type 'Larry Mullen' to identify the second record. BBDB will ask:

@example
Use name "Larry Mullen Jnr" instead of "Larry Mullen"? (y or n)
@end example

followed by:

@example
Keep "Larry Mullen" as an alternate name? (y or n)
@end example

The single, resulting merged record is now displayed. 'Larry Mullen'
is now is an 'AKA' field for the 'Larry Mullen Jnr' record.

@node Extended Fields,Sending email,Duplicates,Tutorial
@anchor{tutorial extended-fields}@anchor{13}
@section Extended Fields


BBDB supports extended fields ('xfields') which allow the user to
define additional fields for contacts. The predefined 'notes' field in
BBDB2 is simply an example of an extended field in BBDB3.

You can add a note field to an existing contact using ';'
('edit-some-field').

As no contacts were initially created with a 'note' field, BBDB
prompts:

@example
"notes" is an unknown field name. Define it? (y or n)
@end example

In addition to the 'notes' field, you can extend BBDB with additional
user defined fields.

Use 'i' (bbdb-insert-field) to add a new field called 'Instrument' and
set this field to 'Guitar' for Dave Evans.

Of course, the U2 guitarist is more commonly known as 'The Edge' so
navigate to the AKA ('Also Known As') field and add 'The Edge' as an
alias for 'David Evans'.

@node Sending email,Omitting an entry,Extended Fields,Tutorial
@anchor{tutorial sending-email}@anchor{14}
@section Sending email


BBDB allows sending email to a single contact or a set of contacts.

Search and navigate to a specfic contact and type 'm' ('bbdb-mail')
which composes an email to the current contact.

If a set of contacts has been created, type '* m' to send an email to
all contacts in the list.

You can use this feature to manage simple mail groups; if you tag a
group of contacts with 'curry', you can use '* m' to invite your
friends for the traditional Thursday night meal.

@node Omitting an entry,Deleting a field,Sending email,Tutorial
@anchor{tutorial omitting-an-entry}@anchor{15}
@section Omitting an entry


If you have selected a list of contacts, it is possible to omit a
contact (or multiple contacts) from the list of recipients while
preserving the entry in BBDB.

You use 'o' ('omit-record') which hides the entry and type '* m' to
compose an email to the reduced list of contacts.

@node Deleting a field,Deleting an entry,Omitting an entry,Tutorial
@anchor{tutorial deleting-a-field}@anchor{16}
@section Deleting a field


You can delete the contents of a field by navigating to the field of
the contact (use 'n' and 'p' to navigate between contacts and 'TAB'
and 'DEL' between fields). Once positioned on the correct field, use
'd' or 'C-k' (which are both bound to 'bbdb-delete-field-or-record').

BBDB will prompt:

@example
delete this 'mail' field (of Michael Stipe)? (y or n).
@end example

@node Deleting an entry,Birthdays and anniversaries,Deleting a field,Tutorial
@anchor{tutorial deleting-an-entry}@anchor{17}
@section Deleting an entry


Deleting an entry in BBDB is similar. Navigate to the desired entry
and use 'd' or C-k.

BBDB will prompt:

@example
Delete the entry of Stephen Morrissey ? (y or n)
@end example

Deletions of multiple records is possible in the normal way; selecting
the desired data set and use C-k. A prompt will be issued for each
record.

@node Birthdays and anniversaries,Housekeeping,Deleting an entry,Tutorial
@anchor{tutorial birthdays-and-anniversaries}@anchor{18}
@section Birthdays and anniversaries


To use birthday and anniversaries in BBDB, you must ensure 'anniv is
included in the list of parameters when calling 'bbdb-initialize' in
'init.el':

@example
(bbdb-initialize 'gnus 'message 'anniv)
@end example

To ensure BBDB birthdays and anniversaries are displayed in the Emacs
calendar, add the following line to 'init.el':

@example
(add-hook 'diary-list-entries-hook 'bbdb-anniv-diary-entries)
@end example

Birthdays are implemented as another extended field named 'birthday'.

Find the contact called 'Adam Clayton' and add a new extended field
called 'birthday' using 'i' ('bbdb-insert-field')

The default date format setting is 'American' ('mm/dd/yyyy') so, to
add Adam Clayton's birthday which is '13 March 1960', enter:

@example
'03/13/1960'
@end example

The default date format is controlled by the variable
'calendar-date-style' which may be set to:-


@itemize *

@item 
'american' (mm/dd/yyyy - default)

@item 
'european' (dd/mm/yyyy)

@item 
'iso'      (yyyy/mm/dd)
@end itemize

Check the birthday has been added to the Emacs calendar:

@example
M-x calendar
@end example

Navigate to 13 March and type 'd' (diary-view-entries'). The birthday
should be displayed as follows:

@example
Sunday, March 13, 2016
======================
Adam Clayton's 56th birthday
@end example

@node Housekeeping,Snarfing,Birthdays and anniversaries,Tutorial
@anchor{tutorial housekeeping}@anchor{19}
@section Housekeeping


BBDB uses the built-in audit timestamps ('creation-date' and
'timestamp') to offer useful searches to identify ancient or recent
records:


@itemize *

@item 
bbdb-creation-newer

@item 
bbdb-creation-older

@item 
bbdb-timestamp-newer

@item 
bbdb-timestamp-older
@end itemize

For example, to list all records created before 2014, use
'M-x bbdb-creation-older-than'. BBDB prompts:

@example
'Older than date (yyyy-mm-dd):'
@end example

Enter '2014-01-01' to displayed all contacts created prior to 2014.

There is a complementary function 'bbdb-creation-newer-than' to identify
recently created records.

Similarly, using the 'timestamp' field can identify records modified
in the last month ('bbdb-timestamp-newer').

Another useful function to assist in identifying records that have
been created and never subsequently updated is
'bbdb-creation-no-change'.

@node Snarfing,Printing,Housekeeping,Tutorial
@anchor{tutorial snarfing}@anchor{1a}
@section Snarfing


Given a text file with the following .. contents:

@example
Michael Stipe
245 Dan Rather Avenue
Atlanta
GA
Email: stipey@@remhq.com
@end example

If you highlight the region, position point at 'Michael Stipe' and
type 'M-x bbdb-snarf', BBDB will attempt to parse the region and
create a BBDB entry for this individual.

Unfortunately, snarfing is complex and doesn't always deliver perfect
results:

@example
Michael Stipe
       mail:  stipey@@remhq.com
       notes: 245 Dan Rather Avenue
       Atlanta
       GA
@end example

@node Printing,Dialing,Snarfing,Tutorial
@anchor{tutorial printing}@anchor{1b}
@section Printing


'bbdb-print' produces a TeX file for the current set of contacts and
uses bbdb-print-tex-path (typically /path/to/bbdb/tex) to locate the
TeX templates.

BBDB then creates a TeX file which must be processed using TeX (not
LaTeX) to produce a PDF ready for printing.

@node Dialing,,Printing,Tutorial
@anchor{tutorial dialing}@anchor{1c}
@section Dialing


'bbdb-dial' dials the number under point.

@node Gnus,Mail,Tutorial,Top
@anchor{gnus gnus}@anchor{1d}@anchor{gnus doc}@anchor{1e}
@chapter Gnus


Although using BBDB interactively illustrates key features, the real
power of BBDB is when used in conjunction with a mail or news reader.

BBDB calls any such mail/news reader a Mail User Agent (MUA) and
offers similar functionality for all supported MUA's.

This MUA abstraction makes it relatively easy to add support for new
mail readers.

BBDB also supports 'message-mode' which is commonly used by mail
programs to send outbound email messages. Again, as BBDB integrates
with 'message-node', it automatically works with any Emacs mail
program that supports 'message-mode'.

The real power is the ability to automatically add entries to BBDB
when reading email or news.

@menu
* What version of Gnus do I need ?:: 
* Automatically add entries:: 
* Whitelists and blacklists:: 
* Use full name:: 
* Gnus Summary Line:: 

@end menu

@node What version of Gnus do I need ?,Automatically add entries,,Gnus
@anchor{gnus what-version-of-gnus-do-i-need}@anchor{1f}
@section What version of Gnus do I need ?


BBDB works with any version of Gnus bundled with Emacs 23 (and later).

@node Automatically add entries,Whitelists and blacklists,What version of Gnus do I need ?,Gnus
@anchor{gnus automatically-add-entries}@anchor{20}
@section Automatically add entries


To ensure Gnus and message mode both use BBDB, add these lines to
'init.el':

@example
(bbdb-initialize 'gnus 'message)
(bbdb-mua-auto-update-init 'gnus 'message)
;
; Display BBDB in popup window
(setq bbdb-mua-pop-up t)
;
; Look for existing contact, interactively prompt to create
(setq bbdb-mua-update-interactive-p '(query . create))
@end example

This configuration integrates Gnus into BBDB. No contacts will be
added to BBDB unless the user explicitly requests this action.

For an @emph{interesting} contact, simply type ';' in the Gnus summary buffer
which invokes 'bbdb-mua-edit-field-sender'.

BBDB offers the following options:

@example
Michael Stipe is not in BBDB; add (y ! n s q ?)
Type ? for this help
Type 'y to add the current record
Type ! to add all the remaining records
Type n to skip the current record (You may also use space)
Type s to switch from annotate to search mode
Type q to quit updating records. No more search or annotation is done.
@end example

Type 'y' to add the contact and annotate as required. For example, a
personal contact might be tagged with 'Family' in the 'Notes' field.

When composing or replying to a message, you can use 'TAB'
('message-tab') to complete names from BBDB.

To enable fully automatic and insidious mode, use:

@example
; Silently add record to BBDB (if not already present)
(setq bbdb-update-records-p 'create)
; Update BBDB silently
(setq bbdb-mua-pop-up nil)
@end example

@node Whitelists and blacklists,Use full name,Automatically add entries,Gnus
@anchor{gnus whitelists-and-blacklists}@anchor{21}
@section Whitelists and blacklists


[ Check this and test ]

There are some scenarios where it is not useful for BBDB to mindlessly
collect contact information. One example is the Gmane mailing lists
where the true email addresses of posters are masked:

@example
(setq bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook)
(setq bbdb/news-auto-create-p 'bbdb-ignore-some-messages-hook)
(setq bbdb-ignore-some-messages-alist
  `(("From" . "public.gmane.org")
   ("Newsgroups" . "gmane.*")
   ))
@end example

@node Use full name,Gnus Summary Line,Whitelists and blacklists,Gnus
@anchor{gnus use-full-name}@anchor{22}
@section Use full name


[ Check this example too ]

Some people (or their IT administrators) have malformed names in their
email configuration. If you prefer to see names correctly capitalized
as 'Mike Mills' rather than 'mike mills' or, worse, 'MIKE MILLS', you
can ask Gnus to display the name stored in BBDB in preference to the name
supplied in the mail or article header information:

@example
; display names as in BBDB database
(autoload 'bbdb/gnus-lines-and-from "bbdb-gnus")
@end example

@node Gnus Summary Line,,Use full name,Gnus
@anchor{gnus gnus-summary-line}@anchor{23}
@section Gnus Summary Line


To get Gnus to display the BBDB name together with a indication (the
'+' character) that the sender is known to BBDB, use:

@example
; Default with %f ('Name, To header or Newsgroups header')
; replaced by %uB (BBDB Name + Known poster indicator '+')
;
; Original Gnus setting
;
; ‘%U%R%z%I%(%[%4L: %-23,23f%]%) %s\n’.
(setq gnus-summary-line-format "%U%R%z%I%(%[%4L: %-23,23uB%]%) %s\n")
@end example

@node Mail,Org Mode,Gnus,Top
@anchor{mail mail}@anchor{24}@anchor{mail doc}@anchor{25}
@chapter Mail


Apparently there are other mail readers for Emacs besides Gnus. Most
of these mail handling programs are supported by BBDB.

As mailing handling is abstracted to a generic Mail user Agent (MUA),
adding support for a new Emacs mail reader program should be
relatively straightforward. [Hint: Look at the code for the existing
readers].

@menu
* MH-E:: 
* mu4e:: 
* notmuch:: 
* rmail:: 
* VM:: 
* Wanderlust:: 

@end menu

@node MH-E,mu4e,,Mail
@anchor{mail mh-e}@anchor{26}
@section MH-E


@indicateurl{https://www.gnu.org/software/emacs/manual/html_mono/mh-e.html}

[ Last updated in 2013 ]

@node mu4e,notmuch,MH-E,Mail
@anchor{mail mu4e}@anchor{27}
@section mu4e


@indicateurl{http://www.djcbsoftware.nl/code/mu/mu4e.html}

[ Actively maintained ]

@node notmuch,rmail,mu4e,Mail
@anchor{mail notmuch}@anchor{28}
@section notmuch


@indicateurl{https://notmuchmail.org/}

[ Actively maintained ]

@node rmail,VM,notmuch,Mail
@anchor{mail rmail}@anchor{29}
@section rmail


@indicateurl{https://www.gnu.org/software/emacs/manual/html_node/emacs/Rmail.html}

@node VM,Wanderlust,rmail,Mail
@anchor{mail vm}@anchor{2a}
@section VM


@indicateurl{http://www.nongnu.org/viewmail/}

@node Wanderlust,,VM,Mail
@anchor{mail wanderlust}@anchor{2b}
@section Wanderlust


@indicateurl{https://www.emacswiki.org/emacs/BBDBV3-Wl}

@node Org Mode,Utilities,Mail,Top
@anchor{orgmode org-mode}@anchor{2c}@anchor{orgmode doc}@anchor{2d}
@chapter Org Mode


@menu
* Agenda:: 

@end menu

@node Agenda,,,Org Mode
@anchor{orgmode agenda}@anchor{2e}
@section Agenda


The variable 'org-bbdb-anniversary-field' (default 'anniversary') can
be modified to show birthdays in orgmode.

Ensure the following lines are contained in 'org-default-agenda-files':

@example
*Anniversaries
+CATEGORY: Anniv
%%(org-bbdb-anniversaries)
@end example

@node Utilities,Elisp Documentation,Org Mode,Top
@anchor{utilities doc}@anchor{2f}@anchor{utilities utilities}@anchor{30}
@chapter Utilities


@menu
* Import:: 
* Export:: 

@end menu

@node Import,Export,,Utilities
@anchor{utilities import}@anchor{31}
@section Import



@itemize *

@item 
CSV

@item 
VCF card
@end itemize

@node Export,,Import,Utilities
@anchor{utilities export}@anchor{32}
@section Export


@indicateurl{https://gitorious.org/bbdb-syncml/bbdb-syncml}

@indicateurl{https://gitorious.org/bbdb-syncml/bbdb-syncml}

@node Elisp Documentation,FAQ,Utilities,Top
@anchor{elisp doc}@anchor{33}@anchor{elisp elisp-documentation}@anchor{34}
@chapter Elisp Documentation


Summary of BBDB commands and functions. This section will be
automatically generated by Sphinx.

@menu
* Key Index:: 
* Command Index:: 
* Function Index:: 
* Variable Index:: 
* Hooks:: 

@end menu

@node Key Index,Command Index,,Elisp Documentation
@anchor{elisp key-index}@anchor{35}
@section Key Index


@node Command Index,Function Index,Key Index,Elisp Documentation
@anchor{elisp command-index}@anchor{36}
@section Command Index


@node Function Index,Variable Index,Command Index,Elisp Documentation
@anchor{elisp function-index}@anchor{37}
@section Function Index


@node Variable Index,Hooks,Function Index,Elisp Documentation
@anchor{elisp variable-index}@anchor{38}
@section Variable Index


@node Hooks,,Variable Index,Elisp Documentation
@anchor{elisp hooks}@anchor{39}
@section Hooks


@node FAQ,Third party packages,Elisp Documentation,Top
@anchor{faq faq}@anchor{3a}@anchor{faq doc}@anchor{3b}
@chapter FAQ


@menu
* What version of Emacs do I need ?:: 
* How do you automatically save BBDB on exit ?:: 
* How to get help with BBDB ?:: 
* How to report a problem with BBDB ?:: 
* File format information:: 
* Tuning BBDB:: 
* Incorrect BBDB version:: 

@end menu

@node What version of Emacs do I need ?,How do you automatically save BBDB on exit ?,,FAQ
@anchor{faq what-version-of-emacs-do-i-need}@anchor{3c}
@section What version of Emacs do I need ?


Version 23, 24 or 25 of GNU Emacs. XEmacs is longer supported

@node How do you automatically save BBDB on exit ?,How to get help with BBDB ?,What version of Emacs do I need ?,FAQ
@anchor{faq how-do-you-automatically-save-bbdb-on-exit}@anchor{3d}
@section How do you automatically save BBDB on exit ?


@node How to get help with BBDB ?,How to report a problem with BBDB ?,How do you automatically save BBDB on exit ?,FAQ
@anchor{faq how-to-get-help-with-bbdb}@anchor{3e}
@section How to get help with BBDB ?


The best place to get help with BBDB3 is the mailing list:

@example
There is a mailing list for discussion of BBDB:
  bbdb-info@@lists.sourceforge.net
To join, send mail to bbdb-info-request@@lists.sourceforge.net
@end example

@node How to report a problem with BBDB ?,File format information,How to get help with BBDB ?,FAQ
@anchor{faq how-to-report-a-problem-with-bbdb}@anchor{3f}
@section How to report a problem with BBDB ?


Send a detailed report to the BBDB mailing list including the
following info:-


@itemize *

@item 
Emacs version

@item 
BBDB version

@item 
BBDB/Message/Mail customizations

@item 
What you expected to happen

@item 
What happened
@end itemize

@node File format information,Tuning BBDB,How to report a problem with BBDB ?,FAQ
@anchor{faq file-format-information}@anchor{40}
@section File format information


You don't need to know this but the BBDB file format version is
embedded within the database file:

@example
$ head -2 ~/.emacs.d/bbdb
;; -*- mode: Emacs-Lisp; coding: utf-8; -*-
;;; file-format: 7
@end example

@node Tuning BBDB,Incorrect BBDB version,File format information,FAQ
@anchor{faq tuning-bbdb}@anchor{41}
@section Tuning BBDB


[ Roland - is this still true ? What is the current state of caching ?]

BBDB uses a "message cache" for caching the BBDB records associated
with a message. I had made a silly mistake that made the cache
ineffective in BBDB 3. Well, that bug was easily fixed. But with the
cache being effective again, some fairly important other things are
not working anymore.


@itemize *

@item 
The message cache contains for each message those records that have
been recognized / created when the message was first viewed in the
MUA. If these were the records matching the recipients (say,
following a call of bbdb-mua-display-recipients), a subsequent call
of bbdb-mua-display-sender again displays the recipients, because
only those records are stored in the cache. Not quite the expected
behaviour.

@item 
Messages are identified in the cache via 'assq' and "message
keys". VM uses a message-pointer and rmail uses an integer message
key that work fine with assq. Yet for gnus, BBDB 2 used the function
bbdb/gnus-get-message-id that returns the value of the "Message-ID"
header of a message as a string. For BBDB 3, I even copied this idea
for other MUAs... Yet strings don't work with assq and all the
caching fails.

Here a simple work appears to be assoc instead of assq. Yet this is
slower than assq, and I have doubts that then all the caching is
still worth the extra coding effort (in particular, when properly
keeping track of senders and recipients).
@end itemize

@node Incorrect BBDB version,,Tuning BBDB,FAQ
@anchor{faq incorrect-bbdb-version}@anchor{42}
@section Incorrect BBDB version


If BBDB is built from source, 'M-x bbdb-version' reports the version:

@example
BBDB version 3.1.2 (2016-07-21 01:18:24 -0500)
@end example

However, if you are using BBDB diownloaded from Melpa, 'M-x
bbdb-version' reports:

@example
'BBDB version @@PACKAGE_VERSION@@ (@@PACKAGE_DATE@@)'
@end example

This is a known issue with the packaging process on Melpa.

If you need to know the correct BBDB version (e.g for a bug report),
then either cite the date of the Melpa package. Alternatively, use:

@example
M-x locate-library
bbdb-site
'Library is file /path/to/bbdb/lisp/bbdb-site.elc'
$ grep bbdb-version /path/to/bbdb/lisp/bbdb-site.el
(defconst bbdb-version "3.1.2" "Version of BBDB.")
(defconst bbdb-version-date "2016-07-21 01:18:24 -0500"
@end example

@node Third party packages,Lisp library bbdb,FAQ,Top
@anchor{thirdparty third-party-packages}@anchor{43}@anchor{thirdparty doc}@anchor{44}
@chapter Third party packages


There are a variety of BBDB related packages available.

Some are fairly old and were originally written for BBDB2, some have
been ported and updated for BBDB3 while other are new extensions
written specifically for BBDB3.

@menu
* Melpa:: 
* Misc:: 

@end menu

@node Melpa,Misc,,Third party packages
@anchor{thirdparty melpa}@anchor{45}
@section Melpa


The following BBDB related packages are listed in Melpa:-


@multitable {xxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} 
@headitem

Package

@tab

Version

@tab

Description

@item

bbdb-

@tab

20140221.1554

@tab

provide interface for more easily search/choice than BBDB

@item

bbdb-android

@tab

20150707.2224

@tab

Android phone contacts import/export for BBDB

@item

bbdb-china

@tab

20150615.1856

@tab

BBDB utils, which let Chinese users feel easy

@item

bdbb-csv-import

@tab

20140802.442

@tab

import csv to bbdb version 3+

@item

bbdb-ext

@tab

20151220.1213

@tab

Extra commands for BBDB

@item

bbdb-handy

@tab

20150707.1752

@tab

BBDB window as email address chooser when write an email

@item

bbdb-vcard

@tab

20150713.1350

@tab

vCard import/export for BBDB

@item

bbdb2erc

@tab

20130606.2329

@tab

make bbdb show if pal is online, click i to chat

@item

gmail2bbdb

@tab

20150909.1839

@tab

import email and name into bbdb from vcard

@item

gnorb

@tab

1.1.2

@tab

Glue code between Gnus, Org, and BBDB

@end multitable


@node Misc,,Melpa,Third party packages
@anchor{thirdparty misc}@anchor{46}
@section Misc


Other packages encountered. Current status unknown.


@itemize *

@item 
lookout.el
@end itemize

@node Lisp library bbdb,Lisp library bbdb-anniv,Third party packages,Top
@anchor{bbdb lisp-library-bbdb}@anchor{47}@anchor{bbdb doc}@anchor{48}
@chapter Lisp library (bbdb)


@menu
* Functions:: 
* Variables:: 
* Hooks: Hooks<2>. 

@end menu

@node Functions,Variables,,Lisp library bbdb
@anchor{bbdb functions}@anchor{49}
@section Functions


@geindex bbdb-address-continental-p; Emacs Lisp function
@anchor{bbdb el function bbdb-address-continental-p}@anchor{4a}
@deffn {Function} bbdb@w{-}address@w{-}continental@w{-}p address

@format
Return non-nil if ADDRESS is a continental address.
This is done by comparing the postcode to @ref{4b,,`bbdb-continental-postcode-regexp'}.

This is a possible identifying function for
@ref{4c,,`bbdb-address-format-list'} and @ref{4d,,`bbdb-print-address-format-list'}.
@end format
@end deffn

@geindex bbdb-after-save; Emacs Lisp function
@anchor{bbdb el function bbdb-after-save}@anchor{4e}
@deffn {Function} bbdb@w{-}after@w{-}save 

@format
Run after saving @ref{4f,,`bbdb-file'} as buffer-local part of @code{`after-save-hook'}.
@end format
@end deffn

@geindex bbdb-before-save; Emacs Lisp function
@anchor{bbdb el function bbdb-before-save}@anchor{50}
@deffn {Function} bbdb@w{-}before@w{-}save 

@format
Run before saving @ref{4f,,`bbdb-file'} as buffer-local part of @code{`before-save-hook'}.
@end format
@end deffn

@geindex bbdb-buffer; Emacs Lisp function
@anchor{bbdb el function bbdb-buffer}@anchor{51}
@deffn {Function} bbdb@w{-}buffer 

@format
Return buffer that visits the BBDB file @ref{4f,,`bbdb-file'}.
Ensure that this buffer is in sync with @ref{4f,,`bbdb-file'}.
Revert the buffer if necessary.
If @ref{52,,`bbdb-file-remote'} is non-nil and it is newer than @ref{4f,,`bbdb-file'},
copy it to @ref{4f,,`bbdb-file'}.
@end format
@end deffn

@geindex bbdb-canonicalize-mail-1; Emacs Lisp function
@anchor{bbdb el function bbdb-canonicalize-mail-1}@anchor{53}
@deffn {Function} bbdb@w{-}canonicalize@w{-}mail@w{-}1 address

@format
Example of @ref{54,,`bbdb-canonicalize-mail-function'}.
However, this function is too specific to be useful for the general user.
Take it as a source of inspiration for what can be done.
@end format
@end deffn

@geindex bbdb-change-record; Emacs Lisp function
@anchor{bbdb el function bbdb-change-record}@anchor{55}
@deffn {Function} bbdb@w{-}change@w{-}record record &optional  ignored new

@format
Update the database after a change of RECORD.
Return RECORD if RECORD got changed compared with the database,
return nil otherwise.
IGNORED is ignored.  It is present only for backward compatibility.
If NEW is t treat RECORD as new.  New records are hashed.
If RECORD is not new, it is redisplayed.  Yet it is then the caller's
responsibility to update the hash-table for RECORD.
@end format
@end deffn

@geindex bbdb-check-name; Emacs Lisp function
@anchor{bbdb el function bbdb-check-name}@anchor{56}
@deffn {Function} bbdb@w{-}check@w{-}name first last &optional  record

@format
Check whether the name FIRST LAST is a valid name.
This throws an error if the name is already used by another record
and @ref{57,,`bbdb-allow-duplicates'} is nil.  If RECORD is non-nil, FIRST and LAST
may correspond to RECORD without raising an error.
@end format
@end deffn

@geindex bbdb-check-type; Emacs Lisp function
@anchor{bbdb el function bbdb-check-type}@anchor{58}
@deffn {Function} bbdb@w{-}check@w{-}type object type &optional  abort extended

@format
Return non-nil if OBJECT is of type TYPE.
TYPE is a pseudo-code as in @code{`bbdb-record-type'}.
If ABORT is non-nil, abort with error message if type checking fails.
If EXTENDED is non-nil, consider extended atomic types which may include
symbols, numbers, markers, and strings.
@end format
@end deffn

@geindex bbdb-clean-address-components; Emacs Lisp function
@anchor{bbdb el function bbdb-clean-address-components}@anchor{59}
@deffn {Function} bbdb@w{-}clean@w{-}address@w{-}components components

@format
Clean mail address COMPONENTS.
COMPONENTS is a list (FULL-NAME CANONICAL-ADDRESS) as returned
by @code{`mail-extract-address-components'}.
Pass FULL-NAME through @ref{5a,,`bbdb-message-clean-name-function'}
and CANONICAL-ADDRESS through @ref{54,,`bbdb-canonicalize-mail-function'}.
@end format
@end deffn

@geindex bbdb-concat; Emacs Lisp function
@anchor{bbdb el function bbdb-concat}@anchor{5b}
@deffn {Function} bbdb@w{-}concat separator &rest  strings

@format
Concatenate STRINGS to a string sticking in SEPARATOR.
STRINGS may be strings or lists of strings.  Empty strings are ignored.
SEPARATOR may be a string.
SEPARATOR may also be a symbol (a field name).  Then look up the value
of SEPARATOR in @ref{5c,,`bbdb-separator-alist'} or use @ref{5d,,`bbdb-default-separator'}.
The inverse function of @ref{5e,,`bbdb-split'}.
@end format
@end deffn

@geindex bbdb-creation-date; Emacs Lisp function
@anchor{bbdb el function bbdb-creation-date}@anchor{5f}
@deffn {Function} bbdb@w{-}creation@w{-}date record

@format
For use as an element of @ref{60,,`bbdb-create-hook'}.
Adds an xfield @code{`creation-date'} for RECORD which is the current time string.
@end format
@end deffn

@geindex bbdb-current-field; Emacs Lisp function
@anchor{bbdb el function bbdb-current-field}@anchor{61}
@deffn {Function} bbdb@w{-}current@w{-}field 

@format
Return current field point is on.
@end format
@end deffn

@geindex bbdb-current-record; Emacs Lisp function
@anchor{bbdb el function bbdb-current-record}@anchor{62}
@deffn {Function} bbdb@w{-}current@w{-}record  &optional full

@format
Return the record point is at.
If FULL is non-nil record includes the display information.
@end format
@end deffn

@geindex bbdb-decompose-bbdb-address; Emacs Lisp function
@anchor{bbdb el function bbdb-decompose-bbdb-address}@anchor{63}
@deffn {Function} bbdb@w{-}decompose@w{-}bbdb@w{-}address mail

@format
Given an RFC-822 address MAIL, extract full name and canonical address.
In general, this function behaves like the more sophisticated function
@code{`mail-extract-address-components'}.  Yet for an address @code{`<Joe_Smith@@foo.com>'}
lacking a real name the latter function returns the name "Joe Smith".
This is useful when analyzing the headers of email messages we receive
from the outside world.  Yet when analyzing the mail addresses stored
in BBDB, this pollutes the mail-aka space.  So we define here
an intentionally much simpler function for decomposing the names
and canonical addresses in the mail field of BBDB records.
@end format
@end deffn

@geindex bbdb-delete-record-internal; Emacs Lisp function
@anchor{bbdb el function bbdb-delete-record-internal}@anchor{64}
@deffn {Function} bbdb@w{-}delete@w{-}record@w{-}internal record &optional  completely

@format
Delete RECORD in the database file.
With COMPLETELY non-nil, also undisplay RECORD and remove it
from the hash table.
@end format
@end deffn

@geindex bbdb-display-list; Emacs Lisp function
@anchor{bbdb el function bbdb-display-list}@anchor{65}
@deffn {Function} bbdb@w{-}display@w{-}list list field &optional  terminator face indent

@format
Insert elements of LIST at point.
For inserted text, set text property bbdb-field to FIELD.
If TERMINATOR is non-nil use it to terminate the inserted text.
If FACE is non-nil use it as FACE for inserted text.
If INDENT and @ref{66,,`bbdb-wrap-column'} are integers, insert line breaks in between
elements of LIST if otherwise inserted text exceeds @ref{66,,`bbdb-wrap-column'}.
@end format
@end deffn

@geindex bbdb-display-name-organization; Emacs Lisp function
@anchor{bbdb el function bbdb-display-name-organization}@anchor{67}
@deffn {Function} bbdb@w{-}display@w{-}name@w{-}organization record

@format
Insert name, affix, and organization of RECORD.
If RECORD has an xfield name-face, its value is used for font-locking name.
The value of name-face may be a face that is used directly.
The value may also be a key in @ref{68,,`bbdb-name-face-alist'}.  Then the
corresponding cdr is used.  If none of these schemes succeeds the face
@code{`bbdb-face'} is used.
@end format
@end deffn

@geindex bbdb-display-record-multi-line; Emacs Lisp function
@anchor{bbdb el function bbdb-display-record-multi-line}@anchor{69}
@deffn {Function} bbdb@w{-}display@w{-}record@w{-}multi@w{-}line record layout field-list

@format
Format RECORD for the multi-line FORMAT using LAYOUT.
See @ref{6a,,`bbdb-layout-alist'} for more info on layouts.
FIELD-LIST is the list of actually displayed FIELDS.
@end format
@end deffn

@geindex bbdb-display-record-one-line; Emacs Lisp function
@anchor{bbdb el function bbdb-display-record-one-line}@anchor{6b}
@deffn {Function} bbdb@w{-}display@w{-}record@w{-}one@w{-}line record layout field-list

@format
Format RECORD for the one-line FORMAT using LAYOUT.
See @ref{6a,,`bbdb-layout-alist'} for more info on layouts.
FIELD-LIST is the list of actually displayed FIELDS.
@end format
@end deffn

@geindex bbdb-display-record; Emacs Lisp function
@anchor{bbdb el function bbdb-display-record}@anchor{6c}
@deffn {Function} bbdb@w{-}display@w{-}record record layout number

@format
Insert a formatted RECORD into the current buffer at point.
LAYOUT can be a symbol describing a layout in @ref{6a,,`bbdb-layout-alist'}.
If it is nil, use @ref{6d,,`bbdb-layout'}.
NUMBER is the number of RECORD among the displayed records.
Move point to the end of the inserted record.
@end format
@end deffn

@geindex bbdb-display-records; Emacs Lisp function
@anchor{bbdb el function bbdb-display-records}@anchor{6e}
@deffn {Function} bbdb@w{-}display@w{-}records records &optional  layout append select horiz-p

@format
Display RECORDS using LAYOUT.
If APPEND is non-nil append RECORDS to the already displayed records.
Otherwise RECORDS overwrite the displayed records.
SELECT and HORIZ-P have the same meaning as in @ref{6f,,`bbdb-pop-up-window'}.
@end format
@end deffn

@geindex bbdb-display-records; Emacs Lisp function

@deffn {Function} bbdb@w{-}display@w{-}records records &optional  layout append select horiz-p

@format
Display RECORDS using LAYOUT.
If APPEND is non-nil append RECORDS to the already displayed records.
Otherwise RECORDS overwrite the displayed records.
SELECT and HORIZ-P have the same meaning as in @ref{6f,,`bbdb-pop-up-window'}.
@end format
@end deffn

@geindex bbdb-divide-name; Emacs Lisp function
@anchor{bbdb el function bbdb-divide-name}@anchor{70}
@deffn {Function} bbdb@w{-}divide@w{-}name string

@format
Divide STRING into a first name and a last name.
Case is ignored.  Return name as (FIRST . LAST).
LAST is always a string (possibly empty).  FIRST may be nil.
@end format
@end deffn

@geindex bbdb-editable; Emacs Lisp function
@anchor{bbdb el function bbdb-editable}@anchor{71}
@deffn {Function} bbdb@w{-}editable 

@format
Ensure that BBDB is editable, otherwise throw an error.
If BBDB is out of sync try to revert.
BBDB is not editable if it is read-only.
@end format
@end deffn

@geindex bbdb-empty-record; Emacs Lisp function
@anchor{bbdb el function bbdb-empty-record}@anchor{72}
@deffn {Function} bbdb@w{-}empty@w{-}record 

@format
Return a new empty record structure with a cache.
It is the caller's responsibility to make the new record known to BBDB.
@end format
@end deffn

@geindex bbdb-empty-record; Emacs Lisp function

@deffn {Function} bbdb@w{-}empty@w{-}record 

@format
Return a new empty record structure with a cache.
It is the caller's responsibility to make the new record known to BBDB.
@end format
@end deffn

@geindex bbdb-extract-address-components; Emacs Lisp function
@anchor{bbdb el function bbdb-extract-address-components}@anchor{73}
@deffn {Function} bbdb@w{-}extract@w{-}address@w{-}components address &optional  all

@format
Given an RFC-822 address ADDRESS, extract full name and canonical address.
This function behaves like @code{`mail-extract-address-components'}, but it passes
its return value through @ref{59,,`bbdb-clean-address-components'}.
See also @ref{63,,`bbdb-decompose-bbdb-address'}.
@end format
@end deffn

@geindex bbdb-field-menu; Emacs Lisp function
@anchor{bbdb el function bbdb-field-menu}@anchor{74}
@deffn {Function} bbdb@w{-}field@w{-}menu record field

@format
Menu items specifically for FIELD of RECORD.
@end format
@end deffn

@geindex bbdb-format-address; Emacs Lisp function
@anchor{bbdb el function bbdb-format-address}@anchor{75}
@deffn {Function} bbdb@w{-}format@w{-}address address layout

@format
Format ADDRESS using LAYOUT.  Return result as a string.
The formatting rules are defined in @ref{4c,,`bbdb-address-format-list'}.
@end format
@end deffn

@geindex bbdb-format-address-default; Emacs Lisp function
@anchor{bbdb el function bbdb-format-address-default}@anchor{76}
@deffn {Function} bbdb@w{-}format@w{-}address@w{-}default address

@format
Return formatted ADDRESS as a string.
This is the default format; it is used in the US, for example.
The result looks like this:
       label: street
              street
              ...
              city, state postcode
              country.

This function is a possible formatting function for
@ref{4c,,`bbdb-address-format-list'}.
@end format
@end deffn

@geindex bbdb-gethash; Emacs Lisp function
@anchor{bbdb el function bbdb-gethash}@anchor{77}
@deffn {Function} bbdb@w{-}gethash key &optional  predicate

@format
Return list of records associated with KEY in @ref{78,,`bbdb-hashtable'}.
KEY must be a string or nil.  Empty strings and nil are ignored.
PREDICATE may take the same values as @ref{79,,`bbdb-completion-list'}.
@end format
@end deffn

@geindex bbdb-goto-first-record; Emacs Lisp function
@anchor{bbdb el function bbdb-goto-first-record}@anchor{7a}
@deffn {Function} bbdb@w{-}goto@w{-}first@w{-}record 

@format
Go to where first record begins,  Move to end of file if no records.
@end format
@end deffn

@geindex bbdb-hash-p; Emacs Lisp function
@anchor{bbdb el function bbdb-hash-p}@anchor{7b}
@deffn {Function} bbdb@w{-}hash@w{-}p key record predicate

@format
Throw @code{`bbdb-hash-ok'} non-nil if KEY matches RECORD acording to PREDICATE.
PREDICATE may take the same values as the elements of @ref{79,,`bbdb-completion-list'}.
@end format
@end deffn

@geindex bbdb-hash-record; Emacs Lisp function
@anchor{bbdb el function bbdb-hash-record}@anchor{7c}
@deffn {Function} bbdb@w{-}hash@w{-}record record

@format
Insert RECORD in @ref{78,,`bbdb-hashtable'}.
This performs all initializations required for a new record.
Do not call this for existing records that require updating.
@end format
@end deffn

@geindex bbdb-hash-update; Emacs Lisp function
@anchor{bbdb el function bbdb-hash-update}@anchor{7d}
@deffn {Function} bbdb@w{-}hash@w{-}update record old new

@format
Update hash for RECORD.  Remove OLD, insert NEW.
Both OLD and NEW are lists of values.
@end format
@end deffn

@geindex bbdb-initialize; Emacs Lisp function
@anchor{bbdb el function bbdb-initialize}@anchor{7e}
@deffn {Function} bbdb@w{-}initialize  &rest muas

@format
Initialize BBDB for MUAS and miscellaneous packages.
List MUAS may include the following symbols to initialize the respective
mail/news readers, composers, and miscellaneous packages:
  gnus       Gnus mail/news reader.
  mh-e       MH-E mail reader.
  mu4e       Mu4e mail reader.
  rmail      Rmail mail reader.
  vm         VM mail reader.
  mail       Mail (M-x mail).
  message    Message mode.
  wl         Wanderlust mail reader.

  anniv      Anniversaries in Emacs diary.

  sc         Supercite.  However, this is not the full story.
               See bbdb-sc.el for how to fully hook BBDB into Supercite.

  pgp        PGP support:  this adds @ref{7f,,`bbdb-pgp'} to @code{`message-send-hook'}
               and @code{`mail-send-hook'} so that @ref{7f,,`bbdb-pgp'} runs automatically
               when a message is sent.
               Yet see info node @ref{Signing and encryption,,,message}
               why you might not want to rely for encryption on a hook
               function which runs just before the message is sent,
               that is, you might want to call the command @ref{7f,,`bbdb-pgp'} manually,
               then call @code{`mml-preview'}.

See also @ref{80,,`bbdb-mua-auto-update-init'}.  The latter is a separate function
as this allows one to initialize the auto update feature for some MUAs only,
for example only for outgoing messages.
@end format
@end deffn

@geindex bbdb-insert-field-menu; Emacs Lisp function
@anchor{bbdb el function bbdb-insert-field-menu}@anchor{81}
@deffn {Function} bbdb@w{-}insert@w{-}field@w{-}menu record

@format
Submenu for inserting a new field for RECORD.
@end format
@end deffn

@geindex bbdb-insert-record-internal; Emacs Lisp function
@anchor{bbdb el function bbdb-insert-record-internal}@anchor{82}
@deffn {Function} bbdb@w{-}insert@w{-}record@w{-}internal record

@format
Insert RECORD into the database file.  Return RECORD.
Do not call this function directly, call instead @ref{55,,`bbdb-change-record'}
that calls the hooks, too.
@end format
@end deffn

@geindex bbdb-layout-get-option; Emacs Lisp function
@anchor{bbdb el function bbdb-layout-get-option}@anchor{83}
@deffn {Function} bbdb@w{-}layout@w{-}get@w{-}option layout option

@format
For LAYOUT return value of OPTION according to @ref{6a,,`bbdb-layout-alist'}.
@end format
@end deffn

@geindex bbdb-list-strings; Emacs Lisp function
@anchor{bbdb el function bbdb-list-strings}@anchor{84}
@deffn {Function} bbdb@w{-}list@w{-}strings list

@format
Remove all elements from LIST which are not non-empty strings.
@end format
@end deffn

@geindex bbdb-merge-concat-remove-duplicates; Emacs Lisp function
@anchor{bbdb el function bbdb-merge-concat-remove-duplicates}@anchor{85}
@deffn {Function} bbdb@w{-}merge@w{-}concat@w{-}remove@w{-}duplicates string1 string2

@format
Concatenate STRING1 and STRING2, but remove duplicate lines.
@end format
@end deffn

@geindex bbdb-merge-concat; Emacs Lisp function
@anchor{bbdb el function bbdb-merge-concat}@anchor{86}
@deffn {Function} bbdb@w{-}merge@w{-}concat string1 string2 &optional  separator

@format
Return the concatenation of STRING1 and STRING2.
SEPARATOR defaults to "\n".
@end format
@end deffn

@geindex bbdb-merge-lists; Emacs Lisp function
@anchor{bbdb el function bbdb-merge-lists}@anchor{87}
@deffn {Function} bbdb@w{-}merge@w{-}lists l1 l2 cmp

@format
Merge two lists L1 and L2 based on comparison CMP.
An element from L2 is added to L1 if CMP returns nil for all elements of L1.
If L1 or L2 are not lists, they are replaced by (list L1) and (list L2).
@end format
@end deffn

@geindex bbdb-merge-string-least; Emacs Lisp function
@anchor{bbdb el function bbdb-merge-string-least}@anchor{88}
@deffn {Function} bbdb@w{-}merge@w{-}string@w{-}least string1 string2

@format
Return the string out of STRING1 and STRING2 that is @code{`string-lessp'}.
@end format
@end deffn

@geindex bbdb-merge-string-most; Emacs Lisp function
@anchor{bbdb el function bbdb-merge-string-most}@anchor{89}
@deffn {Function} bbdb@w{-}merge@w{-}string@w{-}most string1 string2

@format
Return the string out of STRING1 and STRING2 that is not @code{`string-lessp'}.
@end format
@end deffn

@geindex bbdb-merge-xfield; Emacs Lisp function
@anchor{bbdb el function bbdb-merge-xfield}@anchor{8a}
@deffn {Function} bbdb@w{-}merge@w{-}xfield label value1 value2

@format
For LABEL merge VALUE1 with VALUE2.
If LABEL has an entry in @ref{8b,,`bbdb-merge-xfield-function-alist'}, use it.
If VALUE1 or VALUE2 is a substring of the other, return the longer one.
Otherwise use @ref{5b,,`bbdb-concat'}.  Return nil if we have nothing to merge.
@end format
@end deffn

@geindex bbdb-message-clean-name-default; Emacs Lisp function
@anchor{bbdb el function bbdb-message-clean-name-default}@anchor{8c}
@deffn {Function} bbdb@w{-}message@w{-}clean@w{-}name@w{-}default name

@format
Default function for @ref{5a,,`bbdb-message-clean-name-function'}.
This strips garbage from the user full NAME string.
@end format
@end deffn

@geindex bbdb-mouse-menu; Emacs Lisp function
@anchor{bbdb el function bbdb-mouse-menu}@anchor{8d}
@deffn {Function} bbdb@w{-}mouse@w{-}menu event

@format
BBDB mouse menu for EVENT,
@end format
@end deffn

@geindex bbdb-merge-concat-remove-duplicates; Emacs Lisp function

@deffn {Function} bbdb@w{-}merge@w{-}concat@w{-}remove@w{-}duplicates string1 string2

@format
Concatenate STRING1 and STRING2, but remove duplicate lines.
@end format
@end deffn

@geindex bbdb-merge-concat; Emacs Lisp function

@deffn {Function} bbdb@w{-}merge@w{-}concat string1 string2 &optional  separator

@format
Return the concatenation of STRING1 and STRING2.
SEPARATOR defaults to "\n".
@end format
@end deffn

@geindex bbdb-merge-string-least; Emacs Lisp function

@deffn {Function} bbdb@w{-}merge@w{-}string@w{-}least string1 string2

@format
Return the string out of STRING1 and STRING2 that is @code{`string-lessp'}.
@end format
@end deffn

@geindex bbdb-merge-string-most; Emacs Lisp function

@deffn {Function} bbdb@w{-}merge@w{-}string@w{-}most string1 string2

@format
Return the string out of STRING1 and STRING2 that is not @code{`string-lessp'}.
@end format
@end deffn

@geindex bbdb-merge-xfield; Emacs Lisp function

@deffn {Function} bbdb@w{-}merge@w{-}xfield label value1 value2

@format
For LABEL merge VALUE1 with VALUE2.
If LABEL has an entry in @ref{8b,,`bbdb-merge-xfield-function-alist'}, use it.
If VALUE1 or VALUE2 is a substring of the other, return the longer one.
Otherwise use @ref{5b,,`bbdb-concat'}.  Return nil if we have nothing to merge.
@end format
@end deffn

@geindex bbdb-message-clean-name-default; Emacs Lisp function

@deffn {Function} bbdb@w{-}message@w{-}clean@w{-}name@w{-}default name

@format
Default function for @ref{5a,,`bbdb-message-clean-name-function'}.
This strips garbage from the user full NAME string.
@end format
@end deffn

@geindex bbdb-message-clean-name-function; Emacs Lisp variable
@anchor{bbdb el variable bbdb-message-clean-name-function}@anchor{5a}
@deffn {Variable} bbdb@w{-}message@w{-}clean@w{-}name@w{-}function

@format
Function to clean up the name in the header of a message.
It takes one argument, the name as extracted by
@code{`mail-extract-address-components'}.
@end format
@end deffn

@geindex bbdb-mouse-menu; Emacs Lisp function

@deffn {Function} bbdb@w{-}mouse@w{-}menu event

@format
BBDB mouse menu for EVENT,
@end format
@end deffn

@geindex bbdb-multiple-buffers-default; Emacs Lisp function
@anchor{bbdb el function bbdb-multiple-buffers-default}@anchor{8e}
@deffn {Function} bbdb@w{-}multiple@w{-}buffers@w{-}default 

@format
Default function for guessing a name for new *BBDB* buffers.
May be used as value of variable @ref{8f,,`bbdb-multiple-buffers'}.
@end format
@end deffn

@geindex bbdb-next-field; Emacs Lisp function
@anchor{bbdb el function bbdb-next-field}@anchor{90}
@deffn {Function} bbdb@w{-}next@w{-}field n

@format
Move point to next (sub)field.
With prefix N move forward N (sub)fields.
@end format
@end deffn

@geindex bbdb-next-record; Emacs Lisp function
@anchor{bbdb el function bbdb-next-record}@anchor{91}
@deffn {Function} bbdb@w{-}next@w{-}record n

@format
Move point to the beginning of the next BBDB record.
With prefix N move forward N records.
@end format
@end deffn

@geindex bbdb-overwrite-record-internal; Emacs Lisp function
@anchor{bbdb el function bbdb-overwrite-record-internal}@anchor{92}
@deffn {Function} bbdb@w{-}overwrite@w{-}record@w{-}internal record

@format
Overwrite RECORD in the database file.  Return RECORD.
Do not call this function directly, call instead @ref{55,,`bbdb-change-record'}
that calls the hooks, too.
@end format
@end deffn

@geindex bbdb-parse-postcode; Emacs Lisp function
@anchor{bbdb el function bbdb-parse-postcode}@anchor{93}
@deffn {Function} bbdb@w{-}parse@w{-}postcode string

@format
Check whether STRING is a legal postcode.
Do this only if @ref{94,,`bbdb-check-postcode'} is non-nil.
@end format
@end deffn

@geindex bbdb-parse-records; Emacs Lisp function
@anchor{bbdb el function bbdb-parse-records}@anchor{95}
@deffn {Function} bbdb@w{-}parse@w{-}records 

@format
Parse BBDB records and initialize various internal variables.
If @ref{4f,,`bbdb-file'} uses an outdated format, it is migrated to @code{`bbdb-file-format'}.
@end format
@end deffn

@geindex bbdb-phone-string; Emacs Lisp function
@anchor{bbdb el function bbdb-phone-string}@anchor{96}
@deffn {Function} bbdb@w{-}phone@w{-}string phone

@format
Massage string PHONE into a standard format.
@end format
@end deffn

@geindex bbdb-pop-up-window; Emacs Lisp function
@anchor{bbdb el function bbdb-pop-up-window}@anchor{6f}
@deffn {Function} bbdb@w{-}pop@w{-}up@w{-}window  &optional select horiz-p

@format
Display *BBDB* buffer by popping up a new window.
Finds the largest window on the screen, splits it, displaying the
*BBDB* buffer in the bottom @ref{97,,`bbdb-pop-up-window-size'} lines (unless
the *BBDB* buffer is already visible, in which case do nothing.)
Select this window if SELECT is non-nil.

If @ref{98,,`bbdb-mua-pop-up'} is 'horiz, and the first window matching
the predicate HORIZ-P is wider than the car of @ref{99,,`bbdb-horiz-pop-up-window-size'}
then the window will be split horizontally rather than vertically.
@end format
@end deffn

@geindex bbdb-pop-up-window-simple; Emacs Lisp function
@anchor{bbdb el function bbdb-pop-up-window-simple}@anchor{9a}
@deffn {Function} bbdb@w{-}pop@w{-}up@w{-}window@w{-}simple buffer select

@format
Display BUFFER in some window, selecting it if SELECT is non-nil.
If @ref{9b,,`bbdb-dedicated-window'} is non-nil, mark the window as dedicated.
@end format
@end deffn

@geindex bbdb-prev-field; Emacs Lisp function
@anchor{bbdb el function bbdb-prev-field}@anchor{9c}
@deffn {Function} bbdb@w{-}prev@w{-}field n

@format
Move point to previous (sub)field.
With prefix N move backwards N (sub)fields.
@end format
@end deffn

@geindex bbdb-prev-record; Emacs Lisp function
@anchor{bbdb el function bbdb-prev-record}@anchor{9d}
@deffn {Function} bbdb@w{-}prev@w{-}record n

@format
Move point to the beginning of the previous BBDB record.
With prefix N move backwards N records.
@end format
@end deffn

@geindex bbdb-puthash; Emacs Lisp function
@anchor{bbdb el function bbdb-puthash}@anchor{9e}
@deffn {Function} bbdb@w{-}puthash key record

@format
Associate RECORD with KEY in @ref{78,,`bbdb-hashtable'}.
KEY must be a string or nil.  Empty strings and nil are ignored.
@end format
@end deffn

@geindex bbdb-puthash-mail; Emacs Lisp function
@anchor{bbdb el function bbdb-puthash-mail}@anchor{9f}
@deffn {Function} bbdb@w{-}puthash@w{-}mail record

@format
For RECORD put mail into @ref{78,,`bbdb-hashtable'}.
@end format
@end deffn

@geindex bbdb-read-string; Emacs Lisp function
@anchor{bbdb el function bbdb-read-string}@anchor{a0}
@deffn {Function} bbdb@w{-}read@w{-}string prompt &optional  init collection require-match

@format
Read a string, trimming whitespace and text properties.
PROMPT is a string to prompt with.
INIT appears as initial input which is useful for editing existing records.
COLLECTION and REQUIRE-MATCH have the same meaning as in @code{`completing-read'}.
@end format
@end deffn

@geindex bbdb-record-field; Emacs Lisp function
@anchor{bbdb el function bbdb-record-field}@anchor{a1}
@deffn {Function} bbdb@w{-}record@w{-}field record field

@format
For RECORD return the value of FIELD.

FIELD may take the following values
 firstname     Return the first name of RECORD
 lastname      Return the last name of RECORD
 name          Return the full name of RECORD (first name first)
 name-lf       Return the full name of RECORD (last name first)
 affix         Return the list of affixes
 organization  Return the list of organizations
 aka           Return the list of AKAs
 aka-all       Return the list of AKAs plus mail-akas.
 mail          Return the list of email addresses
 mail-aka      Return the list of name parts in mail addresses
 mail-canon    Return the list of canonical mail addresses.
 phone         Return the list of phone numbers
 address       Return the list of addresses
 xfields       Return the list of all xfields

Any other symbol is interpreted as the label for an xfield.
Then return the value of this xfield.

See also @ref{a2,,`bbdb-record-set-field'}.
@end format
@end deffn

@geindex bbdb-record-name-lf; Emacs Lisp function
@anchor{bbdb el function bbdb-record-name-lf}@anchor{a3}
@deffn {Function} bbdb@w{-}record@w{-}name@w{-}lf record

@format
Record cache function: Return the full name LAST_FIRST of RECORD.
If the name is not available in the name cache, the name cache value
is generated and stored.
@end format
@end deffn

@geindex bbdb-record-name; Emacs Lisp function
@anchor{bbdb el function bbdb-record-name}@anchor{a4}
@deffn {Function} bbdb@w{-}record@w{-}name record

@format
Record cache function: Return the full name FIRST_LAST of RECORD.
If the name is not available in the name cache, the name cache value
is generated and stored.
@end format
@end deffn

@geindex bbdb-record-set-field; Emacs Lisp function
@anchor{bbdb el function bbdb-record-set-field}@anchor{a2}
@deffn {Function} bbdb@w{-}record@w{-}set@w{-}field record field value &optional  merge check

@format
For RECORD set FIELD to VALUE.  Return VALUE.
If MERGE is non-nil, merge VALUE with the current value of FIELD.
If CHECK is non-nil, check syntactically whether FIELD may take VALUE.
This function also updates the hash table.  However, it does not update
RECORD in the database.  Use @ref{55,,`bbdb-change-record'} for that.

FIELD may take the following values
 firstname     VALUE is the first name of RECORD
 lastname      VALUE is the last name of RECORD
 name          VALUE is the full name of RECORD either as one string
                 or as a cons pair (FIRST . LAST)
 affix         VALUE is the list of affixes
 organization  VALUE is the list of organizations
 aka           VALUE is the list of AKAs
 mail          VALUE is the list of email addresses
 phone         VALUE is the list of phone numbers
 address       VALUE is the list of addresses
 xfields       VALUE is the list of all xfields

Any other symbol is interpreted as the label for an xfield.
Then VALUE is the value of this xfield.

See also @ref{a1,,`bbdb-record-field'}.
@end format
@end deffn

@geindex bbdb-record-set-name; Emacs Lisp function
@anchor{bbdb el function bbdb-record-set-name}@anchor{a5}
@deffn {Function} bbdb@w{-}record@w{-}set@w{-}name record first last

@format
Record cache function: For RECORD set full name based on FIRST and LAST.
If FIRST or LAST are t use respective existing entries of RECORD.
Set full name in cache and hash.  Return first-last name.
@end format
@end deffn

@geindex bbdb-record-set-sortkey; Emacs Lisp function
@anchor{bbdb el function bbdb-record-set-sortkey}@anchor{a6}
@deffn {Function} bbdb@w{-}record@w{-}set@w{-}sortkey record

@format
Record cache function: Set and return RECORD's sortkey.
@end format
@end deffn

@geindex bbdb-record-set-xfield; Emacs Lisp function
@anchor{bbdb el function bbdb-record-set-xfield}@anchor{a7}
@deffn {Function} bbdb@w{-}record@w{-}set@w{-}xfield record label value

@format
For RECORD set xfield LABEL to VALUE.
If VALUE is nil or an empty string, remove xfield LABEL from RECORD.
Return VALUE.
@end format
@end deffn

@geindex bbdb-record-xfield-intern; Emacs Lisp function
@anchor{bbdb el function bbdb-record-xfield-intern}@anchor{a8}
@deffn {Function} bbdb@w{-}record@w{-}xfield@w{-}intern record label

@format
For RECORD return interned value of xfield LABEL.
Return nil if xfield LABEL does not exist.
@end format
@end deffn

@geindex bbdb-record-xfield-string; Emacs Lisp function
@anchor{bbdb el function bbdb-record-xfield-string}@anchor{a9}
@deffn {Function} bbdb@w{-}record@w{-}xfield@w{-}string record label

@format
For RECORD return value of xfield LABEL as string.
Return nil if xfield LABEL does not exist.
@end format
@end deffn

@geindex bbdb-redisplay-record-globally; Emacs Lisp function
@anchor{bbdb el function bbdb-redisplay-record-globally}@anchor{aa}
@deffn {Function} bbdb@w{-}redisplay@w{-}record@w{-}globally record &optional  sort delete-p

@format
Redisplay RECORD in all BBDB buffers.
If SORT is t, usually because RECORD has a new sortkey, re-sort
the displayed records.
If DELETE-P is non-nil RECORD is removed from the BBDB buffers.
@end format
@end deffn

@geindex bbdb-redisplay-record; Emacs Lisp function
@anchor{bbdb el function bbdb-redisplay-record}@anchor{ab}
@deffn {Function} bbdb@w{-}redisplay@w{-}record record &optional  sort delete-p

@format
Redisplay RECORD in current BBDB buffer.
If SORT is t, usually because RECORD has a new sortkey, re-sort
the displayed records.
If DELETE-P is non-nil RECORD is removed from the BBDB buffer.
@end format
@end deffn

@geindex bbdb-remhash; Emacs Lisp function
@anchor{bbdb el function bbdb-remhash}@anchor{ac}
@deffn {Function} bbdb@w{-}remhash key record

@format
Remove RECORD from list of records associated with KEY.
KEY must be a string or nil.  Empty strings and nil are ignored.
@end format
@end deffn

@geindex bbdb-revert-buffer; Emacs Lisp function
@anchor{bbdb el function bbdb-revert-buffer}@anchor{ad}
@deffn {Function} bbdb@w{-}revert@w{-}buffer  &optional ignore-auto noconfirm

@format
The @code{`revert-buffer-function'} for @ref{51,,`bbdb-buffer'} visiting @ref{4f,,`bbdb-file'}.
IGNORE-AUTO and NOCONFIRM have same meaning as in @code{`revert-buffer'}.
See also variable @ref{ae,,`bbdb-auto-revert'}.
Return t if the reversion was successful (or not needed).
Return nil otherwise.
@end format
@end deffn

@geindex bbdb-save; Emacs Lisp function
@anchor{bbdb el function bbdb-save}@anchor{af}
@deffn {Function} bbdb@w{-}save  &optional prompt noisy

@format
Save the BBDB if it is modified.
If PROMPT is non-nil prompt before saving.
If NOISY is non-nil as in interactive calls issue status messages.
@end format
@end deffn

@geindex bbdb-scan-property; Emacs Lisp function
@anchor{bbdb el function bbdb-scan-property}@anchor{b0}
@deffn {Function} bbdb@w{-}scan@w{-}property property predicate n

@format
Scan for change of PROPERTY matching PREDICATE for N times.
Return position of beginning of matching interval.
@end format
@end deffn

@geindex bbdb-sendmail-menu; Emacs Lisp function
@anchor{bbdb el function bbdb-sendmail-menu}@anchor{b1}
@deffn {Function} bbdb@w{-}sendmail@w{-}menu record

@format
Menu items for email addresses of RECORD.
@end format
@end deffn

@geindex bbdb-sort-records; Emacs Lisp function
@anchor{bbdb el function bbdb-sort-records}@anchor{b2}
@deffn {Function} bbdb@w{-}sort@w{-}records 

@format
Sort BBDB database.
This is not needed when using BBDB itself.  It might be necessary,
however, after having used other programs to add records to the BBDB.
@end format
@end deffn

@geindex bbdb-split; Emacs Lisp function
@anchor{bbdb el function bbdb-split}@anchor{5e}
@deffn {Function} bbdb@w{-}split separator string

@format
Split STRING into list of substrings bounded by matches for SEPARATORS.
SEPARATOR may be a regexp.  SEPARATOR may also be a symbol
\(a field name).  Then look up the value in @ref{5c,,`bbdb-separator-alist'}
or use @ref{5d,,`bbdb-default-separator'}.
Whitespace around SEPARATOR is ignored unless SEPARATOR matches
the string " \t\n".
Almost the inverse function of @ref{5b,,`bbdb-concat'}.
@end format
@end deffn

@geindex bbdb-string-trim; Emacs Lisp function
@anchor{bbdb el function bbdb-string-trim}@anchor{b3}
@deffn {Function} bbdb@w{-}string@w{-}trim string &optional  null

@format
Remove leading and trailing whitespace and all properties from STRING.
If STRING is nil return an empty string unless NULL is non-nil.
@end format
@end deffn

@geindex bbdb-timestamp; Emacs Lisp function
@anchor{bbdb el function bbdb-timestamp}@anchor{b4}
@deffn {Function} bbdb@w{-}timestamp record

@format
For use as an element of @ref{b5,,`bbdb-change-hook'}.
Maintains an xfield @code{`timestamp'} for RECORD which contains
the time when it was last modified.  If such a field already exists,
it is changed, otherwise it is added.
@end format
@end deffn

@geindex bbdb-undisplay-records; Emacs Lisp function
@anchor{bbdb el function bbdb-undisplay-records}@anchor{b6}
@deffn {Function} bbdb@w{-}undisplay@w{-}records  &optional all-buffers

@format
Undisplay records in *BBDB* buffer, leaving this buffer empty.
If ALL-BUFFERS is non-nil undisplay records in all BBDB buffers.
@end format
@end deffn

@geindex bbdb-version; Emacs Lisp function
@anchor{bbdb el function bbdb-version}@anchor{b7}
@deffn {Function} bbdb@w{-}version  &optional arg

@format
Return string describing the version of BBDB.
With prefix ARG, insert string at point.
@end format
@end deffn

@geindex bbdb-warn; Emacs Lisp function
@anchor{bbdb el function bbdb-warn}@anchor{b8}
@deffn {Function} bbdb@w{-}warn  &rest args

@format
Display a message at the bottom of the screen.
ARGS are passed to @code{`message'}.
@end format
@end deffn

@node Variables,Hooks<2>,Functions,Lisp library bbdb
@anchor{bbdb variables}@anchor{b9}
@section Variables



@deffn {Variable} bbdb@w{-}append@w{-}display

@format
Controls the behavior of the command @ref{ba,,`bbdb-append-display'}.
@end format
@end deffn

@geindex bbdb-accept-message-alist; Emacs Lisp variable
@anchor{bbdb el variable bbdb-accept-message-alist}@anchor{bb}
@deffn {Variable} bbdb@w{-}accept@w{-}message@w{-}alist

@format
Alist describing which messages to automatically create BBDB records for.
The format of this alist is
   ((HEADER-NAME . REGEXP) ...)
For example, if
   (("From" . "@@.*\.maximegalon\.edu")
    ("Subject" . "time travel"))
BBDB records are only created for messages sent by people at Maximegalon U.,
or people posting about time travel.
If t accept all messages.  If nil do not accept any messages.

See also @ref{bc,,`bbdb-ignore-message-alist'}, which has the opposite effect.
@end format
@end deffn

@geindex bbdb-add-aka; Emacs Lisp variable
@anchor{bbdb el variable bbdb-add-aka}@anchor{bd}
@deffn {Variable} bbdb@w{-}add@w{-}aka

@format
How to handle alternate names for existing BBDB records.
Allowed values are:
 t           Automatically store alternate names as AKA.
 query       Query whether to store alternate names as an AKA.
 nil         Ignore alternate names.
 a function  This is called with two args, the record and the new name.
               It should return one of the above values.
 a regexp    If the alternate name matches this regexp ignore it.
               Otherwise query to add it.
See also @ref{be,,`bbdb-add-name'}.
@end format
@end deffn

@geindex bbdb-add-mails; Emacs Lisp variable
@anchor{bbdb el variable bbdb-add-mails}@anchor{bf}
@deffn {Variable} bbdb@w{-}add@w{-}mails

@format
How to handle new mail addresses for existing BBDB records.
This handles messages where the mail address differs from the mail addresses
in a BBDB record with the same name as in "John Q. Smith <jqs@@foo.com>"
versus "John Q. Smith <jqs@@bar.com>".
Allowed values are:
 t           Automatically add new mail addresses to the list of mail addresses.
 query       Query whether to add it.
 nil         Ignore new mail addresses.
 a number    Number of seconds BBDB displays the new address
               (without further action).
 a function  This is called with two args, the record and the new mail address.
               It should return one of the above values.
 a regexp    If the new mail address matches this regexp ignore the new address.
               Otherwise query to add it.
See also @ref{c0,,`bbdb-new-mails-primary'} and @ref{c1,,`bbdb-ignore-redundant-mails'}.
@end format
@end deffn

@geindex bbdb-add-name; Emacs Lisp variable
@anchor{bbdb el variable bbdb-add-name}@anchor{be}
@deffn {Variable} bbdb@w{-}add@w{-}name

@format
How to handle new names for existing BBDB records.
This handles messages where the real name differs from the name
in a BBDB record with the same mail address, as in "John Smith <jqs@@frob.com>"
versus "John Q. Smith <jqs@@frob.com>".
Allowed values are:
 t           Automatically change the name to the new value.
 query       Query whether to use the new name.
 nil         Ignore the new name.
 a number    Number of seconds BBDB displays the name mismatch.
               (without further action).
 a function  This is called with two args, the record and the new name.
               It should return one of the above values.
 a regexp    If the new name matches this regexp ignore it.
               Otherwise query to add it.
See also @ref{bd,,`bbdb-add-aka'}.
@end format
@end deffn

@geindex bbdb-address-format-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-address-format-list}@anchor{4c}
@deffn {Variable} bbdb@w{-}address@w{-}format@w{-}list

@format
List of address editing and formatting rules for BBDB.
Each rule is a list (IDENTIFIER EDIT FORMAT FORMAT).
The first rule for which IDENTIFIER matches an address is used for editing
and formatting the address.

IDENTIFIER may be a list of countries.
IDENTIFIER may also be a function that is called with one arg, the address
to be used.  The rule applies if the function returns non-nil.
See @ref{4a,,`bbdb-address-continental-p'} for an example.
If IDENTIFIER is t, this rule always applies.  Usually, this should be
the last rule that becomes a fall-back (default).

EDIT may be a function that is called with one argument, the address.
See @ref{c2,,`bbdb-edit-address-default'} for an example.

EDIT may also be an editting format string.  It is a string containing
the five letters s, c, p, S, and C that specify the order for editing
the five elements of an address:

s  streets
c  city
p  postcode
S  state
C  country

The first FORMAT of each rule is used for multi-line layout, the second FORMAT
is used for one-line layout.

FORMAT may be a function that is called with one argument, the address.
See @ref{76,,`bbdb-format-address-default'} for an example.

FORMAT may also be a format string.  It consists of formatting elements
separated by a delimiter defined via the first (and last) character of FORMAT.
Each formatting element may contain one of the following format specifiers:

%s  streets (used repeatedly for each street part)
%c  city
%p  postcode
%S  state
%C  country

A formatting element will be applied only if the corresponding part
of the address is a non-empty string.

See also @ref{4d,,`bbdb-print-address-format-list'}.
@end format
@end deffn

@geindex bbdb-address-label-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-address-label-list}@anchor{c3}
@deffn {Variable} bbdb@w{-}address@w{-}label@w{-}list

@format
List of labels for Address field.
@end format
@end deffn

@geindex bbdb-allow-duplicates; Emacs Lisp variable
@anchor{bbdb el variable bbdb-allow-duplicates}@anchor{57}
@deffn {Variable} bbdb@w{-}allow@w{-}duplicates

@format
When non-nil BBDB allows records with duplicate names and email addresses.
In rare cases, this may lead to confusion with BBDB's MUA interface.
@end format
@end deffn

@geindex bbdb-annotate-field; Emacs Lisp variable
@anchor{bbdb el variable bbdb-annotate-field}@anchor{c4}
@deffn {Variable} bbdb@w{-}annotate@w{-}field

@format
Field to annotate via @ref{c5,,`bbdb-annotate-record'} and friends.
This may take the values:
 affix           The list of affixes
 organization    The list of organizations
 aka             the list of AKAs
 mail            the list of email addresses
 all-fields      Read the field to edit using a completion table
                   that includes all fields currently known to BBDB.

Any other symbol is interpreted as the label of an xfield.
@end format
@end deffn

@geindex bbdb-auto-notes-ignore-headers; Emacs Lisp variable
@anchor{bbdb el variable bbdb-auto-notes-ignore-headers}@anchor{c6}
@deffn {Variable} bbdb@w{-}auto@w{-}notes@w{-}ignore@w{-}headers

@format
Alist of headers and regexps to ignore in @ref{c7,,`bbdb-auto-notes'}.
Each element is of the form

    (HEADER . REGEXP)

For example,

    ("Organization" . "^Gatewayed from\\\|^Source only")

will exclude the phony @code{`Organization:'} headers in GNU mailing-lists
gatewayed to gnu.* newsgroups.
See also @ref{c8,,`bbdb-auto-notes-ignore-messages'}.
@end format
@end deffn

@geindex bbdb-auto-notes-ignore-messages; Emacs Lisp variable
@anchor{bbdb el variable bbdb-auto-notes-ignore-messages}@anchor{c8}
@deffn {Variable} bbdb@w{-}auto@w{-}notes@w{-}ignore@w{-}messages

@format
List of rules for ignoring entire messages in @ref{c7,,`bbdb-auto-notes'}.
The elements may have the following values:
  a function  This function is called with one arg, the record
              that would be annotated.
              Ignore this message if the function returns non-nil.
              This function may use @ref{c9,,`bbdb-update-records-address'}.
  MUA         Ignore messages from MUA (see @ref{ca,,`bbdb-mua'}).
  (HEADER . REGEXP)  Ignore messages where HEADER matches REGEXP.
              For example,  ("From" . bbdb-user-mail-address-re)
              disables any recording of notes for mail addresses
              found in messages coming from yourself, see
              @ref{cb,,`bbdb-user-mail-address-re'}.
  (MUA HEADER REGEXP)  Ignore messages from MUA where HEADER
              matches REGEXP.
See also @ref{c6,,`bbdb-auto-notes-ignore-headers'}.
@end format
@end deffn

@geindex bbdb-auto-notes-rules; Emacs Lisp variable
@anchor{bbdb el variable bbdb-auto-notes-rules}@anchor{cc}
@deffn {Variable} bbdb@w{-}auto@w{-}notes@w{-}rules

@format
List of rules for adding notes to records of mail addresses of messages.
This automatically annotates the BBDB record of the sender or recipient
of a message based on the value of a header such as the Subject header.
This requires that @ref{cd,,`bbdb-notice-mail-hook'} contains @ref{c7,,`bbdb-auto-notes'}
and that the record already exists or @ref{ce,,`bbdb-update-records-p'} returns such that
the record will be created.  Messages matching @ref{c8,,`bbdb-auto-notes-ignore-messages'}
are ignored.

The elements of this list are

   (MUA FROM-TO HEADER ANNOTATE ...)
   (FROM-TO HEADER ANNOTATE ...)
   (HEADER ANNOTATE ...)

MUA is the active MUA or a list of MUAs (see @ref{ca,,`bbdb-mua'}).
If MUA is missing or t, use this rule for all MUAs.

FROM-TO is a list of headers and/or header classes as in @ref{cf,,`bbdb-message-headers'}.
The record corresponding to a mail address of a message is considered for
annotation if this mail address was found in a header matching FROM-TO.
If FROM-TO is missing or t, records for each mail address are considered
irrespective of where the mail address was found in a message.

HEADER is a message header that is considered for generating the annotation.

ANNOTATE may take the following values:

  (REGEXP . STRING)       [this is equivalent to (REGEXP notes STRING)]
  (REGEXP FIELD STRING)
  (REGEXP FIELD STRING REPLACE)

REGEXP must match the value of HEADER for generating an annotation.
However, if the value of HEADER also matches an element of
@ref{c6,,`bbdb-auto-notes-ignore-headers'} no annotation is generated.

The annotation will be added to FIELD of the respective record.
FIELD defaults to @ref{d0,,`bbdb-default-xfield'}.

STRING defines a replacement for the match of REGEXP in the value of HEADER.
It may contain \& or \N specials used by @code{`replace-match'}.
The resulting string becomes the annotation.
If STRING is an integer N, the Nth matching subexpression is used.
If STRING is a function, it will be called with one arg, the value of HEADER.
The return value (which must be a string) is then used.

If REPLACE is t, the resulting string replaces the old contents of FIELD.
If it is nil, the string is appended to the contents of FIELD (unless the
annotation is already part of the content of field).

For example,

   (("To" ("-vm@@" . "VM mailing list"))
    ("Subject" ("sprocket" . "mail about sprockets")
               ("you bonehead" . "called me a bonehead")))

will cause the text "VM mailing list" to be added to the notes field
of the records corresponding to anyone you get mail from via one of the VM
mailing lists.

If multiple clauses match the message, all of the corresponding strings
will be added.

See also variables @ref{c8,,`bbdb-auto-notes-ignore-messages'} and
@ref{c6,,`bbdb-auto-notes-ignore-headers'}.

For speed-up, the function @ref{c7,,`bbdb-auto-notes'} actually use expanded rules
stored in the internal variable @ref{d1,,`bbdb-auto-notes-rules-expanded'}.
If you change the value of @ref{cc,,`bbdb-auto-notes-rules'} outside of customize,
set @ref{d1,,`bbdb-auto-notes-rules-expanded'} to nil, so that the expanded rules
will be re-evaluated.
@end format
@end deffn

@geindex bbdb-auto-notes-rules-expanded; Emacs Lisp variable
@anchor{bbdb el variable bbdb-auto-notes-rules-expanded}@anchor{d1}
@deffn {Variable} bbdb@w{-}auto@w{-}notes@w{-}rules@w{-}expanded

@format
Expanded @ref{cc,,`bbdb-auto-notes-rules'}.
@end format
@end deffn

@geindex bbdb-auto-revert; Emacs Lisp variable
@anchor{bbdb el variable bbdb-auto-revert}@anchor{ae}
@deffn {Variable} bbdb@w{-}auto@w{-}revert

@format
If t revert unchanged database without querying.
If t and @ref{4f,,`bbdb-file'} has changed on disk, while the database
has not been modified inside Emacs, revert the database automatically.
If nil or the database has been changed inside Emacs, always query
before reverting.
@end format
@end deffn

@geindex bbdb-buffer-name; Emacs Lisp variable
@anchor{bbdb el variable bbdb-buffer-name}@anchor{d2}
@deffn {Variable} bbdb@w{-}buffer@w{-}name

@format
Name of the BBDB buffer.
@end format
@end deffn

@geindex bbdb-canonical-hosts; Emacs Lisp variable
@anchor{bbdb el variable bbdb-canonical-hosts}@anchor{d3}
@deffn {Variable} bbdb@w{-}canonical@w{-}hosts

@format
Regexp matching the canonical part of the domain part of a mail address.
If the domain part of a mail address matches this regexp, the domain
is replaced by the substring that actually matched this address.

Used by  @ref{53,,`bbdb-canonicalize-mail-1'}.  See also @ref{c1,,`bbdb-ignore-redundant-mails'}.
@end format
@end deffn

@geindex bbdb-canonicalize-mail-function; Emacs Lisp variable
@anchor{bbdb el variable bbdb-canonicalize-mail-function}@anchor{54}
@deffn {Variable} bbdb@w{-}canonicalize@w{-}mail@w{-}function

@format
If non-nil, it should be a function of one arg: a mail address string.
When BBDB "notices" a message, the corresponding mail addresses are passed
to this function first.  It acts as a kind of "filter" to transform
the mail addresses before they are compared against or added to the database.
See @ref{53,,`bbdb-canonicalize-mail-1'} for a more complete example.
If this function returns nil, BBDB assumes that there is no mail address.

See also @ref{c1,,`bbdb-ignore-redundant-mails'}.
@end format
@end deffn

@geindex bbdb-case-fold-search; Emacs Lisp variable
@anchor{bbdb el variable bbdb-case-fold-search}@anchor{d4}
@deffn {Variable} bbdb@w{-}case@w{-}fold@w{-}search

@format
Value of @code{`case-fold-search'} used by BBDB and friends.
This variable lets the case-sensitivity of the BBDB commands
be different from standard commands like command @code{`isearch-forward'}.
@end format
@end deffn

@geindex bbdb-changed-records; Emacs Lisp variable
@anchor{bbdb el variable bbdb-changed-records}@anchor{d5}
@deffn {Variable} bbdb@w{-}changed@w{-}records

@format
List of records that has been changed since BBDB was last saved.
Use @ref{d6,,`bbdb-search-changed'} to display these records.
@end format
@end deffn

@geindex bbdb-check-auto-save-file; Emacs Lisp variable
@anchor{bbdb el variable bbdb-check-auto-save-file}@anchor{d7}
@deffn {Variable} bbdb@w{-}check@w{-}auto@w{-}save@w{-}file

@format
If t BBDB will check its auto-save file.
If this file is newer than @ref{4f,,`bbdb-file'}, BBDB will offer to revert.
@end format
@end deffn

@geindex bbdb-check-postcode; Emacs Lisp variable
@anchor{bbdb el variable bbdb-check-postcode}@anchor{94}
@deffn {Variable} bbdb@w{-}check@w{-}postcode

@format
If non-nil, require legal postcodes when entering an address.
The format of legal postcodes is determined by the variable
@ref{d8,,`bbdb-legal-postcodes'}.
@end format
@end deffn

@geindex bbdb-city-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-city-list}@anchor{d9}
@deffn {Variable} bbdb@w{-}city@w{-}list

@format
List of cities known to BBDB.
@end format
@end deffn


@deffn {Variable} bbdb@w{-}complete@w{-}mail

@format
If t MUA insinuation provides key binding for command @ref{da,,`bbdb-complete-mail'}.
@end format
@end deffn

@geindex bbdb-complete-mail-allow-cycling; Emacs Lisp variable
@anchor{bbdb el variable bbdb-complete-mail-allow-cycling}@anchor{db}
@deffn {Variable} bbdb@w{-}complete@w{-}mail@w{-}allow@w{-}cycling

@format
If non-nil cycle mail addresses when calling @ref{da,,`bbdb-complete-mail'}.
@end format
@end deffn

@geindex bbdb-completion-display-record; Emacs Lisp variable
@anchor{bbdb el variable bbdb-completion-display-record}@anchor{dc}
@deffn {Variable} bbdb@w{-}completion@w{-}display@w{-}record

@format
If non-nil @ref{da,,`bbdb-complete-mail'} displays the BBDB record after completion.
@end format
@end deffn

@geindex bbdb-completion-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-completion-list}@anchor{79}
@deffn {Variable} bbdb@w{-}completion@w{-}list

@format
Controls the behaviour of @ref{da,,`bbdb-complete-mail'}.
If a list of symbols, it specifies which fields to complete.  Symbols include
  fl-name (= first and last name)
  lf-name (= last and first name)
  organization
  aka
  mail (= all email addresses of each record)
  primary (= first email address of each record)
If t, completion is done for all of the above.
If nil, no completion is offered.
@end format
@end deffn

@geindex bbdb-continental-postcode-regexp; Emacs Lisp variable
@anchor{bbdb el variable bbdb-continental-postcode-regexp}@anchor{4b}
@deffn {Variable} bbdb@w{-}continental@w{-}postcode@w{-}regexp

@format
Regexp matching continental postcodes.
Used by address format identifier @ref{4a,,`bbdb-address-continental-p'}.
The regexp should match postcodes of the form CH-8052, NL-2300RA,
and SE-132 54.
@end format
@end deffn

@geindex bbdb-country-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-country-list}@anchor{dd}
@deffn {Variable} bbdb@w{-}country@w{-}list

@format
List of countries known to BBDB.
@end format
@end deffn

@geindex bbdb-debug; Emacs Lisp variable
@anchor{bbdb el variable bbdb-debug}@anchor{de}
@deffn {Variable} bbdb@w{-}debug

@format
Enable debugging if non-nil during compile time.
You really should not disable debugging.  But it will speed things up.
@end format
@end deffn

@geindex bbdb-dedicated-window; Emacs Lisp variable
@anchor{bbdb el variable bbdb-dedicated-window}@anchor{9b}
@deffn {Variable} bbdb@w{-}dedicated@w{-}window

@format
Make *BBDB* window a dedicated window.
Allowed values include nil (not dedicated) 'bbdb (weakly dedicated)
and t (strongly dedicated).
@end format
@end deffn

@geindex bbdb-default-area-code; Emacs Lisp variable
@anchor{bbdb el variable bbdb-default-area-code}@anchor{df}
@deffn {Variable} bbdb@w{-}default@w{-}area@w{-}code

@format
Default area code to use when reading a new phone number.
This variable also affects dialing.
@end format
@end deffn

@geindex bbdb-default-country; Emacs Lisp variable
@anchor{bbdb el variable bbdb-default-country}@anchor{e0}
@deffn {Variable} bbdb@w{-}default@w{-}country

@format
Default country to use if none is specified.
@end format
@end deffn

@geindex bbdb-default-domain; Emacs Lisp variable
@anchor{bbdb el variable bbdb-default-domain}@anchor{e1}
@deffn {Variable} bbdb@w{-}default@w{-}domain

@format
Default domain to append when reading a new mail address.
If a mail address does not contain @code{[@@%!]}, append @@@ref{e1,,`bbdb-default-domain'} to it.

The address is not altered if @ref{e1,,`bbdb-default-domain'} is nil
or if a prefix argument is given to the command @ref{e2,,`bbdb-insert-field'}.
@end format
@end deffn

@geindex bbdb-default-label-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-default-label-list}@anchor{e3}
@deffn {Variable} bbdb@w{-}default@w{-}label@w{-}list

@format
Default list of labels for Address and Phone fields.
@end format
@end deffn

@geindex bbdb-default-separator; Emacs Lisp variable
@anchor{bbdb el variable bbdb-default-separator}@anchor{5d}
@deffn {Variable} bbdb@w{-}default@w{-}separator

@format
The default field separator.  It is a list (SPLIT-RE JOIN).
This is used for fields which do not have an entry in @ref{5c,,`bbdb-separator-alist'}.
@end format
@end deffn

@geindex bbdb-default-xfield; Emacs Lisp variable
@anchor{bbdb el variable bbdb-default-xfield}@anchor{d0}
@deffn {Variable} bbdb@w{-}default@w{-}xfield

@format
Default xfield when editing BBDB records.
@end format
@end deffn


@deffn {Variable} bbdb@w{-}do@w{-}all@w{-}records
@end deffn

@geindex bbdb-dial-function; Emacs Lisp variable
@anchor{bbdb el variable bbdb-dial-function}@anchor{e4}
@deffn {Variable} bbdb@w{-}dial@w{-}function

@format
If non-nil this should be a function used for dialing phone numbers.
This function is used by @ref{e5,,`bbdb-dial-number'}.  It requires one
argument which is a string for the number that is dialed.
If nil then @ref{e5,,`bbdb-dial-number'} uses the tel URI syntax passed to @code{`browse-url'}
to make the call.
@end format
@end deffn

@geindex bbdb-dial-local-prefix; Emacs Lisp variable
@anchor{bbdb el variable bbdb-dial-local-prefix}@anchor{e6}
@deffn {Variable} bbdb@w{-}dial@w{-}local@w{-}prefix

@format
Local prefix digits.
If this is non-nil, it should be a string of digits which your phone
system requires before making local calls (for example, if your phone system
requires you to dial 9 before making outside calls.) In BBDB's
opinion, you're dialing a local number if it starts with a 0 after
processing @ref{e7,,`bbdb-dial-local-prefix-alist'}.
@end format
@end deffn

@geindex bbdb-dial-local-prefix-alist; Emacs Lisp variable
@anchor{bbdb el variable bbdb-dial-local-prefix-alist}@anchor{e7}
@deffn {Variable} bbdb@w{-}dial@w{-}local@w{-}prefix@w{-}alist

@format
Mapping to remove local prefixes from numbers.
If this is non-nil, it should be an alist of
\(PREFIX . REPLACEMENT) elements. The first part of a phone number
matching the regexp returned by evaluating PREFIX will be replaced by
the corresponding REPLACEMENT when dialing.
@end format
@end deffn

@geindex bbdb-dial-long-distance-prefix; Emacs Lisp variable
@anchor{bbdb el variable bbdb-dial-long-distance-prefix}@anchor{e8}
@deffn {Variable} bbdb@w{-}dial@w{-}long@w{-}distance@w{-}prefix

@format
Long distance prefix digits.
If this is non-nil, it should be a string of digits which your phone
system requires before making a long distance call (one not in your local
area code).  For example, in some areas you must dial 1 before an area
code. Note that this is used to replace the + sign in phone numbers
when dialling (international dialing prefix.)
@end format
@end deffn

@geindex bbdb-edit-foo; Emacs Lisp variable
@anchor{bbdb el variable bbdb-edit-foo}@anchor{e9}
@deffn {Variable} bbdb@w{-}edit@w{-}foo

@format
Fields to edit with command @code{`bbdb-edit-foo'}.
This is a cons pair (WITHOUT-PREFIX . WITH-PREFIX).
The car is used if the command is called without a prefix.
The cdr is used if the command is called with a prefix.

WITHOUT-PREFIX and WITH-PREFIX may take the values:
 name            The full name
 affix           The list of affixes
 organization    The list of organizations
 aka             the list of AKAs
 mail            the list of email addresses
 phone           the list of phone numbers
 address         the list of addresses
 current-fields  Read the field to edit using a completion table
                   that includes all fields of the current record.
 all-fields      Read the field to edit using a completion table
                   that includes all fields currently known to BBDB.

Any other symbol is interpreted as the label of an xfield.
@end format
@end deffn

@geindex bbdb-end-marker; Emacs Lisp variable
@anchor{bbdb el variable bbdb-end-marker}@anchor{ea}
@deffn {Variable} bbdb@w{-}end@w{-}marker

@format
Marker holding the buffer position of the end of the last record.
@end format
@end deffn

@geindex bbdb-file; Emacs Lisp variable
@anchor{bbdb el variable bbdb-file}@anchor{4f}
@deffn {Variable} bbdb@w{-}file

@format
The name of the Insidious Big Brother Database file.
@end format
@end deffn

@geindex bbdb-file-remote; Emacs Lisp variable
@anchor{bbdb el variable bbdb-file-remote}@anchor{52}
@deffn {Variable} bbdb@w{-}file@w{-}remote

@format
The remote file to save the BBDB database to.
When this is non-nil, it should be a file name.
When BBDB reads @ref{4f,,`bbdb-file'}, it also checks this file,
and if it is newer than @ref{4f,,`bbdb-file'}, it loads this file.
When BBDB writes @ref{4f,,`bbdb-file'}, it also writes this file.

This feature allows one to keep the database in one place while using
different computers, thus reducing the need for merging different files.
@end format
@end deffn

@geindex bbdb-file-remote-save-always; Emacs Lisp variable
@anchor{bbdb el variable bbdb-file-remote-save-always}@anchor{eb}
@deffn {Variable} bbdb@w{-}file@w{-}remote@w{-}save@w{-}always

@format
If t @ref{52,,`bbdb-file-remote'} is saved automatically when @ref{4f,,`bbdb-file'} is saved.
When nil, ask.
@end format
@end deffn

@geindex bbdb-hashtable; Emacs Lisp variable
@anchor{bbdb el variable bbdb-hashtable}@anchor{78}
@deffn {Variable} bbdb@w{-}hashtable

@format
Hash table for BBDB records.
Hashes the fields first-last-name, last-first-name, organization, aka, and mail.
@end format
@end deffn

@geindex bbdb-horiz-pop-up-window-size; Emacs Lisp variable
@anchor{bbdb el variable bbdb-horiz-pop-up-window-size}@anchor{99}
@deffn {Variable} bbdb@w{-}horiz@w{-}pop@w{-}up@w{-}window@w{-}size

@format
Horizontal size of a MUA pop-up BBDB window (horizontal split).
It is a cons pair (TOTAL . BBDB-SIZE).
The window that will be considered for horizontal splitting must have
at least TOTAL columns. BBDB-SIZE is the horizontal size of the BBDB window.
If it is an integer number, it is the number of columns used by BBDB.
If it is a fraction between 0 and 1, it is the fraction of the
window width that BBDB will take over.
@end format
@end deffn

@geindex bbdb-ignore-message-alist; Emacs Lisp variable
@anchor{bbdb el variable bbdb-ignore-message-alist}@anchor{bc}
@deffn {Variable} bbdb@w{-}ignore@w{-}message@w{-}alist

@format
Alist describing which messages not to automatically create BBDB records for.
The format of this alist is
   ((HEADER-NAME . REGEXP) ... )
For example, if
   (("From" . "mailer-daemon")
    (("To" "CC") . "mailing-list-1\\|mailing-list-2"))
no BBDB records are created for messages from any mailer daemon,
or messages sent to or CCed to either of two mailing lists.
If t ignore all messages.  If nil do not ignore any messages.

See also @ref{bb,,`bbdb-accept-message-alist'}, which has the opposite effect.
@end format
@end deffn

@geindex bbdb-ignore-redundant-mails; Emacs Lisp variable
@anchor{bbdb el variable bbdb-ignore-redundant-mails}@anchor{c1}
@deffn {Variable} bbdb@w{-}ignore@w{-}redundant@w{-}mails

@format
How to handle redundant mail addresses for existing BBDB records.
For example, "foo@@bar.baz.com" is redundant w.r.t. "foo@@baz.com".
This affects two things, whether a new redundant mail address is added
to BBDB and whether an old mail address, which has become redundant
because of a newly added mail address, is removed from BBDB.

Allowed values are:
 t           Automatically ignore redundant mail addresses.
 query       Query whether to ignore them.
 nil         Do not ignore redundant mail addresses.
 a number    Number of seconds BBDB displays redundant mail addresses
               (without further action).
 a function  This is called with two args, the record and the new mail address.
               It should return one of the above values.
 a regexp    If the new mail address matches this regexp never ignore
               this mail address.  Otherwise query to ignore it.
See also @ref{bf,,`bbdb-add-mails'} and @ref{54,,`bbdb-canonicalize-mail-function'}.
@end format
@end deffn

@geindex bbdb-image; Emacs Lisp variable
@anchor{bbdb el variable bbdb-image}@anchor{ec}
@deffn {Variable} bbdb@w{-}image

@format
If non-nil display records with an image.
If a symbol this should be an xfield holding the name of the image file
associated with the record.  If it is @code{`name'} or @code{`fl-name'}, the first and last
name of the record are used as file name.  If it is @code{`lf-name'}, the last and
first name of the record are used as file name.
If a function it is called with one arg, the record, and it should return
the name of the image file.
The file is searched in the directories in @ref{ed,,`bbdb-image-path'}.
File name suffixes are appended according to @ref{ee,,`bbdb-image-suffixes'}.
See @code{`locate-file'}.
@end format
@end deffn

@geindex bbdb-image-path; Emacs Lisp variable
@anchor{bbdb el variable bbdb-image-path}@anchor{ed}
@deffn {Variable} bbdb@w{-}image@w{-}path

@format
List of directories to search for @ref{ec,,`bbdb-image'}.
@end format
@end deffn

@geindex bbdb-image-suffixes; Emacs Lisp variable
@anchor{bbdb el variable bbdb-image-suffixes}@anchor{ee}
@deffn {Variable} bbdb@w{-}image@w{-}suffixes

@format
List of file name suffixes searched for @ref{ec,,`bbdb-image'}.
@end format
@end deffn

@geindex bbdb-info-file; Emacs Lisp variable
@anchor{bbdb el variable bbdb-info-file}@anchor{ef}
@deffn {Variable} bbdb@w{-}info@w{-}file

@format
Location of the bbdb info file, if it's not in the standard place.
@end format
@end deffn

@geindex bbdb-init-forms; Emacs Lisp variable
@anchor{bbdb el variable bbdb-init-forms}@anchor{f0}
@deffn {Variable} bbdb@w{-}init@w{-}forms

@format
Alist mapping features to insinuation forms.
@end format
@end deffn

@geindex bbdb-lastname-prefixes; Emacs Lisp variable
@anchor{bbdb el variable bbdb-lastname-prefixes}@anchor{f1}
@deffn {Variable} bbdb@w{-}lastname@w{-}prefixes

@format
List of lastname prefixes recognized in name fields.
Used to enhance dividing name strings into firstname and lastname parts.
Case is ignored.
@end format
@end deffn

@geindex bbdb-lastname-re; Emacs Lisp variable
@anchor{bbdb el variable bbdb-lastname-re}@anchor{f2}
@deffn {Variable} bbdb@w{-}lastname@w{-}re

@format
Regexp matching the last name of a full name.
Its first parenthetical subexpression becomes the last name.
@end format
@end deffn

@geindex bbdb-lastname-suffixes; Emacs Lisp variable
@anchor{bbdb el variable bbdb-lastname-suffixes}@anchor{f3}
@deffn {Variable} bbdb@w{-}lastname@w{-}suffixes

@format
List of lastname suffixes recognized in name fields.
Used to dividing name strings into firstname and lastname parts.
All suffixes are complemented by optional @code{`.'}.  Case is ignored.
@end format
@end deffn

@geindex bbdb-lastname-suffix-re; Emacs Lisp variable
@anchor{bbdb el variable bbdb-lastname-suffix-re}@anchor{f4}
@deffn {Variable} bbdb@w{-}lastname@w{-}suffix@w{-}re

@format
Regexp matching the suffix of a last name.
Its first parenthetical subexpression becomes the suffix.
@end format
@end deffn

@geindex bbdb-layout-alist; Emacs Lisp variable
@anchor{bbdb el variable bbdb-layout-alist}@anchor{6a}
@deffn {Variable} bbdb@w{-}layout@w{-}alist

@format
Alist describing each display layout.
The format of an element is (LAYOUT-NAME OPTION-ALIST).

By default there are four different layout types used by BBDB, which are
@code{`one-line'}, @code{`multi-line'}, @code{`pop-up-multi-line'} (used for pop-ups) and
@code{`full-multi-line'} (showing all fields of a record).

OPTION-ALIST specifies the options for the layout.  Valid options are:

                           ------- Availability --------
    Format                  one-line        multi-line        default if unset
------------------------------------------------------------------------------
 (toggle . BOOL)                 +               +              nil
 (order . FIELD-LIST)            +               +              '(phone ...)
 (omit . FIELD-LIST)             +               +              nil
 (name-end . INTEGER)            +               -              40
 (indentation . INTEGER)         -               +              21
 (primary . BOOL)                -               +              nil
 (display-p . FUNCTION)          +               +              nil

- toggle: controls if this layout is included when toggeling the layout
- order: defines a user specific order for the fields, where t is a place
  holder for all remaining fields
- omit: is a list of xfields which should not be displayed
  or t to exclude all xfields except those listed in the order option
- name-end: sets the column where the name should end in one-line layout.
- indentation: sets the level of indentation for multi-line display.
- primary: controls whether only the primary mail is shown or all are shown.
- display-p: a function controlling whether the record is to be displayed.

When you add a new layout FOO, you can write a corresponding layout
function @code{`bbdb-display-record-layout-FOO'}.  If you do not write your own
layout function, the multi-line layout will be used.
@end format
@end deffn

@geindex bbdb-layout; Emacs Lisp variable
@anchor{bbdb el variable bbdb-layout}@anchor{6d}
@deffn {Variable} bbdb@w{-}layout

@format
Default display layout.
@end format
@end deffn

@geindex bbdb-legal-postcodes; Emacs Lisp variable
@anchor{bbdb el variable bbdb-legal-postcodes}@anchor{d8}
@deffn {Variable} bbdb@w{-}legal@w{-}postcodes

@format
List of regexps that match legal postcodes.
Whether this is used at all depends on the variable @ref{94,,`bbdb-check-postcode'}.
@end format
@end deffn

@geindex bbdb-mail-alias; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mail-alias}@anchor{f5}
@deffn {Variable} bbdb@w{-}mail@w{-}alias

@format
Defines which mail aliases are generated for a BBDB record.
first: Generate one alias "<alias>" that expands to the first mail address
       of a record.
star:  Generate a second alias "<alias>*" that expands to all mail addresses
       of a record.
all:   Generate the aliases "<alias>" and "<alias>*" (as for 'star)
       and aliases "<alias>n" for each mail address, where n is the position
       of the mail address of a record.
@end format
@end deffn

@geindex bbdb-mail-alias-field; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mail-alias-field}@anchor{f6}
@deffn {Variable} bbdb@w{-}mail@w{-}alias@w{-}field

@format
Xfield holding the mail alias for a record.
Used by @ref{f7,,`bbdb-mail-aliases'}.  See also @ref{f5,,`bbdb-mail-alias'}.
@end format
@end deffn

@geindex bbdb-mail-aliases-need-rebuilt; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mail-aliases-need-rebuilt}@anchor{f8}
@deffn {Variable} bbdb@w{-}mail@w{-}aliases@w{-}need@w{-}rebuilt

@format
Non-nil if mail aliases need to be rebuilt.
@end format
@end deffn

@geindex bbdb-mail-avoid-redundancy; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mail-avoid-redundancy}@anchor{f9}
@deffn {Variable} bbdb@w{-}mail@w{-}avoid@w{-}redundancy

@format
Mail address to use for BBDB records when sending mail.
If non-nil do not use full name in mail address when same as mail.
If value is mail-only never use full name.
@end format
@end deffn

@geindex bbdb-mail-name-format; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mail-name-format}@anchor{fa}
@deffn {Variable} bbdb@w{-}mail@w{-}name@w{-}format

@format
Format for names when sending mail.
If first-last format names as "Firstname Lastname".
If last-first format names as "Lastname, Firstname".
If @ref{fb,,`bbdb-mail-name'} returns the full name as a single string, this takes
precedence over @ref{fa,,`bbdb-mail-name-format'}.  Likewise, if the mail address itself
includes a name, this is not reformatted.
@end format
@end deffn

@geindex bbdb-mail-name; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mail-name}@anchor{fb}
@deffn {Variable} bbdb@w{-}mail@w{-}name

@format
Xfield holding the full name for a record when sending mail.
This may also be a function taking one argument, a record.
If it returns the full mail name as a single string, this is used "as is".
If it returns a cons pair (FIRST . LAST) with the first and last name
for this record, these are formatted obeying @ref{fa,,`bbdb-mail-name-format'}.
@end format
@end deffn

@geindex bbdb-mail-user-agent; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mail-user-agent}@anchor{fc}
@deffn {Variable} bbdb@w{-}mail@w{-}user@w{-}agent

@format
Mail user agent used by BBDB.
Allowed values are those allowed for @code{`mail-user-agent'}.
@end format
@end deffn

@geindex bbdb-merge-xfield-function-alist; Emacs Lisp variable
@anchor{bbdb el variable bbdb-merge-xfield-function-alist}@anchor{8b}
@deffn {Variable} bbdb@w{-}merge@w{-}xfield@w{-}function@w{-}alist

@format
An alist defining specific merging function for xfields.
Each element is of the form (LABEL . MERGE-FUN).
For merging xfield LABEL, this will use MERGE-FUN.
@end format
@end deffn

@geindex bbdb-message-all-addresses; Emacs Lisp variable
@anchor{bbdb el variable bbdb-message-all-addresses}@anchor{fd}
@deffn {Variable} bbdb@w{-}message@w{-}all@w{-}addresses

@format
If t @ref{fe,,`bbdb-update-records'} returns all mail addresses of a message.
Otherwise this function returns only the first mail address of each message.
@end format
@end deffn

@geindex bbdb-message-clean-name-function; Emacs Lisp variable

@deffn {Variable} bbdb@w{-}message@w{-}clean@w{-}name@w{-}function

@format
Function to clean up the name in the header of a message.
It takes one argument, the name as extracted by
@code{`mail-extract-address-components'}.
@end format
@end deffn

@geindex bbdb-message-headers; Emacs Lisp variable
@anchor{bbdb el variable bbdb-message-headers}@anchor{cf}
@deffn {Variable} bbdb@w{-}message@w{-}headers

@format
Alist of headers to search for sender and recipients mail addresses.
Each element is of the form

  (CLASS HEADER ...)

The symbol CLASS defines a class of headers.
The strings HEADER belong to CLASS.
@end format
@end deffn

@geindex bbdb-message-mail-as-name; Emacs Lisp variable
@anchor{bbdb el variable bbdb-message-mail-as-name}@anchor{ff}
@deffn {Variable} bbdb@w{-}message@w{-}mail@w{-}as@w{-}name

@format
If non-nil use mail address of message as fallback for name of new records.
@end format
@end deffn

@geindex bbdb-message-try-all-headers; Emacs Lisp variable
@anchor{bbdb el variable bbdb-message-try-all-headers}@anchor{100}
@deffn {Variable} bbdb@w{-}message@w{-}try@w{-}all@w{-}headers

@format
If t try all message headers to extract an email address from a message.
Several BBDB commands extract either the sender or the recipients' email
addresses from a message according to @ref{cf,,`bbdb-message-headers'}.  If BBDB does not
find any email address in this subset of message headers (for example, because
an email address is excluded because of @ref{cb,,`bbdb-user-mail-address-re'})
but @ref{100,,`bbdb-message-try-all-headers'} is t, then these commands will also consider
the email addresses in the remaining headers.
@end format
@end deffn

@geindex bbdb-mua-auto-update-p; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-auto-update-p}@anchor{101}
@deffn {Variable} bbdb@w{-}mua@w{-}auto@w{-}update@w{-}p

@format
How @ref{102,,`bbdb-mua-auto-update'} updates BBDB records automatically.

Allowed values are (here ADDRESS is an email address found in a message):
 nil          Do nothing.
 search       Search for existing records matching ADDRESS.
 update       Search for existing records matching ADDRESS;
                update name and mail field if necessary.
 query        Search for existing records matching ADDRESS;
                query for creation of a new record if the record does not exist.
 create or t  Search for existing records matching ADDRESS;
                create a new record if it does not yet exist.
 a function   This functions will be called with no arguments.
                It should return one of the above values.
                For an example, see @ref{103,,`bbdb-select-message'} with
                @code{`bbdb-mua-update-records-p'}, @ref{bb,,`bbdb-accept-message-alist'}
                and @ref{bc,,`bbdb-ignore-message-alist'}.

To initiate auto-updating of BBDB records, call @ref{80,,`bbdb-mua-auto-update-init'}
for the respective MUAs in your init file.
@end format
@end deffn

@geindex bbdb-mua-edit-field; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-edit-field}@anchor{104}
@deffn {Variable} bbdb@w{-}mua@w{-}edit@w{-}field

@format
Field to edit with command @ref{105,,`bbdb-mua-edit-field'} and friends.
This may take the values:
 name            The full name
 affix           The list of affixes
 organization    The list of organizations
 aka             the list of AKAs
 mail            the list of email addresses
 all-fields      Read the field to edit using a completion table
                   that includes all fields currently known to BBDB.

Any other symbol is interpreted as the label of an xfield.
@end format
@end deffn

@geindex bbdb-mua-pop-up; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-pop-up}@anchor{98}
@deffn {Variable} bbdb@w{-}mua@w{-}pop@w{-}up

@format
If non-nil, display an auto-updated BBDB window while using a MUA.
If 'horiz, stack the window horizontally if there is room.
If this is nil, BBDB is updated silently.

See also @ref{106,,`bbdb-mua-pop-up-window-size'} and @ref{99,,`bbdb-horiz-pop-up-window-size'}.
@end format
@end deffn

@geindex bbdb-mua-pop-up-window-size; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-pop-up-window-size}@anchor{106}
@deffn {Variable} bbdb@w{-}mua@w{-}pop@w{-}up@w{-}window@w{-}size

@format
Vertical size of MUA pop-up BBDB window (vertical split).
If it is an integer number, it is the number of lines used by BBDB.
If it is a fraction between 0.0 and 1.0 (inclusive), it is the fraction
of the tallest existing window that BBDB will take over.
If it is t use @code{`pop-to-buffer'} to create the BBDB window.
See also @ref{97,,`bbdb-pop-up-window-size'}.
@end format
@end deffn

@geindex bbdb-mua-summary-mark; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-summary-mark}@anchor{107}
@deffn {Variable} bbdb@w{-}mua@w{-}summary@w{-}mark

@format
Default mark for message addresses known to BBDB.
If nil do not mark message addresses known to BBDB.
See @ref{107,,`bbdb-mua-summary-mark'} and @ref{108,,`bbdb-mua-summary-unify'}.
See also @ref{109,,`bbdb-mua-summary-mark-field'}.
@end format
@end deffn

@geindex bbdb-mua-summary-mark-field; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-summary-mark-field}@anchor{109}
@deffn {Variable} bbdb@w{-}mua@w{-}summary@w{-}mark@w{-}field

@format
BBDB xfield whose value is used to mark message addresses known to BBDB.
This may also be a function, called with one arg, the record, which should
return the mark.  See @ref{107,,`bbdb-mua-summary-mark'} and @ref{108,,`bbdb-mua-summary-unify'}.
See also @ref{107,,`bbdb-mua-summary-mark'}.
@end format
@end deffn

@geindex bbdb-mua-summary-mark-format-letter; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-summary-mark-format-letter}@anchor{10a}
@deffn {Variable} bbdb@w{-}mua@w{-}summary@w{-}mark@w{-}format@w{-}letter

@format
Letter required for @ref{107,,`bbdb-mua-summary-mark'} in the MUA Summary format string.
For Gnus, combine it with the %u specifier in @code{`gnus-summary-line-format'}
\(see there), for example, use "%U%R%z%I%(%[%4L: %ub%-23,23f%]%) %s\n".
For VM, combine it with the %U specifier in @code{`vm-summary-format'} (see there),
for example, use "%n %*%a %Ub%-17.17F %-3.3m %2d %4l/%-5c %I\"%s\"\n".
This customization of @code{`gnus-summary-line-format'} / @code{`vm-summary-format'}
is required to use @ref{107,,`bbdb-mua-summary-mark'}.
Currently no other MUAs support this BBDB feature.
@end format
@end deffn

@geindex bbdb-mua-summary-unification-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-summary-unification-list}@anchor{10b}
@deffn {Variable} bbdb@w{-}mua@w{-}summary@w{-}unification@w{-}list

@format
List of FIELDs considered by @ref{108,,`bbdb-mua-summary-unify'}.
For the RECORD matching the address of a message, @ref{108,,`bbdb-mua-summary-unify'}
returns the first non-empty field value matching an element FIELD from this list.
Each element FIELD may be a valid argument of @ref{a1,,`bbdb-record-field'} for RECORD.
In addition, this list may also include the following elements:
  message-name     The name in the address of the message
  message-mail     The mail in the address of the message
  message-address  The complete address of the message
These provide a fallback if a message does not have a matching RECORD
or if some FIELD of RECORD is empty.
@end format
@end deffn

@geindex bbdb-mua-summary-unify-format-letter; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-summary-unify-format-letter}@anchor{10c}
@deffn {Variable} bbdb@w{-}mua@w{-}summary@w{-}unify@w{-}format@w{-}letter

@format
Letter required for @ref{108,,`bbdb-mua-summary-unify'} in the MUA Summary format string.
For Gnus, combine it with the %u specifier in @code{`gnus-summary-line-format'}
\(see there), for example use "%U%R%z%I%(%[%4L: %-23,23uB%]%) %s\n".
For VM, combine it with the %U specifier in @code{`vm-summary-format'} (see there),
for example, use "%n %*%a %-17.17UB %-3.3m %2d %4l/%-5c %I\"%s\"\n".
This customization of @code{`gnus-summary-line-format'} / @code{`vm-summary-format'}
is required to use @ref{108,,`bbdb-mua-summary-unify'}.
Currently no other MUAs support this BBDB feature.
@end format
@end deffn

@geindex bbdb-mua-update-interactive-p; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mua-update-interactive-p}@anchor{10d}
@deffn {Variable} bbdb@w{-}mua@w{-}update@w{-}interactive@w{-}p

@format
How BBDB's interactive MUA commands update BBDB records.
This is a cons pair (WITHOUT-PREFIX . WITH-PREFIX).
The car is used if the command is called without a prefix.
The cdr is used if the command is called with a prefix (and if the prefix
        is not used for another purpose).

WITHOUT-PREFIX and WITH-PREFIX may take the values
\(here ADDRESS is an email address found in a message):
 nil          Do nothing.
 search       Search for existing records matching ADDRESS.
 update       Search for existing records matching ADDRESS;
                update name and mail field if necessary.
 query        Search for existing records matching ADDRESS;
                query for creation of a new record if the record does not exist.
 create or t  Search for existing records matching ADDRESS;
                create a new record if it does not yet exist.
 a function   This functions will be called with no arguments.
                It should return one of the above values.
 read         Read the value interactively.
@end format
@end deffn

@geindex bbdb-multiple-buffers; Emacs Lisp variable
@anchor{bbdb el variable bbdb-multiple-buffers}@anchor{8f}
@deffn {Variable} bbdb@w{-}multiple@w{-}buffers

@format
When non-nil we create a new buffer of every buffer causing pop-ups.
You can also set this to a function returning a buffer name.
Here a value may be the predefined function @ref{8e,,`bbdb-multiple-buffers-default'}.
@end format
@end deffn

@geindex bbdb-modeline-info; Emacs Lisp variable
@anchor{bbdb el variable bbdb-modeline-info}@anchor{10e}
@deffn {Variable} bbdb@w{-}modeline@w{-}info

@format
Precalculated mode line info for BBDB commands.
This is a vector [APPEND-M APPEND INVERT-M INVERT ALL-M ALL].
APPEND-M is the mode line info if @ref{ba,,`bbdb-append-display'} is non-nil.
INVERT-M is the mode line info if @ref{10f,,`bbdb-search-invert'} is non-nil.
ALL-M is the mode line info if @ref{110,,`bbdb-do-all-records'} is non-nil.
APPEND, INVERT, and ALL appear in the message area.
@end format
@end deffn

@geindex bbdb-mode-map; Emacs Lisp variable
@anchor{bbdb el variable bbdb-mode-map}@anchor{111}
@deffn {Variable} bbdb@w{-}mode@w{-}map

@format
Keymap for Insidious Big Brother Database.
This is a child of @code{`special-mode-map'}.
@end format
@end deffn

@geindex bbdb-name-face-alist; Emacs Lisp variable
@anchor{bbdb el variable bbdb-name-face-alist}@anchor{68}
@deffn {Variable} bbdb@w{-}name@w{-}face@w{-}alist

@format
Alist used for font-locking the name of a record.
Each element should be a cons cell (KEY . FACE) with string KEY and face FACE.
To use FACE for font-locking the name of a record,
the xfield name-face of this record should have the value KEY.
The value of name-face may also be a face which is then used directly.
If none of these schemes succeeds, the face @code{`bbdb-name'} is used.
@end format
@end deffn

@geindex bbdb-name-format; Emacs Lisp variable
@anchor{bbdb el variable bbdb-name-format}@anchor{112}
@deffn {Variable} bbdb@w{-}name@w{-}format

@format
Format for displaying names.
If first-last names are displayed as "Firstname Lastname".
If last-first names are displayed as "Lastname, Firstname".
This can be overriden per record via the xfield name-format,
which should take the same values.
See also @ref{113,,`bbdb-read-name-format'}.
@end format
@end deffn

@geindex bbdb-new-mails-primary; Emacs Lisp variable
@anchor{bbdb el variable bbdb-new-mails-primary}@anchor{c0}
@deffn {Variable} bbdb@w{-}new@w{-}mails@w{-}primary

@format
Where to put new mail addresses for existing BBDB records.
A new mail address may either become the new primary mail address,
when it is put at the beginning of the list of mail addresses.
Or the new mail address is added at the end of the list of mail addresses.
Allowed values are:
 t           Make a new address automatically the primary address.
 query       Query whether to make it the primary address.
 nil         Add the new address to the end of the list.
 a function  This is called with two args, the record and the new mail address.
               It should return one of the above values.
 a regexp    If the new mail address matches this regexp put it at the end.
               Otherwise query to make it the primary address.
See also @ref{bf,,`bbdb-add-mails'}.
@end format
@end deffn

@geindex bbdb-offer-to-create; Emacs Lisp variable
@anchor{bbdb el variable bbdb-offer-to-create}@anchor{114}
@deffn {Variable} bbdb@w{-}offer@w{-}to@w{-}create

@format
For communication between @ref{fe,,`bbdb-update-records'} and @ref{115,,`bbdb-query-create'}.
@end format
@end deffn

@geindex bbdb-organization-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-organization-list}@anchor{116}
@deffn {Variable} bbdb@w{-}organization@w{-}list

@format
List of organizations known to BBDB.
@end format
@end deffn

@geindex bbdb-phone-label-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-phone-label-list}@anchor{117}
@deffn {Variable} bbdb@w{-}phone@w{-}label@w{-}list

@format
List of labels for Phone field.
@end format
@end deffn

@geindex bbdb-phone-style; Emacs Lisp variable
@anchor{bbdb el variable bbdb-phone-style}@anchor{118}
@deffn {Variable} bbdb@w{-}phone@w{-}style

@format
Phone numbering plan assumed by BBDB.
The value 'nanp refers to the North American Numbering Plan.
The value nil refers to a free-style numbering plan.

You can have both styles of phone number in your database by providing a
prefix argument to the command @ref{e2,,`bbdb-insert-field'}.
@end format
@end deffn

@geindex bbdb-postcode-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-postcode-list}@anchor{119}
@deffn {Variable} bbdb@w{-}postcode@w{-}list

@format
List of post codes known to BBDB.
@end format
@end deffn

@geindex bbdb-pop-up-layout; Emacs Lisp variable
@anchor{bbdb el variable bbdb-pop-up-layout}@anchor{11a}
@deffn {Variable} bbdb@w{-}pop@w{-}up@w{-}layout

@format
Default layout for pop-up BBDB buffers (mail, news, etc.).
@end format
@end deffn

@geindex bbdb-pop-up-window-size; Emacs Lisp variable
@anchor{bbdb el variable bbdb-pop-up-window-size}@anchor{97}
@deffn {Variable} bbdb@w{-}pop@w{-}up@w{-}window@w{-}size

@format
Vertical size of BBDB window (vertical split).
If it is an integer number, it is the number of lines used by BBDB.
If it is a fraction between 0.0 and 1.0 (inclusive), it is the fraction
of the tallest existing window that BBDB will take over.
If it is t use @code{`display-buffer'}/@code{`pop-to-buffer'} to create the BBDB window.
See also @ref{106,,`bbdb-mua-pop-up-window-size'}.
@end format
@end deffn

@geindex bbdb-read-name-format; Emacs Lisp variable
@anchor{bbdb el variable bbdb-read-name-format}@anchor{113}
@deffn {Variable} bbdb@w{-}read@w{-}name@w{-}format

@format
Default format for reading names via @code{`bbdb-read-name'}.
If it is 'first-last read first and last name separately.
If it is 'last-first read last and first name separately.
With any other value read full name at once.
See also @ref{112,,`bbdb-name-format'}.
@end format
@end deffn

@geindex bbdb-read-only; Emacs Lisp variable
@anchor{bbdb el variable bbdb-read-only}@anchor{11b}
@deffn {Variable} bbdb@w{-}read@w{-}only

@format
If t then BBDB will not modify @ref{4f,,`bbdb-file'}.
If you have more than one Emacs running at the same time, you might want
to set this to t in all but one of them.
@end format
@end deffn

@geindex bbdb-records; Emacs Lisp variable
@anchor{bbdb el variable bbdb-records}@anchor{11c}
@deffn {Variable} bbdb@w{-}records

@cartouche
@quotation Variable properties 
Automatically becomes buffer-local when set.  
@end quotation
@end cartouche

@format
BBDB records list.
In buffer @ref{4f,,`bbdb-file'} this list includes all records.
In the *BBDB* buffers it includes the records that are actually displayed
and its elements are (RECORD DISPLAY-FORMAT MARKER-POS).
@end format
@end deffn


@deffn {Variable} bbdb@w{-}search@w{-}invert

@format
Bind this variable to t in order to invert the result of @code{`bbdb-search'}.
@end format
@end deffn

@geindex bbdb-separator-alist; Emacs Lisp variable
@anchor{bbdb el variable bbdb-separator-alist}@anchor{5c}
@deffn {Variable} bbdb@w{-}separator@w{-}alist

@format
Alist of field separators.
Each element is of the form (FIELD SPLIT-RE JOIN).
For fields lacking an entry here @ref{5d,,`bbdb-default-separator'} is used instead.
@end format
@end deffn

@geindex bbdb-silent; Emacs Lisp variable
@anchor{bbdb el variable bbdb-silent}@anchor{11d}
@deffn {Variable} bbdb@w{-}silent

@format
If t, BBDB suppresses all its informational messages and queries.
Be very very certain you want to set this to t, because it will suppress
queries to alter record names, assign names to addresses, etc.
Lisp Hackers: See also @ref{11e,,`bbdb-silent-internal'}.
@end format
@end deffn

@geindex bbdb-silent-internal; Emacs Lisp variable
@anchor{bbdb el variable bbdb-silent-internal}@anchor{11e}
@deffn {Variable} bbdb@w{-}silent@w{-}internal

@format
Bind this to t to quiet things down - do not set it.
See also @ref{11d,,`bbdb-silent'}.
@end format
@end deffn

@geindex bbdb-state-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-state-list}@anchor{11f}
@deffn {Variable} bbdb@w{-}state@w{-}list

@format
List of states known to BBDB.
@end format
@end deffn

@geindex bbdb-street-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-street-list}@anchor{120}
@deffn {Variable} bbdb@w{-}street@w{-}list

@format
List of streets known to BBDB.
@end format
@end deffn

@geindex bbdb-update-records-address; Emacs Lisp variable
@anchor{bbdb el variable bbdb-update-records-address}@anchor{c9}
@deffn {Variable} bbdb@w{-}update@w{-}records@w{-}address

@format
For communication between @ref{fe,,`bbdb-update-records'} and @ref{115,,`bbdb-query-create'}.
It is a list with elements (NAME MAIL HEADER HEADER-CLASS MUA).
@end format
@end deffn

@geindex bbdb-update-records-p; Emacs Lisp variable
@anchor{bbdb el variable bbdb-update-records-p}@anchor{ce}
@deffn {Variable} bbdb@w{-}update@w{-}records@w{-}p

@format
Return value for @ref{103,,`bbdb-select-message'} and friends.
These functions can select messages for further processing by BBDB,
The amount of subsequent processing is determined by @ref{ce,,`bbdb-update-records-p'}.

Allowed values are (here ADDRESS is an email address selected
by @ref{103,,`bbdb-select-message'}):
 nil          Do nothing.
 search       Search for existing records matching ADDRESS.
 update       Search for existing records matching ADDRESS;
                update name and mail field if necessary.
 query        Search for existing records matching ADDRESS;
                query for creation of a new record if the record does not exist.
 create or t  Search for existing records matching ADDRESS;
                create a new record if it does not yet exist.
 a function   This functions will be called with no arguments.
                It should return one of the above values.
@end format
@end deffn

@geindex bbdb-update-unchanged-records; Emacs Lisp variable
@anchor{bbdb el variable bbdb-update-unchanged-records}@anchor{121}
@deffn {Variable} bbdb@w{-}update@w{-}unchanged@w{-}records

@format
If non-nil update unchanged records in the database.
Normally calls of @ref{b5,,`bbdb-change-hook'} and updating of a record are suppressed,
if an editing command did not really change the record.  Bind this to t
if you want to call @ref{b5,,`bbdb-change-hook'} and update the record unconditionally.
@end format
@end deffn

@geindex bbdb-user-mail-address-re; Emacs Lisp variable
@anchor{bbdb el variable bbdb-user-mail-address-re}@anchor{cb}
@deffn {Variable} bbdb@w{-}user@w{-}mail@w{-}address@w{-}re

@format
A regular expression matching your mail addresses.
Several BBDB commands extract either the sender or the recipients' email
addresses from a message according to @ref{cf,,`bbdb-message-headers'}.  Yet an email
address will be ignored if it matches @ref{cb,,`bbdb-user-mail-address-re'}.  This way
the commands will not operate on your own record.
See also @ref{100,,`bbdb-message-try-all-headers'}.
@end format
@end deffn

@geindex bbdb-user-menu-commands; Emacs Lisp variable
@anchor{bbdb el variable bbdb-user-menu-commands}@anchor{122}
@deffn {Variable} bbdb@w{-}user@w{-}menu@w{-}commands

@format
User defined menu entries which should be appended to the BBDB menu.
This should be a list of menu entries.
When set to a function, it is called with two arguments RECORD and FIELD
and it should either return nil or a list of menu entries.
Used by @ref{8d,,`bbdb-mouse-menu'}.
@end format
@end deffn

@geindex bbdb-wrap-column; Emacs Lisp variable
@anchor{bbdb el variable bbdb-wrap-column}@anchor{66}
@deffn {Variable} bbdb@w{-}wrap@w{-}column

@format
Wrap column for multi-line display.  If nil do not wrap lines.
@end format
@end deffn

@geindex bbdb-xfield-label-list; Emacs Lisp variable
@anchor{bbdb el variable bbdb-xfield-label-list}@anchor{123}
@deffn {Variable} bbdb@w{-}xfield@w{-}label@w{-}list

@format
List of labels for xfields.
@end format
@end deffn

@geindex bbdb-xfields-sort-order; Emacs Lisp variable
@anchor{bbdb el variable bbdb-xfields-sort-order}@anchor{124}
@deffn {Variable} bbdb@w{-}xfields@w{-}sort@w{-}order

@format
The order for sorting the xfields.
If an xfield is not in the alist, it is assigned weight 100, so all xfields
with weights less then 100 will be in the beginning, and all xfields with
weights more than 100 will be in the end.
@end format
@end deffn

@node Hooks<2>,,Variables,Lisp library bbdb
@anchor{bbdb hooks}@anchor{125}
@section Hooks


@geindex bbdb-after-change-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-after-change-hook}@anchor{126}
@deffn {Hook} bbdb@w{-}after@w{-}change@w{-}hook

@format
Hook run each time a BBDB record is changed.
Run with one argument, the record.  This is called after the database
is modified.  So if you want to modify a record when it is created or changed,
use instead @ref{60,,`bbdb-create-hook'} and / or @ref{b5,,`bbdb-change-hook'}.
@end format
@end deffn

@geindex bbdb-after-read-db-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-after-read-db-hook}@anchor{127}
@deffn {Hook} bbdb@w{-}after@w{-}read@w{-}db@w{-}hook

@format
Hook run (with no arguments) after @ref{4f,,`bbdb-file'} is read.
Note that this can be called more than once if the BBDB is reverted.
@end format
@end deffn

@geindex bbdb-after-save-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-after-save-hook}@anchor{128}
@deffn {Hook} bbdb@w{-}after@w{-}save@w{-}hook

@format
Hook run after saving @ref{4f,,`bbdb-file'}.
@end format
@end deffn

@geindex bbdb-before-save-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-before-save-hook}@anchor{129}
@deffn {Hook} bbdb@w{-}before@w{-}save@w{-}hook

@format
Hook run before saving @ref{4f,,`bbdb-file'}.
@end format
@end deffn

@geindex bbdb-change-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-change-hook}@anchor{b5}
@deffn {Hook} bbdb@w{-}change@w{-}hook

@format
*Hook run each time a BBDB record is changed.
Run with one argument, the record.  This is called before the database
is modified.  If a new bbdb record is created, @ref{60,,`bbdb-create-hook'} is called
first, followed by a call of this hook.
@end format
@end deffn

@geindex bbdb-complete-mail-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-complete-mail-hook}@anchor{12a}
@deffn {Hook} bbdb@w{-}complete@w{-}mail@w{-}hook

@format
List of functions called after a sucessful completion.
@end format
@end deffn

@geindex bbdb-create-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-create-hook}@anchor{60}
@deffn {Hook} bbdb@w{-}create@w{-}hook

@format
*Hook run each time a new BBDB record is created.
Run with one argument, the new record.  This is called before the record is
added to the database, followed by a call of @ref{b5,,`bbdb-change-hook'}.

If a record has been created by analyzing a mail message, hook functions
can use the variable @ref{c9,,`bbdb-update-records-address'} to determine the header
and class of the mail address according to @ref{cf,,`bbdb-message-headers'}.
@end format
@end deffn

@geindex bbdb-display-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-display-hook}@anchor{12b}
@deffn {Hook} bbdb@w{-}display@w{-}hook

@format
Hook run after the *BBDB* is filled in.
@end format
@end deffn

@geindex bbdb-initialize-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-initialize-hook}@anchor{12c}
@deffn {Hook} bbdb@w{-}initialize@w{-}hook

@format
Normal hook run after the BBDB initialization function @ref{7e,,`bbdb-initialize'}.
@end format
@end deffn

@geindex bbdb-mail-abbrev-expand-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-mail-abbrev-expand-hook}@anchor{12d}
@deffn {Hook} bbdb@w{-}mail@w{-}abbrev@w{-}expand@w{-}hook

@format
Function (not hook) run each time an alias is expanded.
The function is called with two args the alias and the list
of corresponding mail addresses.
@end format
@end deffn

@geindex bbdb-mode-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-mode-hook}@anchor{12e}
@deffn {Hook} bbdb@w{-}mode@w{-}hook

@format
Normal hook run when the *BBDB* buffer is created.
@end format
@end deffn

@geindex bbdb-notice-mail-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-notice-mail-hook}@anchor{cd}
@deffn {Hook} bbdb@w{-}notice@w{-}mail@w{-}hook

@format
Hook run each time a mail address of a record is "noticed" in a message.
This means that the mail address in a message belongs to an existing BBDB record
or to a record BBDB has created for the mail address.

Run with one argument, the record.  It is up to the hook function
to determine which MUA is used and to act appropriately.
Hook functions can use the variable @ref{c9,,`bbdb-update-records-address'}
to determine the header and class of the mail address according
to @ref{cf,,`bbdb-message-headers'}.  See @ref{c7,,`bbdb-auto-notes'} for how to annotate records
using @ref{c9,,`bbdb-update-records-address'} and the headers of a mail message.

If a message contains multiple mail addresses belonging to one BBDB record,
this hook is run for each mail address.  Use @ref{12f,,`bbdb-notice-record-hook'}
if you want to notice each record only once per message.
@end format
@end deffn

@geindex bbdb-notice-record-hook; Emacs Lisp hook
@anchor{bbdb el variable bbdb-notice-record-hook}@anchor{12f}
@deffn {Hook} bbdb@w{-}notice@w{-}record@w{-}hook

@format
Hook run each time a BBDB record is "noticed" in a message.
This means that one of the mail addresses in a message belongs to an existing
record or it is a record BBDB has created for the mail address.  If a message
contains multiple mail addresses belonging to one BBDB record, this hook
is nonetheless run only once.  Use @ref{cd,,`bbdb-notice-mail-hook'} if you want to run
a hook function for each mail address in a message.

Hook is run with one argument, the record.
@end format
@end deffn

@node Lisp library bbdb-anniv,Lisp library bbdb-com,Lisp library bbdb,Top
@anchor{bbdb-anniv doc}@anchor{130}@anchor{bbdb-anniv lisp-library-bbdb-anniv}@anchor{131}
@chapter Lisp library (bbdb-anniv)


@menu
* Functions: Functions<2>. 
* Variables: Variables<2>. 

@end menu

@node Functions<2>,Variables<2>,,Lisp library bbdb-anniv
@anchor{bbdb-anniv functions}@anchor{132}
@section Functions


@geindex bbdb-anniv-diary-entries; Emacs Lisp function
@anchor{bbdb-anniv el function bbdb-anniv-diary-entries}@anchor{133}
@deffn {Function} bbdb@w{-}anniv@w{-}diary@w{-}entries 

@format
Add anniversaries from BBDB records to @code{`diary-list-entries'}.
This obeys @code{`calendar-date-style'} via @code{`diary-date-forms'}.
To enable this feature, put the following into your .emacs:

 \(add-hook 'diary-list-entries-hook 'bbdb-anniv-diary-entries)
@end format
@end deffn

@node Variables<2>,,Functions<2>,Lisp library bbdb-anniv
@anchor{bbdb-anniv variables}@anchor{134}
@section Variables


@geindex bbdb-anniv-alist; Emacs Lisp variable
@anchor{bbdb-anniv el variable bbdb-anniv-alist}@anchor{135}
@deffn {Variable} bbdb@w{-}anniv@w{-}alist

@format
Alist of rules for formatting anniversaries in the diary buffer.
Each element is of the form (LABEL . FORM).
LABEL is the xfield where this type of anniversaries is stored.
FORM is a format string with the following substitutions:
  %n  name of the record
  %d  number of years
  %s  ordinal suffix (st, nd, rd, th) for the year.
  %t  the optional text following the date string in field LABEL.
If FORM is nil, use the text following the date string in field LABEL
as format string.
@end format
@end deffn

@node Lisp library bbdb-com,Lisp library bbdb-gnus,Lisp library bbdb-anniv,Top
@anchor{bbdb-com lisp-library-bbdb-com}@anchor{136}@anchor{bbdb-com doc}@anchor{137}
@chapter Lisp library (bbdb-com)


@menu
* Commands:: 
* Functions: Functions<3>. 

@end menu

@node Commands,Functions<3>,,Lisp library bbdb-com
@anchor{bbdb-com commands}@anchor{138}
@section Commands


@geindex bbdb-do-all-records; Emacs Lisp command

@deffn {Command} *
@anchor{bbdb-com el function bbdb-do-all-records}@anchor{110}
@deffnx {Command} M@w{-}x bbdb@w{-}do@w{-}all@w{-}records

@format
Command prefix for operating on all records currently displayed.
With prefix ARG a positive number, operate on all records.
With prefix ARG a negative number, operate on current record only.
This only works for certain commands.
@end format
@end deffn

@node Functions<3>,,Commands,Lisp library bbdb-com
@anchor{bbdb-com functions}@anchor{139}
@section Functions


@geindex bbdb-add-mail-alias; Emacs Lisp function
@anchor{bbdb-com el function bbdb-add-mail-alias}@anchor{13a}
@deffn {Function} bbdb@w{-}add@w{-}mail@w{-}alias records &optional  alias delete

@format
Add ALIAS to RECORDS.
If prefix DELETE is non-nil, remove ALIAS from RECORDS.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
Arg ALIAS is ignored if list RECORDS contains more than one record.
Instead read ALIAS interactively for each record in RECORDS.
If the function @code{`bbdb-init-mail-alias'} is defined, it is called with
one arg RECORD to define the default value for ALIAS of RECORD.
@end format
@end deffn

@geindex bbdb-append-display; Emacs Lisp function
@anchor{bbdb-com el function bbdb-append-display}@anchor{ba}
@deffn {Function} bbdb@w{-}append@w{-}display  &optional arg

@format
Toggle appending next searched records in the *BBDB* buffer.
With prefix ARG \[universal-argument] always append.
With ARG a positive number append for that many times.
With ARG a negative number do not append.
@end format
@end deffn

@geindex bbdb-append-display-p; Emacs Lisp function
@anchor{bbdb-com el function bbdb-append-display-p}@anchor{13b}
@deffn {Function} bbdb@w{-}append@w{-}display@w{-}p 

@format
Return variable @code{`bbdb-append-display'} and reset.
@end format
@end deffn

@geindex bbdb-browse-url; Emacs Lisp function
@anchor{bbdb-com el function bbdb-browse-url}@anchor{13c}
@deffn {Function} bbdb@w{-}browse@w{-}url records &optional  which

@format
Brwose URLs stored in the @code{`url'} field of RECORDS.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
Prefix WHICH specifies which URL in field @code{`url'} is used (starting from 0).
Default is the first URL.
@end format
@end deffn

@geindex bbdb-complete-mail; Emacs Lisp function
@anchor{bbdb-com el function bbdb-complete-mail}@anchor{da}
@deffn {Function} bbdb@w{-}complete@w{-}mail  &optional beg cycle-completion-buffer

@format
In a mail buffer, complete the user name or mail before point.
Completion happens up to the preceeding colon, comma, or BEG.
Return non-nil if there is a valid completion, else return nil.

Completion behaviour obeys @ref{79,,`bbdb-completion-list'} (see there).
If what has been typed matches a unique BBDB record, insert an address
formatted by @ref{13d,,`bbdb-dwim-mail'} (see there).  Also, display this record
if @ref{dc,,`bbdb-completion-display-record'} is non-nil,
If what has been typed is a valid completion but does not match
a unique record, display a list of completions.
If the completion is done and @ref{db,,`bbdb-complete-mail-allow-cycling'} is t
then cycle through the mails for the matching record.  If BBDB
would format a given address different from what we have in the mail buffer,
the first round of cycling reformats the address accordingly, then we cycle
through the mails for the matching record.
With prefix CYCLE-COMPLETION-BUFFER non-nil, display a list of all mails
available for cycling.

Set the variable @code{`bbdb-complete-mail'} non-nil for enabling this feature
as part of the MUA insinuation.
@end format
@end deffn

@geindex bbdb-complete-mail-cleanup; Emacs Lisp function
@anchor{bbdb-com el function bbdb-complete-mail-cleanup}@anchor{13e}
@deffn {Function} bbdb@w{-}complete@w{-}mail@w{-}cleanup mail beg

@format
Clean up after inserting MAIL at position BEG.
If we are past @code{`fill-column'}, wrap at the previous comma.
@end format
@end deffn

@geindex bbdb-completing-read-mails; Emacs Lisp function
@anchor{bbdb-com el function bbdb-completing-read-mails}@anchor{13f}
@deffn {Function} bbdb@w{-}completing@w{-}read@w{-}mails prompt &optional  init

@format
Like @code{`read-string'}, but allows @ref{da,,`bbdb-complete-mail'} style completion.
@end format
@end deffn

@geindex bbdb-completing-read-record; Emacs Lisp function
@anchor{bbdb-com el function bbdb-completing-read-record}@anchor{140}
@deffn {Function} bbdb@w{-}completing@w{-}read@w{-}record prompt &optional  omit-records

@format
Prompt for and return a single record from the bbdb;
completion is done according to @ref{79,,`bbdb-completion-list'}.  If the user
just hits return, nil is returned. Otherwise, a valid response is forced.
If OMIT-RECORDS is non-nil it should be a list of records to dis-allow
completion with.
@end format
@end deffn

@geindex bbdb-completing-read-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-completing-read-records}@anchor{141}
@deffn {Function} bbdb@w{-}completing@w{-}read@w{-}records prompt &optional  omit-records

@format
Read and return list of records from the bbdb.
Completion is done according to @ref{79,,`bbdb-completion-list'}.  If the user
just hits return, nil is returned.  Otherwise, a valid response is forced.
@end format
@end deffn

@geindex bbdb-completion-predicate; Emacs Lisp function
@anchor{bbdb-com el function bbdb-completion-predicate}@anchor{142}
@deffn {Function} bbdb@w{-}completion@w{-}predicate key records

@format
For use as the third argument to @code{`completing-read'}.
Obey @ref{79,,`bbdb-completion-list'}.
@end format
@end deffn

@geindex bbdb-compose-mail; Emacs Lisp function
@anchor{bbdb-com el function bbdb-compose-mail}@anchor{143}
@deffn {Function} bbdb@w{-}compose@w{-}mail  &rest args

@format
Start composing a mail message to send.
Use @ref{fc,,`bbdb-mail-user-agent'} or (if nil) use @code{`mail-user-agent'}.
ARGS are passed to @code{`compose-mail'}.
@end format
@end deffn

@geindex bbdb-copy-fields-as-kill; Emacs Lisp function
@anchor{bbdb-com el function bbdb-copy-fields-as-kill}@anchor{144}
@deffn {Function} bbdb@w{-}copy@w{-}fields@w{-}as@w{-}kill records field &optional  num

@format
For RECORDS copy values of FIELD at point to kill ring.
If FIELD is an address or phone with a label, copy only field values
with the same label.  With numeric prefix NUM, if the value of FIELD
is a list, copy only the NUMth list element.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
@end format
@end deffn

@geindex bbdb-copy-records-as-kill; Emacs Lisp function
@anchor{bbdb-com el function bbdb-copy-records-as-kill}@anchor{145}
@deffn {Function} bbdb@w{-}copy@w{-}records@w{-}as@w{-}kill records

@format
Copy RECORDS to kill ring.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
@end format
@end deffn

@geindex bbdb-create; Emacs Lisp function
@anchor{bbdb-com el function bbdb-create}@anchor{146}
@deffn {Function} bbdb@w{-}create record

@format
Add a new RECORD to BBDB.
When called interactively read all relevant info.
Do not call this from a program; call @code{`bbdb-create-internal'} instead.
@end format
@end deffn

@geindex bbdb-creation-newer; Emacs Lisp function
@anchor{bbdb-com el function bbdb-creation-newer}@anchor{147}
@deffn {Function} bbdb@w{-}creation@w{-}newer date &optional  layout

@format
Display records with creation-date newer than DATE.
DATE must be in yyyy-mm-dd format.
@end format
@end deffn

@geindex bbdb-creation-no-change; Emacs Lisp function
@anchor{bbdb-com el function bbdb-creation-no-change}@anchor{148}
@deffn {Function} bbdb@w{-}creation@w{-}no@w{-}change  &optional layout

@format
Display records that have the same timestamp and creation-date.
@end format
@end deffn

@geindex bbdb-creation-older; Emacs Lisp function
@anchor{bbdb-com el function bbdb-creation-older}@anchor{149}
@deffn {Function} bbdb@w{-}creation@w{-}older date &optional  layout

@format
Display records with creation-date older than DATE.
DATE must be in yyyy-mm-dd format.
@end format
@end deffn

@geindex bbdb-delete-field-or-record; Emacs Lisp function
@anchor{bbdb-com el function bbdb-delete-field-or-record}@anchor{14a}
@deffn {Function} bbdb@w{-}delete@w{-}field@w{-}or@w{-}record records field &optional  noprompt

@format
For RECORDS delete FIELD.
If FIELD is the @code{`name'} field, delete RECORDS from datanbase.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'},
and FIELD is the field point is on.
If prefix NOPROMPT is non-nil, do not confirm deletion.
@end format
@end deffn

@geindex bbdb-delete-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-delete-records}@anchor{14b}
@deffn {Function} bbdb@w{-}delete@w{-}records records &optional  noprompt

@format
Delete RECORDS.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
If prefix NOPROMPT is non-nil, do not confirm deletion.
@end format
@end deffn

@geindex bbdb-delete-redundant-mails; Emacs Lisp function
@anchor{bbdb-com el function bbdb-delete-redundant-mails}@anchor{14c}
@deffn {Function} bbdb@w{-}delete@w{-}redundant@w{-}mails records &optional  query update

@format
Delete redundant or duplicate mails from RECORDS.
For example, "foo@@bar.baz.com" is redundant w.r.t. "foo@@baz.com".
Duplicates may (but should not) occur if we feed BBDB automatically.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
If QUERY is non-nil (as in interactive calls, unless we use a prefix arg)
query before deleting the redundant mail addresses.
If UPDATE is non-nil (as in interactive calls) update the database.
Otherwise, this is the caller's responsiblity.

Noninteractively, this may be used as an element of @ref{12f,,`bbdb-notice-record-hook'}
or @ref{b5,,`bbdb-change-hook'}.  However, see also @ref{c1,,`bbdb-ignore-redundant-mails'},
which is probably more suited for your needs.
@end format
@end deffn

@geindex bbdb-dial-number; Emacs Lisp function
@anchor{bbdb-com el function bbdb-dial-number}@anchor{e5}
@deffn {Function} bbdb@w{-}dial@w{-}number phone-string

@format
Dial the number specified by PHONE-STRING.
This uses the tel URI syntax passed to @code{`browse-url'} to make the call.
If @ref{e4,,`bbdb-dial-function'} is non-nil then that is called to make the phone call.
@end format
@end deffn

@geindex bbdb-dial; Emacs Lisp function
@anchor{bbdb-com el function bbdb-dial}@anchor{14d}
@deffn {Function} bbdb@w{-}dial phone force-area-code

@format
Dial the number at point.
If the point is at the beginning of a record, dial the first phone number.
Use rules from @ref{e7,,`bbdb-dial-local-prefix-alist'} unless prefix FORCE-AREA-CODE
is non-nil.  Do not dial the extension.
@end format
@end deffn

@geindex bbdb-display-all-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-display-all-records}@anchor{14e}
@deffn {Function} bbdb@w{-}display@w{-}all@w{-}records  &optional layout

@format
Show all records.
If invoked in a *BBDB* buffer point stays on the currently visible record.
Inverse of @ref{14f,,`bbdb-display-current-record'}.
@end format
@end deffn

@geindex bbdb-display-current-record; Emacs Lisp function
@anchor{bbdb-com el function bbdb-display-current-record}@anchor{14f}
@deffn {Function} bbdb@w{-}display@w{-}current@w{-}record  &optional layout

@format
Narrow to current record.  Inverse of @ref{14e,,`bbdb-display-all-records'}.
@end format
@end deffn

@geindex bbdb-display-records-completely; Emacs Lisp function
@anchor{bbdb-com el function bbdb-display-records-completely}@anchor{150}
@deffn {Function} bbdb@w{-}display@w{-}records@w{-}completely records

@format
Display RECORDS using layout @code{`full-multi-line'} (i.e., display all fields).
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
@end format
@end deffn

@geindex bbdb-display-records-with-layout; Emacs Lisp function
@anchor{bbdb-com el function bbdb-display-records-with-layout}@anchor{151}
@deffn {Function} bbdb@w{-}display@w{-}records@w{-}with@w{-}layout records layout

@format
Display RECORDS using LAYOUT.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
@end format
@end deffn

@geindex bbdb-do-all-records; Emacs Lisp function

@deffn {Function} bbdb@w{-}do@w{-}all@w{-}records  &optional arg

@format
Command prefix for operating on all records currently displayed.
With prefix ARG a positive number, operate on all records.
With prefix ARG a negative number, operate on current record only.
This only works for certain commands.
@end format
@end deffn

@geindex bbdb-do-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-do-records}@anchor{152}
@deffn {Function} bbdb@w{-}do@w{-}records  &optional full

@format
Return list of records to operate on.
Normally this list includes only the current record.
It includes all currently displayed records if the command prefix \
\<bbdb-mode-map>\[bbdb-do-all-records] is used.
If FULL is non-nil, the list of records includes display information.
@end format
@end deffn

@geindex bbdb-dwim-mail; Emacs Lisp function
@anchor{bbdb-com el function bbdb-dwim-mail}@anchor{13d}
@deffn {Function} bbdb@w{-}dwim@w{-}mail record &optional  mail

@format
Return a string to use as the mail address of RECORD.
The name in the mail address is formatted obeying @ref{fa,,`bbdb-mail-name-format'}
and @ref{fb,,`bbdb-mail-name'}.  However, if both the first name and last name
are constituents of the address as in John.Doe@@Some.Host,
and @ref{f9,,`bbdb-mail-avoid-redundancy'} is non-nil, then the address is used as is
and @ref{fa,,`bbdb-mail-name-format'} and @ref{fb,,`bbdb-mail-name'} are ignored.
If @ref{f9,,`bbdb-mail-avoid-redundancy'} is 'mail-only the name is never included.
MAIL may be a mail address to be used for RECORD.
If MAIL is an integer, use the MAILth mail address of RECORD.
If MAIL is nil use the first mail address of RECORD.
@end format
@end deffn

@geindex bbdb-edit-address-default; Emacs Lisp function
@anchor{bbdb-com el function bbdb-edit-address-default}@anchor{c2}
@deffn {Function} bbdb@w{-}edit@w{-}address@w{-}default address

@format
Function to use for address editing.
The sub-fields and the prompts used are:
Street, line n:  (nth n street)
City:            city
State:           state
Postcode:        postcode
Country:         country
@end format
@end deffn

@geindex bbdb-edit-address-street; Emacs Lisp function
@anchor{bbdb-com el function bbdb-edit-address-street}@anchor{153}
@deffn {Function} bbdb@w{-}edit@w{-}address@w{-}street streets

@format
Edit list STREETS.
@end format
@end deffn

@geindex bbdb-edit-field; Emacs Lisp function
@anchor{bbdb-com el function bbdb-edit-field}@anchor{154}
@deffn {Function} bbdb@w{-}edit@w{-}field record field &optional  value flag

@format
Edit the contents of FIELD of RECORD.
If point is in the middle of a multi-line field (e.g., address),
then the entire field is edited, not just the current line.
For editing phone numbers or addresses, VALUE must be the phone number
or address that gets edited. An error is thrown when attempting to edit
a phone number or address with VALUE being nil.

- The value of an xfield is a string.  With prefix FLAG the value may be
  any lisp object.
@end format
@end deffn

@geindex bbdb-fix-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-fix-records}@anchor{155}
@deffn {Function} bbdb@w{-}fix@w{-}records records

@format
Fix broken RECORDS.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
@end format
@end deffn

@geindex bbdb-get-mail-aliases; Emacs Lisp function
@anchor{bbdb-com el function bbdb-get-mail-aliases}@anchor{156}
@deffn {Function} bbdb@w{-}get@w{-}mail@w{-}aliases 

@format
Return a list of mail aliases used in the BBDB.
@end format
@end deffn

@geindex bbdb-get-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-get-records}@anchor{157}
@deffn {Function} bbdb@w{-}get@w{-}records prompt

@format
If inside the *BBDB* buffer get the current records.
In other buffers ask the user.
@end format
@end deffn

@geindex bbdb-grab-url; Emacs Lisp function
@anchor{bbdb-com el function bbdb-grab-url}@anchor{158}
@deffn {Function} bbdb@w{-}grab@w{-}url record url

@format
Grab URL and store it in RECORD.
@end format
@end deffn

@geindex bbdb-ident-point; Emacs Lisp function
@anchor{bbdb-com el function bbdb-ident-point}@anchor{159}
@deffn {Function} bbdb@w{-}ident@w{-}point  &optional point

@format
Return identifier (RECNUM FIELD NUM) for position POINT.
If POINT is nil use current value of point.
RECNUM is the number of the record (starting from zero).
FIELD is the field type.
If FIELD's value is a list, NUM is the position of the subfield within FIELD.
If any of these terms is not defined at POINT, the respective value is nil.
@end format
@end deffn

@geindex bbdb-insert-field; Emacs Lisp function
@anchor{bbdb-com el function bbdb-insert-field}@anchor{e2}
@deffn {Function} bbdb@w{-}insert@w{-}field record field value

@format
For RECORD, add a new FIELD with value VALUE.
Interactively, read FIELD and VALUE; RECORD is the current record.
A non-nil prefix arg is passed on to @ref{15a,,`bbdb-read-field'} as FLAG (see there).
@end format
@end deffn

@geindex bbdb-list-transpose; Emacs Lisp function
@anchor{bbdb-com el function bbdb-list-transpose}@anchor{15b}
@deffn {Function} bbdb@w{-}list@w{-}transpose list i j

@format
For LIST transpose elements I and J destructively.
I and J start with zero.  Return the modified LIST.
@end format
@end deffn

@geindex bbdb-mail-address; Emacs Lisp function
@anchor{bbdb-com el function bbdb-mail-address}@anchor{15c}
@deffn {Function} bbdb@w{-}mail@w{-}address records &optional  n kill-ring-save verbose

@format
Return mail addresses of RECORDS as a string.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
By default, the first mail addresses of RECORDS are used.
If prefix N is a number, use Nth mail address of RECORDS (starting from 1).
If prefix N is C-u (t noninteractively) use all mail addresses of RECORDS.
If KILL-RING-SAVE is non-nil (as in interactive calls), copy mail addresses
to kill ring.  If VERBOSE is non-nil (as in interactive calls) be verbose.
@end format
@end deffn

@geindex bbdb-mail-aliases; Emacs Lisp function
@anchor{bbdb-com el function bbdb-mail-aliases}@anchor{f7}
@deffn {Function} bbdb@w{-}mail@w{-}aliases  &optional force-rebuilt noisy

@format
Define mail aliases for the records in the database.
Define a mail alias for every record that has a @code{`mail-alias'} field
which is the contents of that field.
If there are multiple comma-separated words in the @code{`mail-alias'} field,
then all of those words will be defined as aliases for that person.

If multiple records in the database have the same mail alias,
then that alias expands to a comma-separated list of the mail addresses
of all of these people.
Add this command to @code{`mail-setup-hook'}.

Mail aliases are (re)built only if @ref{f8,,`bbdb-mail-aliases-need-rebuilt'} is non-nil
because the database was newly loaded or it has been edited.
Rebuilding the aliases is enforced if prefix FORCE-REBUILT is t.
@end format
@end deffn

@geindex bbdb-mail; Emacs Lisp function
@anchor{bbdb-com el function bbdb-mail}@anchor{15d}
@deffn {Function} bbdb@w{-}mail records &optional  subject n verbose

@format
Compose a mail message to RECORDS (optional: using SUBJECT).
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
By default, the first mail addresses of RECORDS are used.
If prefix N is a number, use Nth mail address of RECORDS (starting from 1).
If prefix N is C-u (t noninteractively) use all mail addresses of RECORDS.
If VERBOSE is non-nil (as in interactive calls) be verbose.
@end format
@end deffn

@geindex bbdb-mail-yank; Emacs Lisp function
@anchor{bbdb-com el function bbdb-mail-yank}@anchor{15e}
@deffn {Function} bbdb@w{-}mail@w{-}yank 

@format
CC the people displayed in the *BBDB* buffer on this mail message.
The primary mail of each of the records currently listed in the
*BBDB* buffer will be appended to the CC: field of the current buffer.
@end format
@end deffn

@geindex bbdb-merge-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-merge-records}@anchor{15f}
@deffn {Function} bbdb@w{-}merge@w{-}records old-record new-record

@format
Merge OLD-RECORD into NEW-RECORD, return NEW-RECORD.
This copies all the data in OLD-RECORD into NEW-RECORD.  Then OLD-RECORD
is deleted.  If both records have names ask which to use.
Affixes, organizations, phone numbers, addresses, and mail addresses
are simply concatenated.

Interactively, OLD-RECORD is the current record.  NEW-RECORD is prompted for.
With prefix arg NEW-RECORD defaults to the first record with the same name.
@end format
@end deffn

@geindex bbdb-message-search; Emacs Lisp function
@anchor{bbdb-com el function bbdb-message-search}@anchor{160}
@deffn {Function} bbdb@w{-}message@w{-}search name mail

@format
Return list of BBDB records matching NAME and/or MAIL.
First try to find a record matching both NAME and MAIL.
If this fails try to find a record matching MAIL.
If this fails try to find a record matching NAME.
NAME may match FIRST_LAST, LAST_FIRST or AKA.

This function performs a fast search using @ref{78,,`bbdb-hashtable'}.
NAME and MAIL must be strings or nil.
See @code{`bbdb-search'} for searching records with regexps.
@end format
@end deffn

@geindex bbdb-omit-record; Emacs Lisp function
@anchor{bbdb-com el function bbdb-omit-record}@anchor{161}
@deffn {Function} bbdb@w{-}omit@w{-}record n

@format
Remove current record from the display without deleting it from BBDB.
With prefix N, omit the next N records.  If negative, omit backwards.
@end format
@end deffn

@geindex bbdb-parse-phone; Emacs Lisp function
@anchor{bbdb-com el function bbdb-parse-phone}@anchor{162}
@deffn {Function} bbdb@w{-}parse@w{-}phone string &optional  style

@format
Parse a phone number from STRING and return a list of integers the form
\(area-code exchange number extension).
This is both lenient and strict in what it will parse - whitespace may
appear (or not) between any of the groups of digits, parentheses around the
area code are optional, as is a dash between the exchange and number, and
a '1' preceeding the area code; but there must be three digits in the area
code and exchange, and four in the number (if they are present).
All of these are unambigously parsable:

  ( 415 ) 555 - 1212 x123   -> (415 555 1212 123)
  (415)555-1212 123         -> (415 555 1212 123)
  (1-415) 555-1212 123      -> (415 555 1212 123)
  1 (415)-555-1212 123      -> (415 555 1212 123)
  555-1212 123              -> (0 555 1212 123)
  555 1212                  -> (0 555 1212 0)
  415 555 1212              -> (415 555 1212 0)
  1 415 555 1212            -> (415 555 1212 0)
  5551212                   -> (0 555 1212 0)
  4155551212                -> (415 555 1212 0)
  4155551212123             -> (415 555 1212 123)
  5551212x123               -> (0 555 1212 123)
  1234                      -> (0 0 0 1234)

Note that "4151212123" is ambiguous; it could be interpreted either as
"(415) 121-2123" or as "415-1212 x123".

Return a list containing four numbers or one string.
@end format
@end deffn

@geindex bbdb-prefix-message; Emacs Lisp function
@anchor{bbdb-com el function bbdb-prefix-message}@anchor{163}
@deffn {Function} bbdb@w{-}prefix@w{-}message 

@format
Display a message about selected BBDB prefix commands.
@end format
@end deffn

@geindex bbdb-read-field; Emacs Lisp function
@anchor{bbdb-com el function bbdb-read-field}@anchor{15a}
@deffn {Function} bbdb@w{-}read@w{-}field record field &optional  flag

@format
For RECORD read new FIELD interactively.
- The phone number style is controlled via @ref{118,,`bbdb-phone-style'}.
  A prefix FLAG inverts the style,
- If a mail address lacks a domain, append @ref{e1,,`bbdb-default-domain'}
  if this variable non-nil.  With prefix FLAG do not alter the mail address.
- The value of an xfield is a string.  With prefix FLAG the value may be
  any lisp object.
@end format
@end deffn

@geindex bbdb-read-organization; Emacs Lisp function
@anchor{bbdb-com el function bbdb-read-organization}@anchor{164}
@deffn {Function} bbdb@w{-}read@w{-}organization  &optional init

@format
Read organization.
@end format
@end deffn

@geindex bbdb-read-record; Emacs Lisp function
@anchor{bbdb-com el function bbdb-read-record}@anchor{165}
@deffn {Function} bbdb@w{-}read@w{-}record  &optional first-and-last

@format
Read and return a new BBDB record.
Does not insert it into the database or update the hashtables,
but does ensure that there will not be name collisions.
@end format
@end deffn

@geindex bbdb-read-xfield; Emacs Lisp function
@anchor{bbdb-com el function bbdb-read-xfield}@anchor{166}
@deffn {Function} bbdb@w{-}read@w{-}xfield field &optional  init sexp

@format
Read xfield FIELD with optional INIT.
This calls bbdb-read-xfield-FIELD if it exists.
@end format
@end deffn

@geindex bbdb-record-edit-address; Emacs Lisp function
@anchor{bbdb-com el function bbdb-record-edit-address}@anchor{167}
@deffn {Function} bbdb@w{-}record@w{-}edit@w{-}address address &optional  label ignore-country

@format
Edit ADDRESS.
If LABEL is nil, edit the label sub-field of the address as well.
If the country field of ADDRESS is nonempty and IGNORE-COUNTRY is nil,
use the rule from @ref{4c,,`bbdb-address-format-list'} matching this country.
Otherwise, use the default rule according to @ref{4c,,`bbdb-address-format-list'}.
@end format
@end deffn

@geindex bbdb-record-edit-phone; Emacs Lisp function
@anchor{bbdb-com el function bbdb-record-edit-phone}@anchor{168}
@deffn {Function} bbdb@w{-}record@w{-}edit@w{-}phone phones phone

@format
For list PHONES edit PHONE number.
@end format
@end deffn

@geindex bbdb-record-list; Emacs Lisp function
@anchor{bbdb-com el function bbdb-record-list}@anchor{169}
@deffn {Function} bbdb@w{-}record@w{-}list records &optional  full

@format
Ensure that RECORDS is a list of records.
If RECORDS is a single record turn it into a list.
If FULL is non-nil, assume that RECORDS include display information.
@end format
@end deffn

@geindex bbdb; Emacs Lisp function
@anchor{bbdb-com el function bbdb}@anchor{16a}
@deffn {Function} bbdb regexp &optional  layout

@format
Display all records in the BBDB matching REGEXP
in either the name(s), organization, address, phone, mail, or xfields.
@end format
@end deffn

@geindex bbdb-search-address; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-address}@anchor{16b}
@deffn {Function} bbdb@w{-}search@w{-}address regexp &optional  layout

@format
Display all records in the BBDB matching REGEXP in the address fields.
@end format
@end deffn

@geindex bbdb-search-changed; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-changed}@anchor{d6}
@deffn {Function} bbdb@w{-}search@w{-}changed  &optional layout

@format
Display records which have been changed since BBDB was last saved.
@end format
@end deffn

@geindex bbdb-search-duplicates; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-duplicates}@anchor{16c}
@deffn {Function} bbdb@w{-}search@w{-}duplicates  &optional fields

@format
Search all records that have duplicate entries for FIELDS.
The list FIELDS may contain the symbols @code{`name'}, @code{`mail'}, and @code{`aka'}.
If FIELDS is nil use all these fields.  With prefix, query for FIELDS.
The search results are displayed in the BBDB buffer.
@end format
@end deffn

@geindex bbdb-search-invert; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-invert}@anchor{10f}
@deffn {Function} bbdb@w{-}search@w{-}invert  &optional arg

@format
Toggle inversion of the next search command.
With prefix ARG a positive number, invert next search.
With prefix ARG a negative number, do not invert next search.
@end format
@end deffn

@geindex bbdb-search-invert-p; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-invert-p}@anchor{16d}
@deffn {Function} bbdb@w{-}search@w{-}invert@w{-}p 

@format
Return variable @code{`bbdb-search-invert'} and set it to nil.
To set it again, use command @ref{10f,,`bbdb-search-invert'}.
@end format
@end deffn

@geindex bbdb-search-mail; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-mail}@anchor{16e}
@deffn {Function} bbdb@w{-}search@w{-}mail regexp &optional  layout

@format
Display all records in the BBDB matching REGEXP in the mail address.
@end format
@end deffn

@geindex bbdb-search-name; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-name}@anchor{16f}
@deffn {Function} bbdb@w{-}search@w{-}name regexp &optional  layout

@format
Display all records in the BBDB matching REGEXP in the name
\(or @code{`alternate}' names\).
@end format
@end deffn

@geindex bbdb-search-organization; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-organization}@anchor{170}
@deffn {Function} bbdb@w{-}search@w{-}organization regexp &optional  layout

@format
Display all records in the BBDB matching REGEXP in the organization field.
@end format
@end deffn

@geindex bbdb-search-phone; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-phone}@anchor{171}
@deffn {Function} bbdb@w{-}search@w{-}phone regexp &optional  layout

@format
Display all records in the BBDB matching REGEXP in the phones field.
@end format
@end deffn

@geindex bbdb-search-prog; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-prog}@anchor{172}
@deffn {Function} bbdb@w{-}search@w{-}prog function &optional  layout

@format
Search records using FUNCTION.
FUNCTION is called with one argument, the record, and should return
the record to be displayed or nil otherwise.
@end format
@end deffn

@geindex bbdb-search-read; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-read}@anchor{173}
@deffn {Function} bbdb@w{-}search@w{-}read  &optional field

@format
Read regexp to search FIELD values of records.
@end format
@end deffn

@geindex bbdb-search-xfields; Emacs Lisp function
@anchor{bbdb-com el function bbdb-search-xfields}@anchor{174}
@deffn {Function} bbdb@w{-}search@w{-}xfields field regexp &optional  layout

@format
Display all BBDB records for which xfield FIELD matches REGEXP.
@end format
@end deffn

@geindex bbdb-sort-addresses; Emacs Lisp function
@anchor{bbdb-com el function bbdb-sort-addresses}@anchor{175}
@deffn {Function} bbdb@w{-}sort@w{-}addresses records &optional  update

@format
Sort the addresses in RECORDS according to the label.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
If UPDATE is non-nil (as in interactive calls) update the database.
Otherwise, this is the caller's responsiblity (for example, when used
in @ref{b5,,`bbdb-change-hook'}).
@end format
@end deffn

@geindex bbdb-sort-phones; Emacs Lisp function
@anchor{bbdb-com el function bbdb-sort-phones}@anchor{176}
@deffn {Function} bbdb@w{-}sort@w{-}phones records &optional  update

@format
Sort the phones in RECORDS according to the label.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
If UPDATE is non-nil (as in interactive calls) update the database.
Otherwise, this is the caller's responsiblity (for example, when used
in @ref{b5,,`bbdb-change-hook'}).
@end format
@end deffn

@geindex bbdb-sort-xfields; Emacs Lisp function
@anchor{bbdb-com el function bbdb-sort-xfields}@anchor{177}
@deffn {Function} bbdb@w{-}sort@w{-}xfields records &optional  update

@format
Sort the xfields in RECORDS according to @ref{124,,`bbdb-xfields-sort-order'}.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
If UPDATE is non-nil (as in interactive calls) update the database.
Otherwise, this is the caller's responsiblity (for example, when used
in @ref{b5,,`bbdb-change-hook'}).
@end format
@end deffn

@geindex bbdb-timestamp-newer; Emacs Lisp function
@anchor{bbdb-com el function bbdb-timestamp-newer}@anchor{178}
@deffn {Function} bbdb@w{-}timestamp@w{-}newer date &optional  layout

@format
Display records with timestamp newer than DATE.
DATE must be in yyyy-mm-dd format.
@end format
@end deffn

@geindex bbdb-timestamp-older; Emacs Lisp function
@anchor{bbdb-com el function bbdb-timestamp-older}@anchor{179}
@deffn {Function} bbdb@w{-}timestamp@w{-}older date &optional  layout

@format
Display records with timestamp older than DATE.
DATE must be in yyyy-mm-dd format.
@end format
@end deffn

@geindex bbdb-toggle-records-layout; Emacs Lisp function
@anchor{bbdb-com el function bbdb-toggle-records-layout}@anchor{17a}
@deffn {Function} bbdb@w{-}toggle@w{-}records@w{-}layout records &optional  arg

@format
Toggle layout of RECORDS (elided or expanded).
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
With prefix ARG 0, RECORDS are displayed elided.
With any other non-nil ARG, RECORDS are displayed expanded.
@end format
@end deffn

@geindex bbdb-touch-records; Emacs Lisp function
@anchor{bbdb-com el function bbdb-touch-records}@anchor{17b}
@deffn {Function} bbdb@w{-}touch@w{-}records records

@format
Touch RECORDS by calling @ref{b5,,`bbdb-change-hook'} unconditionally.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
@end format
@end deffn

@geindex bbdb-transpose-fields; Emacs Lisp function
@anchor{bbdb-com el function bbdb-transpose-fields}@anchor{17c}
@deffn {Function} bbdb@w{-}transpose@w{-}fields arg

@format
Transpose previous and current field of a BBDB record.
With numeric prefix ARG, take previous field and move it past ARG fields.
With region active or ARG 0, transpose field point is in and field mark is in.

Both fields must be in the same record, and must be of the same basic type
\(that is, you can use this command to change the order in which phone numbers
or email addresses are listed, but you cannot use it to make an address appear
before a phone number; the order of field types is fixed).

If the current field is the name field, transpose first and last name,
irrespective of the value of ARG.
@end format
@end deffn

@node Lisp library bbdb-gnus,Lisp library bbdb-ispell,Lisp library bbdb-com,Top
@anchor{bbdb-gnus lisp-library-bbdb-gnus}@anchor{17d}@anchor{bbdb-gnus doc}@anchor{17e}
@chapter Lisp library (bbdb-gnus)


@menu
* Functions: Functions<4>. 
* Variables: Variables<3>. 

@end menu

@node Functions<4>,Variables<3>,,Lisp library bbdb-gnus
@anchor{bbdb-gnus functions}@anchor{17f}
@section Functions


@geindex bbdb-insinuate-gnus; Emacs Lisp function
@anchor{bbdb-gnus el function bbdb-insinuate-gnus}@anchor{180}
@deffn {Function} bbdb@w{-}insinuate@w{-}gnus 

@format
Hook BBDB into Gnus.
Do not call this in your init file.  Use @ref{7e,,`bbdb-initialize'}.
@end format
@end deffn

@geindex bbdb/gnus-nnimap-folder-list-from-bbdb; Emacs Lisp function
@anchor{bbdb-gnus el function bbdb/gnus-nnimap-folder-list-from-bbdb}@anchor{181}
@deffn {Function} bbdb/gnus@w{-}nnimap@w{-}folder@w{-}list@w{-}from@w{-}bbdb 

@format
Return a list of \( "From" mail-regexp imap-folder-name\) tuples
based on the contents of the bbdb.

The folder-name is the value of the 'imap attribute of the BBDB record;
the mail-regexp consists of all the mail addresses for the BBDB record
concatenated with OR.  Records without an 'imap attribute are ignored.

Here  is an example of a relevant BBDB record:

Uwe Brauer
           mail: oub@@mat.ucm.es
           imap: testimap

This function uses @code{`regexp-opt'} to generate the mail-regexp which automatically
@code{`regexp-quote'}s its arguments.  Please note: in order that this will work
with the @code{`nnimap-split-fancy'} method you have to use macros, that is your setting
will look like:

\(setq nnimap-split-rule  'nnimap-split-fancy
       nnimap-split-inbox "INBOX"
       nnimap-split-fancy
       @code{\(| ,@@\(bbdb/gnus-nnimap-folder-list-from-bbdb\)
            ... \)\)

Note that `\( is the backquote, NOT the quote }\(.
@end format
@end deffn

@geindex bbdb/gnus-score; Emacs Lisp function
@anchor{bbdb-gnus el function bbdb/gnus-score}@anchor{182}
@deffn {Function} bbdb/gnus@w{-}score group

@format
This returns a score alist for Gnus.  A score pair will be made for
every member of the mail field in records which also have a gnus-score
field.  This allows the BBDB to serve as a supplemental global score
file, with the advantage that it can keep up with multiple and changing
addresses better than the traditionally static global scorefile.
@end format
@end deffn

@geindex bbdb/gnus-score-invalidate-alist; Emacs Lisp function
@anchor{bbdb-gnus el function bbdb/gnus-score-invalidate-alist}@anchor{183}
@deffn {Function} bbdb/gnus@w{-}score@w{-}invalidate@w{-}alist record

@format
This function is called through @ref{126,,`bbdb-after-change-hook'},
and sets @ref{184,,`bbdb/gnus-score-rebuild-alist'} to t if the changed
record contains a gnus-score field.
@end format
@end deffn

@geindex bbdb/gnus-score-as-text; Emacs Lisp function
@anchor{bbdb-gnus el function bbdb/gnus-score-as-text}@anchor{185}
@deffn {Function} bbdb/gnus@w{-}score@w{-}as@w{-}text group

@format
Returns a SCORE file format string built from the BBDB.
@end format
@end deffn

@geindex bbdb/gnus-split-method; Emacs Lisp function
@anchor{bbdb-gnus el function bbdb/gnus-split-method}@anchor{186}
@deffn {Function} bbdb/gnus@w{-}split@w{-}method 

@format
This function expects to be called in a buffer which contains a mail
message to be spooled, and the buffer should be narrowed to the message
headers.  It returns a list of groups to which the message should be
spooled, using the addresses in the headers and information from BBDB.
@end format
@end deffn

@geindex bbdb/gnus-split-to-group; Emacs Lisp function
@anchor{bbdb-gnus el function bbdb/gnus-split-to-group}@anchor{187}
@deffn {Function} bbdb/gnus@w{-}split@w{-}to@w{-}group address &optional  source

@format
This function is called from @ref{186,,`bbdb/gnus-split-method'} in order to
determine the group and spooling priority for a single address.
@end format
@end deffn

@node Variables<3>,,Functions<4>,Lisp library bbdb-gnus
@anchor{bbdb-gnus variables}@anchor{188}
@section Variables


@geindex bbdb/gnus-score-field; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-score-field}@anchor{189}
@deffn {Variable} bbdb/gnus@w{-}score@w{-}field

@format
This variable contains the name of the BBDB field which should be
checked for a score to add to the mail addresses in the same record.
@end format
@end deffn

@geindex bbdb/gnus-score-default; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-score-default}@anchor{18a}
@deffn {Variable} bbdb/gnus@w{-}score@w{-}default

@format
If this is set, then every mail address in the BBDB that does not have
an associated score field will be assigned this score.  A value of nil
implies a default score of zero.
@end format
@end deffn

@geindex bbdb/gnus-score-default-internal; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-score-default-internal}@anchor{18b}
@deffn {Variable} bbdb/gnus@w{-}score@w{-}default@w{-}internal

@format
Internal variable for detecting changes to
@ref{18a,,`bbdb/gnus-score-default'}.  You should not set this variable directly -
set @ref{18a,,`bbdb/gnus-score-default'} instead.
@end format
@end deffn

@geindex bbdb/gnus-score-alist; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-score-alist}@anchor{18c}
@deffn {Variable} bbdb/gnus@w{-}score@w{-}alist

@format
The text version of the scoring structure returned by
bbdb/gnus-score.  This is built automatically from the BBDB.
@end format
@end deffn

@geindex bbdb/gnus-score-rebuild-alist; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-score-rebuild-alist}@anchor{184}
@deffn {Variable} bbdb/gnus@w{-}score@w{-}rebuild@w{-}alist

@format
Set to t to rebuild bbdb/gnus-score-alist on the next call to
bbdb/gnus-score.  This will be set automatically if you change a BBDB
record which contains a gnus-score field.
@end format
@end deffn

@geindex bbdb/gnus-split-default-group; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-split-default-group}@anchor{18d}
@deffn {Variable} bbdb/gnus@w{-}split@w{-}default@w{-}group

@format
If the BBDB does not indicate any group to spool a message to, it will
be spooled to this group.  If @ref{18e,,`bbdb/gnus-split-crosspost-default'} is not
nil, and if the BBDB did not indicate a specific group for one or more
addresses, messages will be crossposted to this group in addition to any
group(s) which the BBDB indicated.
@end format
@end deffn

@geindex bbdb/gnus-split-myaddr-regexp; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-split-myaddr-regexp}@anchor{18f}
@deffn {Variable} bbdb/gnus@w{-}split@w{-}myaddr@w{-}regexp

@format
This regular expression should match your address as found in the
From header of your mail.
@end format
@end deffn

@geindex bbdb/gnus-split-crosspost-default; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-split-crosspost-default}@anchor{18e}
@deffn {Variable} bbdb/gnus@w{-}split@w{-}crosspost@w{-}default

@format
If this variable is not nil, then if the BBDB could not identify a
group for every mail address, messages will be filed in
@ref{18d,,`bbdb/gnus-split-default-group'} in addition to any group(s) which the BBDB
identified.
@end format
@end deffn

@geindex bbdb/gnus-split-nomatch-function; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-split-nomatch-function}@anchor{190}
@deffn {Variable} bbdb/gnus@w{-}split@w{-}nomatch@w{-}function

@format
This function will be called after searching the BBDB if no place to
file the message could be found.  It should return a group name (or list
of group names) -- @code{`nnmail-split-fancy'} as provided with Gnus is an
excellent choice.
@end format
@end deffn

@geindex bbdb/gnus-split-private-field; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-split-private-field}@anchor{191}
@deffn {Variable} bbdb/gnus@w{-}split@w{-}private@w{-}field

@format
This variable is used to determine the xfield to reference to find the
associated group when saving private mail for a mail address known to
the BBDB.  The value of the xfield should be the name of a mail group.
@end format
@end deffn

@geindex bbdb/gnus-split-public-field; Emacs Lisp variable
@anchor{bbdb-gnus el variable bbdb/gnus-split-public-field}@anchor{192}
@deffn {Variable} bbdb/gnus@w{-}split@w{-}public@w{-}field

@format
This variable is used to determine the xfield to reference to find the
associated group when saving non-private mail (received from a mailing
list) for a mail address known to the BBDB.  The value of the xfield
should be the name of a mail group, followed by a space, and a regular
expression to match on the envelope sender to verify that this mail came
from the list in question.
@end format
@end deffn

@node Lisp library bbdb-ispell,Lisp library bbdb-message,Lisp library bbdb-gnus,Top
@anchor{bbdb-ispell lisp-library-bbdb-ispell}@anchor{193}@anchor{bbdb-ispell doc}@anchor{194}
@chapter Lisp library (bbdb-ispell)


@menu
* Functions: Functions<5>. 
* Variables: Variables<4>. 

@end menu

@node Functions<5>,Variables<4>,,Lisp library bbdb-ispell
@anchor{bbdb-ispell functions}@anchor{195}
@section Functions


@geindex bbdb-ispell-export; Emacs Lisp function
@anchor{bbdb-ispell el function bbdb-ispell-export}@anchor{196}
@deffn {Function} bbdb@w{-}ispell@w{-}export 

@format
Export BBDB records to ispell personal dictionaries.
@end format
@end deffn

@geindex bbdb-ispell-collect-words; Emacs Lisp function
@anchor{bbdb-ispell el function bbdb-ispell-collect-words}@anchor{197}
@deffn {Function} bbdb@w{-}ispell@w{-}collect@w{-}words field

@format
Parse BBDB FIELD and collect words in @ref{198,,`bbdb-ispell-word-list'}.
@end format
@end deffn

@node Variables<4>,,Functions<5>,Lisp library bbdb-ispell
@anchor{bbdb-ispell variables}@anchor{199}
@section Variables


@geindex bbdb-ispell-dictionary-list; Emacs Lisp variable
@anchor{bbdb-ispell el variable bbdb-ispell-dictionary-list}@anchor{19a}
@deffn {Variable} bbdb@w{-}ispell@w{-}dictionary@w{-}list

@format
List of ispell personal dictionaries.
Allowed elements are as in the return value of @code{`ispell-valid-dictionary-list'}.
@end format
@end deffn

@geindex bbdb-ispell-field-list; Emacs Lisp variable
@anchor{bbdb-ispell el variable bbdb-ispell-field-list}@anchor{19b}
@deffn {Variable} bbdb@w{-}ispell@w{-}field@w{-}list

@format
List of fields of each BBDB record considered for the personal dictionary.
@end format
@end deffn

@geindex bbdb-ispell-min-word-length; Emacs Lisp variable
@anchor{bbdb-ispell el variable bbdb-ispell-min-word-length}@anchor{19c}
@deffn {Variable} bbdb@w{-}ispell@w{-}min@w{-}word@w{-}length

@format
Words with fewer characters are ignored.
@end format
@end deffn

@geindex bbdb-ispell-ignore-re; Emacs Lisp variable
@anchor{bbdb-ispell el variable bbdb-ispell-ignore-re}@anchor{19d}
@deffn {Variable} bbdb@w{-}ispell@w{-}ignore@w{-}re

@format
Words matching this regexp are ignored.
@end format
@end deffn

@geindex bbdb-ispell-word-list; Emacs Lisp variable
@anchor{bbdb-ispell el variable bbdb-ispell-word-list}@anchor{198}
@deffn {Variable} bbdb@w{-}ispell@w{-}word@w{-}list

@format
List of words extracted from the BBDB records.
@end format
@end deffn

@node Lisp library bbdb-message,Lisp library bbdb-mhe,Lisp library bbdb-ispell,Top
@anchor{bbdb-message doc}@anchor{19e}@anchor{bbdb-message lisp-library-bbdb-message}@anchor{19f}
@chapter Lisp library (bbdb-message)


@menu
* Functions: Functions<6>. 

@end menu

@node Functions<6>,,,Lisp library bbdb-message
@anchor{bbdb-message functions}@anchor{1a0}
@section Functions


@geindex bbdb-insinuate-message; Emacs Lisp function
@anchor{bbdb-message el function bbdb-insinuate-message}@anchor{1a1}
@deffn {Function} bbdb@w{-}insinuate@w{-}message 

@format
Hook BBDB into Message Mode.
Do not call this in your init file.  Use @ref{7e,,`bbdb-initialize'}.
@end format
@end deffn

@node Lisp library bbdb-mhe,Lisp library bbdb-migrate,Lisp library bbdb-message,Top
@anchor{bbdb-mhe lisp-library-bbdb-mhe}@anchor{1a2}@anchor{bbdb-mhe doc}@anchor{1a3}
@chapter Lisp library (bbdb-mhe)


@menu
* Functions: Functions<7>. 

@end menu

@node Functions<7>,,,Lisp library bbdb-mhe
@anchor{bbdb-mhe functions}@anchor{1a4}
@section Functions


@geindex bbdb/mh-header; Emacs Lisp function
@anchor{bbdb-mhe el function bbdb/mh-header}@anchor{1a5}
@deffn {Function} bbdb/mh@w{-}header header

@format
Find and return the value of HEADER in the current buffer.
Returns the empty string if HEADER is not in the message.
@end format
@end deffn

@geindex bbdb-insinuate-mh; Emacs Lisp function
@anchor{bbdb-mhe el function bbdb-insinuate-mh}@anchor{1a6}
@deffn {Function} bbdb@w{-}insinuate@w{-}mh 

@format
Call this function to hook BBDB into MH-E.
Do not call this in your init file.  Use @ref{7e,,`bbdb-initialize'}.
@end format
@end deffn

@node Lisp library bbdb-migrate,Lisp library bbdb-mu4e,Lisp library bbdb-mhe,Top
@anchor{bbdb-migrate lisp-library-bbdb-migrate}@anchor{1a7}@anchor{bbdb-migrate doc}@anchor{1a8}
@chapter Lisp library (bbdb-migrate)


@menu
* Constants:: 
* Functions: Functions<8>. 

@end menu

@node Constants,Functions<8>,,Lisp library bbdb-migrate
@anchor{bbdb-migrate constants}@anchor{1a9}
@section Constants


@geindex bbdb-migration-spec; Emacs Lisp constant
@anchor{bbdb-migrate el variable bbdb-migration-spec}@anchor{1aa}
@deffn {Constant} bbdb@w{-}migration@w{-}spec

@format
The alist of (version . migration-spec-list).
See @ref{1ab,,`bbdb-migrate-record-lambda'} for details.
@end format
@end deffn

@node Functions<8>,,Constants,Lisp library bbdb-migrate
@anchor{bbdb-migrate functions}@anchor{1ac}
@section Functions


@geindex bbdb-migrate; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate}@anchor{1ad}
@deffn {Function} bbdb@w{-}migrate records old-format

@format
Migrate the BBDB from the version on disk to the current version
\(in @code{`bbdb-file-format'}).
@end format
@end deffn

@geindex bbdb-migrate-record-lambda; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-record-lambda}@anchor{1ab}
@deffn {Function} bbdb@w{-}migrate@w{-}record@w{-}lambda changes

@format
Return a function which will migrate a single record.
CHANGES is a @code{`migration-spec-list'} containing entries of the form

        (GET SET FUNCTION)

where GET is the function to be used to retrieve the field to be
modified, and SET is the function to be used to set the field to be
modified.  FUNCTION will be applied to the result of GET, and its
results will be saved with SET.
@end format
@end deffn

@geindex bbdb-migrate-versions-lambda; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-versions-lambda}@anchor{1ae}
@deffn {Function} bbdb@w{-}migrate@w{-}versions@w{-}lambda v0

@format
Return the function to migrate from V0 to @code{`bbdb-file-format'}.
@end format
@end deffn

@geindex bbdb-migrate-versions-lambda; Emacs Lisp function

@deffn {Function} bbdb@w{-}migrate@w{-}versions@w{-}lambda v0

@format
Return the function to migrate from V0 to @code{`bbdb-file-format'}.
@end format
@end deffn

@geindex bbdb-migrate-postcodes-to-strings; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-postcodes-to-strings}@anchor{1af}
@deffn {Function} bbdb@w{-}migrate@w{-}postcodes@w{-}to@w{-}strings addresses

@format
Make all postcodes plain strings.
This uses the code that used to be in @code{`bbdb-address-postcode'}.
@end format
@end deffn

@geindex bbdb-migrate-change-dates; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-change-dates}@anchor{1b0}
@deffn {Function} bbdb@w{-}migrate@w{-}change@w{-}dates record

@format
Change date formats.
Formats are changed in timestamp and creation-date fields from
"dd mmm yy" to "yyyy-mm-dd".
@end format
@end deffn

@geindex bbdb-migrate-change-dates-change-field; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-change-dates-change-field}@anchor{1b1}
@deffn {Function} bbdb@w{-}migrate@w{-}change@w{-}dates@w{-}change@w{-}field field

@format
Migrate the date field (the cdr of FIELD) from "dd mmm yy" to
"yyyy-mm-dd".
@end format
@end deffn

@geindex bbdb-migrate-add-country-field; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-add-country-field}@anchor{1b2}
@deffn {Function} bbdb@w{-}migrate@w{-}add@w{-}country@w{-}field addrl

@format
Add a country field to each address in the address list.
@end format
@end deffn

@geindex bbdb-migrate-streets-to-list; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-streets-to-list}@anchor{1b3}
@deffn {Function} bbdb@w{-}migrate@w{-}streets@w{-}to@w{-}list addrl

@format
Convert the streets to a list.
@end format
@end deffn

@geindex bbdb-migrate-xfields-to-list; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-xfields-to-list}@anchor{1b4}
@deffn {Function} bbdb@w{-}migrate@w{-}xfields@w{-}to@w{-}list xfields

@format
Migrate XFIELDS to list.
@end format
@end deffn

@geindex bbdb-migrate-organization-to-list; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-migrate-organization-to-list}@anchor{1b5}
@deffn {Function} bbdb@w{-}migrate@w{-}organization@w{-}to@w{-}list organization

@format
Migrate ORGANIZATION to list.
@end format
@end deffn

@geindex bbdb-undocumented-variables; Emacs Lisp function
@anchor{bbdb-migrate el function bbdb-undocumented-variables}@anchor{1b6}
@deffn {Function} bbdb@w{-}undocumented@w{-}variables  &optional name-space message

@format
Return list of undocumented variables in NAME-SPACE.
NAME-SPACE defaults to "bbdb-".  Use a prefix arg to specify NAME-SPACE
interactively.  If MESSAGE is non-nil (as in interactive calls) display
the list in the message area.

This command may come handy to identify BBDB variables in your init file
that are not used anymore by the current version of BBDB.  Yet this fails
for outdated BBDB variables that are set via your personal @code{`custom-file'}.
@end format
@end deffn

@node Lisp library bbdb-mu4e,Lisp library bbdb-mua,Lisp library bbdb-migrate,Top
@anchor{bbdb-mu4e lisp-library-bbdb-mu4e}@anchor{1b7}@anchor{bbdb-mu4e doc}@anchor{1b8}
@chapter Lisp library (bbdb-mu4e)


@menu
* Functions: Functions<9>. 

@end menu

@node Functions<9>,,,Lisp library bbdb-mu4e
@anchor{bbdb-mu4e functions}@anchor{1b9}
@section Functions


@geindex bbdb-insinuate-mu4e; Emacs Lisp function
@anchor{bbdb-mu4e el function bbdb-insinuate-mu4e}@anchor{1ba}
@deffn {Function} bbdb@w{-}insinuate@w{-}mu4e 

@format
Hook BBDB into mu4e.
Do not call this in your init file.  Use @ref{7e,,`bbdb-initialize'}.
@end format
@end deffn

@node Lisp library bbdb-mua,Lisp library bbdb-pgp,Lisp library bbdb-mu4e,Top
@anchor{bbdb-mua lisp-library-bbdb-mua}@anchor{1bb}@anchor{bbdb-mua doc}@anchor{1bc}
@chapter Lisp library (bbdb-mua)


@menu
* Constants: Constants<2>. 
* Functions: Functions<10>. 

@end menu

@node Constants<2>,Functions<10>,,Lisp library bbdb-mua
@anchor{bbdb-mua constants}@anchor{1bd}
@section Constants


@geindex bbdb-mua-mode-alist; Emacs Lisp constant
@anchor{bbdb-mua el variable bbdb-mua-mode-alist}@anchor{1be}
@deffn {Constant} bbdb@w{-}mua@w{-}mode@w{-}alist

@format
Alist of MUA modes supported by BBDB.
Each element is of the form (MUA MODE MODE ...), where MODEs are used by MUA.
@end format
@end deffn

@node Functions<10>,,Constants<2>,Lisp library bbdb-mua
@anchor{bbdb-mua functions}@anchor{1bf}
@section Functions


@geindex bbdb-accept-message; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-accept-message}@anchor{1c0}
@deffn {Function} bbdb@w{-}accept@w{-}message  &optional invert

@format
For use with variable @ref{10d,,`bbdb-mua-update-interactive-p'} and friends.
Return the value of variable @ref{ce,,`bbdb-update-records-p'} for messages matching
@ref{bb,,`bbdb-accept-message-alist'}.  If INVERT is non-nil, accept messages
not matching @ref{bc,,`bbdb-ignore-message-alist'}.
@end format
@end deffn

@geindex bbdb-annotate-message; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-annotate-message}@anchor{1c1}
@deffn {Function} bbdb@w{-}annotate@w{-}message address &optional  update-p

@format
Fill the records for message ADDRESS with as much info as possible.
If a record for ADDRESS does not yet exist, UPDATE-P controls whether
a new record is created for ADDRESS.  UPDATE-P may take the values:
 update or nil  Update existing records, never create a new record.
 query          Query interactively whether to create a new record.
 create or t    Create a new record.
 a function     This functions will be called with no arguments.
                  It should return one of the above values.
Return the records matching ADDRESS or nil.
@end format
@end deffn

@geindex bbdb-mua-annotate-field-interactive; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-annotate-field-interactive}@anchor{1c2}
@deffn {Function} bbdb@w{-}mua@w{-}annotate@w{-}field@w{-}interactive 

@format
Interactive specification for @ref{1c3,,`bbdb-mua-annotate-sender'} and friends.
@end format
@end deffn

@geindex bbdb-annotate-record; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-annotate-record}@anchor{c5}
@deffn {Function} bbdb@w{-}annotate@w{-}record record annotation &optional  field replace

@format
In RECORD add an ANNOTATION to field FIELD.
FIELD defaults to @ref{c4,,`bbdb-annotate-field'}.
If REPLACE is non-nil, ANNOTATION replaces the content of FIELD.
If ANNOTATION is an empty string and REPLACE is non-nil, delete FIELD.
@end format
@end deffn

@geindex bbdb-mua-annotate-recipients; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-annotate-recipients}@anchor{1c4}
@deffn {Function} bbdb@w{-}mua@w{-}annotate@w{-}recipients annotation &optional  field replace update-p

@format
Add ANNOTATION to field FIELD of the BBDB records of message recipients.
FIELD defaults to @ref{c4,,`bbdb-annotate-field'}.
If REPLACE is non-nil, ANNOTATION replaces the content of FIELD.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, use car of @ref{10d,,`bbdb-mua-update-interactive-p'}.
@end format
@end deffn

@geindex bbdb-mua-annotate-sender; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-annotate-sender}@anchor{1c3}
@deffn {Function} bbdb@w{-}mua@w{-}annotate@w{-}sender annotation &optional  field replace update-p

@format
Add ANNOTATION to field FIELD of the BBDB record(s) of message sender(s).
FIELD defaults to @ref{c4,,`bbdb-annotate-field'}.
If REPLACE is non-nil, ANNOTATION replaces the content of FIELD.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, use car of @ref{10d,,`bbdb-mua-update-interactive-p'}.
@end format
@end deffn

@geindex bbdb-mua-edit-field; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-edit-field}@anchor{105}
@deffn {Function} bbdb@w{-}mua@w{-}edit@w{-}field  &optional field update-p header-class

@format
Edit FIELD of the BBDB record(s) of message sender(s) or recipients.
FIELD defaults to value of variable @ref{104,,`bbdb-mua-edit-field'}.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
HEADER-CLASS is defined in @ref{cf,,`bbdb-message-headers'}.  If it is nil,
use all classes in @ref{cf,,`bbdb-message-headers'}.
@end format
@end deffn

@geindex bbdb-mua-edit-field-interactive; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-edit-field-interactive}@anchor{1c5}
@deffn {Function} bbdb@w{-}mua@w{-}edit@w{-}field@w{-}interactive 

@format
Interactive specification for command @ref{105,,`bbdb-mua-edit-field'} and friends.
@end format
@end deffn

@geindex bbdb-mua-edit-field-recipients; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-edit-field-recipients}@anchor{1c6}
@deffn {Function} bbdb@w{-}mua@w{-}edit@w{-}field@w{-}recipients  &optional field update-p

@format
Edit FIELD of record corresponding to recipient of this message.
FIELD defaults to value of variable @ref{104,,`bbdb-mua-edit-field'}.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
@end format
@end deffn

@geindex bbdb-mua-edit-field-sender; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-edit-field-sender}@anchor{1c7}
@deffn {Function} bbdb@w{-}mua@w{-}edit@w{-}field@w{-}sender  &optional field update-p

@format
Edit FIELD of record corresponding to sender of this message.
FIELD defaults to value of variable @ref{104,,`bbdb-mua-edit-field'}.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
@end format
@end deffn

@geindex bbdb-get-address-components; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-get-address-components}@anchor{1c8}
@deffn {Function} bbdb@w{-}get@w{-}address@w{-}components  &optional header-class ignore-address

@format
Extract mail addresses from a message.
Return list with elements (NAME EMAIL HEADER HEADER-CLASS MUA).
HEADER-CLASS is defined in @ref{cf,,`bbdb-message-headers'}.  If HEADER-CLASS is nil,
use all classes in @ref{cf,,`bbdb-message-headers'}.
If regexp IGNORE-ADDRESS matches NAME or EMAIL of an address, this address
is ignored. If IGNORE-ADDRESS is nil, use value of @ref{cb,,`bbdb-user-mail-address-re'}.
@end format
@end deffn

@geindex bbdb-ignore-message; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-ignore-message}@anchor{1c9}
@deffn {Function} bbdb@w{-}ignore@w{-}message  &optional invert

@format
For use with variable @ref{10d,,`bbdb-mua-update-interactive-p'} and friends.
Return the value of variable @ref{ce,,`bbdb-update-records-p'} for messages not matching
@ref{bc,,`bbdb-ignore-message-alist'}.  If INVERT is non-nil, accept messages
matching @ref{bb,,`bbdb-accept-message-alist'}.
@end format
@end deffn

@geindex bbdb-message-header; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-message-header}@anchor{1ca}
@deffn {Function} bbdb@w{-}message@w{-}header header

@format
For the current message return the value of HEADER.
MIME encoded headers are decoded.  Return nil if HEADER does not exist.
@end format
@end deffn

@geindex bbdb-mua; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua}@anchor{ca}
@deffn {Function} bbdb@w{-}mua 

@format
For the current message return the MUA.
Return values include
  gnus      Newsreader Gnus
  rmail     Reading Mail in Emacs
  vm        Viewmail
  mh        Emacs interface to the MH mail system (aka MH-E)
  message   Mail and News composition mode that goes with Gnus
  mu4e      Mu4e
  wl        Wanderlust
  mail      Emacs Mail Mode.
@end format
@end deffn

@geindex bbdb-mua-auto-update; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-auto-update}@anchor{102}
@deffn {Function} bbdb@w{-}mua@w{-}auto@w{-}update  &optional header-class update-p

@format
Update BBDB automatically based on incoming and outgoing messages.
This looks into the headers of a message according to HEADER-CLASS.
Then for the mail addresses found the corresponding BBDB records are updated.
UPDATE-P determines whether only existing BBDB records are taken
or whether also new records are created for these mail addresses.
Return matching records.

HEADER-CLASS is defined in @ref{cf,,`bbdb-message-headers'}.  If it is nil,
use all classes in @ref{cf,,`bbdb-message-headers'}.
UPDATE-P may take the same values as @ref{101,,`bbdb-mua-auto-update-p'}.
If UPDATE-P is nil, use @ref{101,,`bbdb-mua-auto-update-p'} (which see).

If @ref{98,,`bbdb-mua-pop-up'} is non-nil, BBDB pops up the *BBDB* buffer
along with the MUA window(s), displaying the matching records
using @ref{11a,,`bbdb-pop-up-layout'}.
If this is nil, BBDB is updated silently.

This function is intended for noninteractive use via appropriate MUA hooks.
Call @ref{80,,`bbdb-mua-auto-update-init'} in your init file to put this function
into the respective MUA hooks.
See @ref{1cb,,`bbdb-mua-display-records'} and friends for interactive commands.
@end format
@end deffn

@geindex bbdb-auto-notes; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-auto-notes}@anchor{c7}
@deffn {Function} bbdb@w{-}auto@w{-}notes record

@format
Automatically annotate RECORD based on the headers of the current message.
See the variables @ref{cc,,`bbdb-auto-notes-rules'}, @ref{c8,,`bbdb-auto-notes-ignore-messages'}
and @ref{c6,,`bbdb-auto-notes-ignore-headers'}.
For use as an element of @ref{12f,,`bbdb-notice-record-hook'}.
@end format
@end deffn

@geindex bbdb-mua-auto-update-init; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-auto-update-init}@anchor{80}
@deffn {Function} bbdb@w{-}mua@w{-}auto@w{-}update@w{-}init  &rest muas

@format
For MUAS add @ref{102,,`bbdb-mua-auto-update'} to their presentation hook.
If a MUA is not an element of MUAS, @ref{102,,`bbdb-mua-auto-update'} is removed
from the respective presentation hook.

Call this function in your init file to use the auto update feature with MUAS.
This function is separate from the general function @ref{7e,,`bbdb-initialize'}
as this allows one to initialize the auto update feature for some MUAs only,
for example only for outgoing messages.

See @ref{102,,`bbdb-mua-auto-update'} for details about the auto update feature.
@end format
@end deffn


@deffn {Function} bbdb@w{-}mua@w{-}update@w{-}interactive@w{-}p 

@format
Interactive spec for arg UPDATE-P of @ref{1cb,,`bbdb-mua-display-records'} and friends.
If these commands are called without a prefix, the value of their arg
UPDATE-P is the car of the variable @ref{10d,,`bbdb-mua-update-interactive-p'}.
Called with a prefix, the value of UPDATE-P is the cdr of this variable.
@end format
@end deffn

@geindex bbdb-mua-window-p; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-window-p}@anchor{1cc}
@deffn {Function} bbdb@w{-}mua@w{-}window@w{-}p 

@format
Return lambda function matching the MUA window.
This return value can be used as arg HORIZ-P of @ref{6e,,`bbdb-display-records'}.
@end format
@end deffn

@geindex bbdb-mua-display-all-recipients; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-display-all-recipients}@anchor{1cd}
@deffn {Function} bbdb@w{-}mua@w{-}display@w{-}all@w{-}recipients  &optional update-p

@format
Display BBDB records for all recipients of this message.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
@end format
@end deffn

@geindex bbdb-mua-display-all-records; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-display-all-records}@anchor{1ce}
@deffn {Function} bbdb@w{-}mua@w{-}display@w{-}all@w{-}records  &optional update-p

@format
Display the BBDB record(s) for all addresses in this message.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
@end format
@end deffn

@geindex bbdb-mua-display-records; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-display-records}@anchor{1cb}
@deffn {Function} bbdb@w{-}mua@w{-}display@w{-}records  &optional header-class update-p all

@format
Display the BBDB record(s) for the addresses in this message.
This looks into the headers of a message according to HEADER-CLASS.
Then for the mail addresses found the corresponding BBDB records are displayed.
UPDATE-P determines whether only existing BBDB records are displayed
or whether also new records are created for these mail addresses.

HEADER-CLASS is defined in @ref{cf,,`bbdb-message-headers'}.  If it is nil,
use all classes in @ref{cf,,`bbdb-message-headers'}.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
If ALL is non-nil, bind @ref{fd,,`bbdb-message-all-addresses'} to ALL.
@end format
@end deffn

@geindex bbdb-mua-display-recipients; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-display-recipients}@anchor{1cf}
@deffn {Function} bbdb@w{-}mua@w{-}display@w{-}recipients  &optional update-p

@format
Display the BBDB record(s) for the recipients of this message.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
@end format
@end deffn

@geindex bbdb-mua-display-sender; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-display-sender}@anchor{1d0}
@deffn {Function} bbdb@w{-}mua@w{-}display@w{-}sender  &optional update-p

@format
Display the BBDB record(s) for the sender of this message.
UPDATE-P may take the same values as @ref{ce,,`bbdb-update-records-p'}.
For interactive calls, see function @code{`bbdb-mua-update-interactive-p'}.
@end format
@end deffn


@deffn {Function} bbdb@w{-}mua@w{-}summary@w{-}mark address

@format
In the MUA Summary buffer mark messages matching a BBDB record.
ADDRESS typically refers to the value of the From header of a message.
If ADDRESS matches a record in BBDB return a mark, " " otherwise.
The mark itself is the value of the xfield @ref{109,,`bbdb-mua-summary-mark-field'}
if this xfield is in the poster's record, and @ref{107,,`bbdb-mua-summary-mark'} otherwise.
@end format
@end deffn

@geindex bbdb-mua-summary-unify; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-summary-unify}@anchor{108}
@deffn {Function} bbdb@w{-}mua@w{-}summary@w{-}unify address

@format
Unify mail ADDRESS displayed for a message in the MUA Summary buffer.
Typically ADDRESS refers to the value of the From header of a message.
If ADDRESS matches a record in BBDB display a unified name instead of ADDRESS
in the MUA Summary buffer.

Unification uses @ref{10b,,`bbdb-mua-summary-unification-list'} (see there).
The first match in this list becomes the text string displayed
for a message in the MUA Summary buffer instead of ADDRESS.
If variable @ref{107,,`bbdb-mua-summary-mark'} is non-nil use it to precede known addresses.
Return the unified mail address.

Currently this works with Gnus and VM.  It requires the BBDB insinuation
of these MUAs.  Also, the MUA Summary format string must use
@ref{10c,,`bbdb-mua-summary-unify-format-letter'} (see there).
@end format
@end deffn

@geindex bbdb-mua-update-records; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-update-records}@anchor{1d1}
@deffn {Function} bbdb@w{-}mua@w{-}update@w{-}records  &optional header-class update-p sort

@format
Wrapper for @ref{fe,,`bbdb-update-records'}.
HEADER-CLASS is defined in @ref{cf,,`bbdb-message-headers'}.  If it is nil,
use all classes in @ref{cf,,`bbdb-message-headers'}.
UPDATE-P is defined in @ref{fe,,`bbdb-update-records'}.
If SORT is non-nil, sort records according to @code{`bbdb-record-lessp'}.
@end format
@end deffn

@geindex bbdb-mua-wrapper; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-mua-wrapper}@anchor{1d2}
@deffn {Function} bbdb@w{-}mua@w{-}wrapper  &rest body

@format
Perform BODY in a MUA buffer.
@end format
@end deffn

@geindex bbdb-query-create; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-query-create}@anchor{115}
@deffn {Function} bbdb@w{-}query@w{-}create 

@format
Interactive query used by @ref{fe,,`bbdb-update-records'}.
Return t if the record should be created or @code{`nil'} otherwise.
Honor previous answers such as @code{`!'}.
@end format
@end deffn

@geindex bbdb-select-message; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-select-message}@anchor{103}
@deffn {Function} bbdb@w{-}select@w{-}message 

@format
For use with variable @ref{10d,,`bbdb-mua-update-interactive-p'} and friends.
Return the value of variable @ref{ce,,`bbdb-update-records-p'} for messages both matching
@ref{bb,,`bbdb-accept-message-alist'} and not matching @ref{bc,,`bbdb-ignore-message-alist'}.
@end format
@end deffn

@geindex bbdb-update-records; Emacs Lisp function
@anchor{bbdb-mua el function bbdb-update-records}@anchor{fe}
@deffn {Function} bbdb@w{-}update@w{-}records address-list &optional  update-p sort

@format
Return the list of BBDB records matching ADDRESS-LIST.
ADDRESS-LIST is a list of mail addresses.  (It can be extracted from
a mail message using @ref{1c8,,`bbdb-get-address-components'}.)
UPDATE-P may take the following values:
 search       Search for existing records matching ADDRESS.
 update       Search for existing records matching ADDRESS;
                update name and mail field if necessary.
 query        Search for existing records matching ADDRESS;
                query for creation of a new record if the record does not exist.
 create or t  Search for existing records matching ADDRESS;
                create a new record if it does not yet exist.
 nil          Do nothing.
 a function   This functions will be called with no arguments.
                It should return one of the above values.

If SORT is non-nil, sort records according to @code{`bbdb-record-lessp'}.
Ottherwise, the records are ordered according to ADDRESS-LIST.

Usually this function is called by the wrapper @ref{1d1,,`bbdb-mua-update-records'}.
@end format
@end deffn

@node Lisp library bbdb-pgp,Lisp library bbdb-print,Lisp library bbdb-mua,Top
@anchor{bbdb-pgp lisp-library-bbdb-pgp}@anchor{1d3}@anchor{bbdb-pgp doc}@anchor{1d4}
@chapter Lisp library (bbdb-pgp)


@menu
* Functions: Functions<11>. 
* Variables: Variables<5>. 

@end menu

@node Functions<11>,Variables<5>,,Lisp library bbdb-pgp
@anchor{bbdb-pgp functions}@anchor{1d5}
@section Functions


@geindex bbdb-pgp; Emacs Lisp function
@anchor{bbdb-pgp el function bbdb-pgp}@anchor{7f}
@deffn {Function} bbdb@w{-}pgp 

@format
Add PGP MML tags to a message according to the recipients' BBDB records.
For all message recipients in @ref{1d6,,`bbdb-pgp-headers'}, this grabs the action
in @ref{1d7,,`bbdb-pgp-field'} of their BBDB records.  If this proposes multiple actions,
perform the action which appears first in @ref{1d8,,`bbdb-pgp-ranked-actions'}.
If this proposes no action at all, use @ref{1d9,,`bbdb-pgp-default'}.
The variable @ref{1da,,`bbdb-pgp-method'} defines the method which is actually used
for signing and encrypting.

This command works with both @code{`mail-mode'} and @code{`message-mode'} to send
signed or encrypted mail.

To run this command automatically when sending a message,
use @ref{7e,,`bbdb-initialize'} with arg @code{`pgp'} to add this function
to @code{`message-send-hook'} and @code{`mail-send-hook'}.
Yet see info node @ref{Signing and encryption,,,message} why you
might not want to rely for encryption on a hook function
which runs just before the message is sent, that is, you might want
to call the command @ref{7f,,`bbdb-pgp'} manually, then call @code{`mml-preview'}.
@end format
@end deffn

@geindex bbdb-read-xfield-pgp-mail; Emacs Lisp function
@anchor{bbdb-pgp el function bbdb-read-xfield-pgp-mail}@anchor{1db}
@deffn {Function} bbdb@w{-}read@w{-}xfield@w{-}pgp@w{-}mail  &optional init

@format
Set @ref{1d7,,`bbdb-pgp-field'}, requiring match with @ref{1d8,,`bbdb-pgp-ranked-actions'}.
@end format
@end deffn

@node Variables<5>,,Functions<11>,Lisp library bbdb-pgp
@anchor{bbdb-pgp variables}@anchor{1dc}
@section Variables


@geindex bbdb-pgp-default; Emacs Lisp variable
@anchor{bbdb-pgp el variable bbdb-pgp-default}@anchor{1d9}
@deffn {Variable} bbdb@w{-}pgp@w{-}default

@format
Default action when sending a message and the recipients are not in BBDB.
This should be one of the following symbols:
  nil             Do nothing
  sign            Sign the message
  sign-query      Query whether to sign the message
  encrypt         Encrypt the message
  encrypt-query   Query whether to encrypt the message
See info node @ref{security,,,message}.
@end format
@end deffn

@geindex bbdb-pgp-field; Emacs Lisp variable
@anchor{bbdb-pgp el variable bbdb-pgp-field}@anchor{1d7}
@deffn {Variable} bbdb@w{-}pgp@w{-}field

@format
BBDB xfield holding the PGP action.
If the recipient of a message has this xfield in his/her BBDB record,
its value determines whether @ref{7f,,`bbdb-pgp'} signs or encrypts the message.
The value of this xfield should be one of the following symbols:
  sign            Sign the message
  sign-query      Query whether to sign the message
  encrypt         Encrypt the message
  encrypt-query   Query whether to encrypt the message
If the xfield is absent use @ref{1d9,,`bbdb-pgp-default'}.
See also info node @ref{security,,,message}.
@end format
@end deffn

@geindex bbdb-pgp-ranked-actions; Emacs Lisp variable
@anchor{bbdb-pgp el variable bbdb-pgp-ranked-actions}@anchor{1d8}
@deffn {Variable} bbdb@w{-}pgp@w{-}ranked@w{-}actions

@format
Ranked list of actions when sending a message.
If a message has multiple recipients such that their BBDB records specify
different actions for this message, @ref{7f,,`bbdb-pgp'} will perform the action
which appears first in @ref{1d8,,`bbdb-pgp-ranked-actions'}.
This list should include the following four symbols:
  sign            Sign the message
  sign-query      Query whether to sign the message
  encrypt         Encrypt the message
  encrypt-query   Query whether to encrypt the message.
@end format
@end deffn

@geindex bbdb-pgp-headers; Emacs Lisp variable
@anchor{bbdb-pgp el variable bbdb-pgp-headers}@anchor{1d6}
@deffn {Variable} bbdb@w{-}pgp@w{-}headers

@format
Message headers to look at.
@end format
@end deffn

@geindex bbdb-pgp-method; Emacs Lisp variable
@anchor{bbdb-pgp el variable bbdb-pgp-method}@anchor{1da}
@deffn {Variable} bbdb@w{-}pgp@w{-}method

@format
Method for signing and encrypting messages.
It should be one of the keys of @ref{1dd,,`bbdb-pgp-method-alist'}.
The default methods include
  pgp       Add MML tags for PGP format
  pgpauto   Add MML tags for PGP-auto format
  pgpmime   Add MML tags for PGP/MIME
  smime     Add MML tags for S/MIME
See info node @ref{security,,,message}.
@end format
@end deffn

@geindex bbdb-pgp-method-alist; Emacs Lisp variable
@anchor{bbdb-pgp el variable bbdb-pgp-method-alist}@anchor{1dd}
@deffn {Variable} bbdb@w{-}pgp@w{-}method@w{-}alist

@format
Alist of methods for signing and encrypting a message with @ref{7f,,`bbdb-pgp'}.
Each method is a list (KEY SIGN ENCRYPT).
The symbol KEY identifies the method.  The function SIGN signs the message;
the function ENCRYPT encrypts it.  These functions take no arguments.
The default methods include
  pgp       Add MML tags for PGP format
  pgpauto   Add MML tags for PGP-auto format
  pgpmime   Add MML tags for PGP/MIME
  smime     Add MML tags for S/MIME
See info node @ref{security,,,message}.
@end format
@end deffn

@node Lisp library bbdb-print,Lisp library bbdb-rmail,Lisp library bbdb-pgp,Top
@anchor{bbdb-print lisp-library-bbdb-print}@anchor{1de}@anchor{bbdb-print doc}@anchor{1df}
@chapter Lisp library (bbdb-print)


@menu
* Functions: Functions<12>. 
* Variables: Variables<6>. 

@end menu

@node Functions<12>,Variables<6>,,Lisp library bbdb-print
@anchor{bbdb-print functions}@anchor{1e0}
@section Functions


@geindex bbdb-print; Emacs Lisp function
@anchor{bbdb-print el function bbdb-print}@anchor{1e1}
@deffn {Function} bbdb@w{-}print records file brief

@format
Make a TeX FILE for printing RECORDS.
Interactively, use BBDB prefix \
\<bbdb-mode-map>\[bbdb-do-all-records], see @ref{110,,`bbdb-do-all-records'}.
With prefix BRIEF non-nil, make a brief (one line per record) printout.
There are various variables for customizing the content and format
of the printout, notably the variables @ref{1e2,,`bbdb-print-alist'} and
@ref{1e3,,`bbdb-print-require'}.
@end format
@end deffn

@geindex bbdb-print-record; Emacs Lisp function
@anchor{bbdb-print el function bbdb-print-record}@anchor{1e4}
@deffn {Function} bbdb@w{-}print@w{-}record record current-letter brief pofl n-phones n-addresses

@format
Insert the bbdb RECORD in TeX format in the current buffer.
CURRENT-LETTER is the first letter of the sortkey of the previous record.
If this is non-nil and RECORD begins differently, a section heading is output.
If CURRENT-LETTER is t always produce a heading.
BRIEF is non-nil for 1-line-per-record printouts.
PHONE-ON-FIRST-LINE, N-PHONES, and N-ADDRESSES are the respective values
from @ref{1e2,,`bbdb-print-alist'}.

The return value is the new CURRENT-LETTER.
@end format
@end deffn

@geindex bbdb-print-phone; Emacs Lisp function
@anchor{bbdb-print el function bbdb-print-phone}@anchor{1e5}
@deffn {Function} bbdb@w{-}print@w{-}phone phone

@format
Format PHONE as a string, obeying omit-area-code setting.
Omit-area-code is one of the allowed symbols in @ref{1e2,,`bbdb-print-alist'}.
@end format
@end deffn

@geindex bbdb-print-tex-quote; Emacs Lisp function
@anchor{bbdb-print el function bbdb-print-tex-quote}@anchor{1e6}
@deffn {Function} bbdb@w{-}print@w{-}tex@w{-}quote string

@format
Quote any unquoted TeX special characters that appear in STRING.
The replacement rules are defined in @ref{1e7,,`bbdb-print-tex-quote-alist'}.
@end format
@end deffn

@node Variables<6>,,Functions<12>,Lisp library bbdb-print
@anchor{bbdb-print variables}@anchor{1e8}
@section Variables


@geindex bbdb-print-alist; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-alist}@anchor{1e2}
@deffn {Variable} bbdb@w{-}print@w{-}alist

@format
Formatting options for @ref{1e1,,`bbdb-print'}, all formats.
This is an alist of the form ((option1 . value1) (option2 . value2) ...)

You can have separate settings for brief and non-brief printouts;
see the variables @ref{1e9,,`bbdb-print-brief-alist'} and @ref{1ea,,`bbdb-print-full-alist'}.
Settings there will override the common settings in this variable.

The possible options and legal values are:
 - columns: 1, 2, 3, 4 or 'quad (4 little 2-column pages per sheet)
     or 'grid (12 credit-card-sized pages per sheet).
 - separator: 0-7, the style of heading for each letter.
     0=none, 1=line, 2=boxed letters, 3=large boxed letters, 4=large letters,
     5=letters with lines, 6=letters with suits, 7=boxed letters with suits.
 - omit-area-code: a regular expression matching area codes to omit.
 - phone-on-first-line: t means to put first phone number on the same
     line with the name, nil means just the name.  A string means to
     use the first phone number whose "label" matches that string,
     which should be a valid regular expression.
 - n-phones: maximum number of phone numbers to include.
 - n-addresses: maximum number of addresses to include.
 - include-files: list of TeX files to \input.  If these filenames are not
   absolute, the files must be located somewhere that TeX will find them.
 - ps-fonts: nonnil means to use them, nil to use standard TeX fonts.
 - font-size: in points, any integer (assuming fonts in that size exist).
 - hsize, vsize: horizontal dimension of pages.  String value can be any valid
   TeX dimension, or nil to use TeX's default.
 - hoffset, voffset: shift TeX's output rightward (downward) by this distance
   (any TeX dimension).  Nil or 0 uses TeX's default positioning.
 - quad-hsize, quad-vsize: for the quad format, horizontal and
     vertical size of the little pages.  These must be strings which
     are valid TeX dimensions, eg "10cm".
@end format
@end deffn

@geindex bbdb-print-full-alist; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-full-alist}@anchor{1ea}
@deffn {Variable} bbdb@w{-}print@w{-}full@w{-}alist

@format
Extra options for @ref{1e1,,`bbdb-print'} non-brief format.
These supplement or override entries in @ref{1e2,,`bbdb-print-alist'}; see description
of possible contents there.
@end format
@end deffn

@geindex bbdb-print-brief-alist; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-brief-alist}@anchor{1e9}
@deffn {Variable} bbdb@w{-}print@w{-}brief@w{-}alist

@format
Extra Options for @ref{1e1,,`bbdb-print'}, brief format.
These supplement or override entries in @ref{1e2,,`bbdb-print-alist'}; see description
of possible contents there.
@end format
@end deffn

@geindex bbdb-print-file; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-file}@anchor{1eb}
@deffn {Variable} bbdb@w{-}print@w{-}file

@format
Default file name for printouts of BBDB database.
@end format
@end deffn

@geindex bbdb-print-omit-fields; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-omit-fields}@anchor{1ec}
@deffn {Variable} bbdb@w{-}print@w{-}omit@w{-}fields

@format
List of fields NOT to print in address list.
See also @ref{1e3,,`bbdb-print-require'}.
@end format
@end deffn

@geindex bbdb-print-prolog; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-prolog}@anchor{1ed}
@deffn {Variable} bbdb@w{-}print@w{-}prolog

@format
TeX statements to include at the beginning of the @ref{1e1,,`bbdb-print'} file.
@end format
@end deffn

@geindex bbdb-print-epilog; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-epilog}@anchor{1ee}
@deffn {Variable} bbdb@w{-}print@w{-}epilog

@format
TeX statements to include at the end of the @ref{1e1,,`bbdb-print'} file.
@end format
@end deffn

@geindex bbdb-print-mail; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-mail}@anchor{1ef}
@deffn {Variable} bbdb@w{-}print@w{-}mail

@format
Whether only the primary or all mail addresses are printed.
Value @code{`primary'} means print the primary mail address only.
Value @code{`all'} means print all mail addresses.
@end format
@end deffn

@geindex bbdb-print-tex-quote-alist; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-tex-quote-alist}@anchor{1e7}
@deffn {Variable} bbdb@w{-}print@w{-}tex@w{-}quote@w{-}alist

@format
Replacement alist for quoting TeX's special characters.
Each element is of the form (REGEXP . REPLACE).
@end format
@end deffn

@geindex bbdb-print-address-format-list; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-address-format-list}@anchor{4d}
@deffn {Variable} bbdb@w{-}print@w{-}address@w{-}format@w{-}list

@format
List of address formatting rules for printing.
Each element may take the same values as in @ref{4c,,`bbdb-address-format-list'}.
The EDIT elements of @ref{4c,,`bbdb-address-format-list'} are ignored.
@end format
@end deffn

@geindex bbdb-print-name-format; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-name-format}@anchor{1f0}
@deffn {Variable} bbdb@w{-}print@w{-}name@w{-}format

@format
Format for names when printing BBDB.
If first-last format names as "Firstname Lastname".
If last-first format names as "Lastname, Firstname".
If @ref{1f1,,`bbdb-print-name'} returns the full name as a single, preformatted string,
this takes precedence over @ref{1f0,,`bbdb-print-name-format'}.
@end format
@end deffn

@geindex bbdb-print-name; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-name}@anchor{1f1}
@deffn {Variable} bbdb@w{-}print@w{-}name

@format
Xfield holding the full print name for a record.
This may also be a function taking one argument, a record.
If it returns the full print name as a single string, this is used "as is".
If it returns a cons pair (FIRST . LAST) with the first and last name
for this record, these are formatted obeying @ref{1f0,,`bbdb-print-name-format'}.
In any case, this function should call @ref{1e6,,`bbdb-print-tex-quote'} as needed.
@end format
@end deffn

@geindex bbdb-print-require; Emacs Lisp variable
@anchor{bbdb-print el variable bbdb-print-require}@anchor{1e3}
@deffn {Variable} bbdb@w{-}print@w{-}require

@format
What fields are required for printing a record.
This is a lisp expression and a record will be printed only if the evaluation
of this expression yields a non-nil value for this records.
The symbols name, organization, mail, phone, address, and notes will be set
to appropriate values when this is evaluated; they will be nil if the field
does not exist or is elided.

The value of this variable can be any lisp expression, but typically
it will be a boolean combination of the field variables, as in
the following examples:

  Print only people whose phone numbers are known:
    (setq bbdb-print-require 'phone)
  Print people whose names and organizations are known:
    (setq bbdb-print-require '(and name organization))
  Print people whose names, and either addresses or phone numbers are known:
    (setq bbdb-print-require '(and name (or address phone))).
@end format
@end deffn

@node Lisp library bbdb-rmail,Lisp library bbdb-sc,Lisp library bbdb-print,Top
@anchor{bbdb-rmail doc}@anchor{1f2}@anchor{bbdb-rmail lisp-library-bbdb-rmail}@anchor{1f3}
@chapter Lisp library (bbdb-rmail)


@menu
* Functions: Functions<13>. 

@end menu

@node Functions<13>,,,Lisp library bbdb-rmail
@anchor{bbdb-rmail functions}@anchor{1f4}
@section Functions


@geindex bbdb/rmail-new-flag; Emacs Lisp function
@anchor{bbdb-rmail el function bbdb/rmail-new-flag}@anchor{1f5}
@deffn {Function} bbdb/rmail@w{-}new@w{-}flag 

@format
Returns t if the current message in buffer BUF is new.
@end format
@end deffn

@geindex bbdb/rmail-header; Emacs Lisp function
@anchor{bbdb-rmail el function bbdb/rmail-header}@anchor{1f6}
@deffn {Function} bbdb/rmail@w{-}header header

@format
Pull HEADER out of Rmail header.
@end format
@end deffn

@geindex bbdb-insinuate-rmail; Emacs Lisp function
@anchor{bbdb-rmail el function bbdb-insinuate-rmail}@anchor{1f7}
@deffn {Function} bbdb@w{-}insinuate@w{-}rmail 

@format
Hook BBDB into RMAIL.
Do not call this in your init file.  Use @ref{7e,,`bbdb-initialize'}.
@end format
@end deffn

@node Lisp library bbdb-sc,Lisp library bbdb-site,Lisp library bbdb-rmail,Top
@anchor{bbdb-sc lisp-library-bbdb-sc}@anchor{1f8}@anchor{bbdb-sc doc}@anchor{1f9}
@chapter Lisp library (bbdb-sc)


@menu
* Functions: Functions<14>. 
* Variables: Variables<7>. 

@end menu

@node Functions<14>,Variables<7>,,Lisp library bbdb-sc
@anchor{bbdb-sc functions}@anchor{1fa}
@section Functions


@geindex bbdb-sc-update-from; Emacs Lisp function
@anchor{bbdb-sc el function bbdb-sc-update-from}@anchor{1fb}
@deffn {Function} bbdb@w{-}sc@w{-}update@w{-}from 

@format
Update the "from" field in @code{`sc-mail-info'}.
If the "from" field in @code{`sc-mail-info'} contains only a plain mail address,
complement the "from" field in @code{`sc-mail-info'} with the sender's name in BBDB.
@end format
@end deffn

@geindex bbdb-insinuate-sc; Emacs Lisp function
@anchor{bbdb-sc el function bbdb-insinuate-sc}@anchor{1fc}
@deffn {Function} bbdb@w{-}insinuate@w{-}sc 

@format
Hook BBDB into Supercite.
Do not call this in your init file.  Use @ref{7e,,`bbdb-initialize'}.
However, this is not the full story.  See bbdb-sc.el for how to fully hook
BBDB into Supercite.
@end format
@end deffn

@geindex bbdb-sc-get-attrib; Emacs Lisp function
@anchor{bbdb-sc el function bbdb-sc-get-attrib}@anchor{1fd}
@deffn {Function} bbdb@w{-}sc@w{-}get@w{-}attrib mail

@format
Get the Supercite attribution from BBDB.
MAIL is the mail address to look for in BBDB.
@end format
@end deffn

@geindex bbdb-sc-set-attrib; Emacs Lisp function
@anchor{bbdb-sc el function bbdb-sc-set-attrib}@anchor{1fe}
@deffn {Function} bbdb@w{-}sc@w{-}set@w{-}attrib 

@format
Store attribution in BBDB.
@end format
@end deffn

@node Variables<7>,,Functions<14>,Lisp library bbdb-sc
@anchor{bbdb-sc variables}@anchor{1ff}
@section Variables


@geindex bbdb-sc-attribution-field; Emacs Lisp variable
@anchor{bbdb-sc el variable bbdb-sc-attribution-field}@anchor{200}
@deffn {Variable} bbdb@w{-}sc@w{-}attribution@w{-}field

@format
The BBDB xfield used for Supercite attribution.
@end format
@end deffn

@geindex bbdb-sc-update-records-p; Emacs Lisp variable
@anchor{bbdb-sc el variable bbdb-sc-update-records-p}@anchor{201}
@deffn {Variable} bbdb@w{-}sc@w{-}update@w{-}records@w{-}p

@format
How @ref{1fe,,`bbdb-sc-set-attrib'} updates BBDB records automatically.
This may take the same values as arg UPDATE-P of @ref{fe,,`bbdb-update-records'}.
@end format
@end deffn

@geindex bbdb-sc-update-attrib-p; Emacs Lisp variable
@anchor{bbdb-sc el variable bbdb-sc-update-attrib-p}@anchor{202}
@deffn {Variable} bbdb@w{-}sc@w{-}update@w{-}attrib@w{-}p

@format
How @ref{1fe,,`bbdb-sc-set-attrib'} updates the attribution field.
Allowed values include
 nil    Do not create or modify the attribution field
 query  Query before creating or modifying the attribution field.
 t      Create or modify the attribution field.
@end format
@end deffn

@geindex bbdb-sc-update-attrib-p; Emacs Lisp variable

@deffn {Variable} bbdb@w{-}sc@w{-}update@w{-}attrib@w{-}p

@format
How @ref{1fe,,`bbdb-sc-set-attrib'} updates the attribution field.
Allowed values include
 nil    Do not create or modify the attribution field
 query  Query before creating or modifying the attribution field.
 t      Create or modify the attribution field.
@end format
@end deffn

@geindex bbdb-sc-last-attrib; Emacs Lisp variable
@anchor{bbdb-sc el variable bbdb-sc-last-attrib}@anchor{203}
@deffn {Variable} bbdb@w{-}sc@w{-}last@w{-}attrib

@format
Last attribution used by Supercite.
Used to compare against citation selected by the user.
@end format
@end deffn

@node Lisp library bbdb-site,Lisp library bbdb-snarf,Lisp library bbdb-sc,Top
@anchor{bbdb-site lisp-library-bbdb-site}@anchor{204}@anchor{bbdb-site doc}@anchor{205}
@chapter Lisp library (bbdb-site)


@menu
* Constants: Constants<3>. 

@end menu

@node Constants<3>,,,Lisp library bbdb-site
@anchor{bbdb-site constants}@anchor{206}
@section Constants


@geindex bbdb-version; Emacs Lisp constant
@anchor{bbdb-site el variable bbdb-version}@anchor{207}
@deffn {Constant} bbdb@w{-}version

@format
Version of BBDB.
@end format
@end deffn

@geindex bbdb-version-date; Emacs Lisp constant
@anchor{bbdb-site el variable bbdb-version-date}@anchor{208}
@deffn {Constant} bbdb@w{-}version@w{-}date

@format
Version date of BBDB.
@end format
@end deffn

@node Lisp library bbdb-snarf,Lisp library bbdb-vm,Lisp library bbdb-site,Top
@anchor{bbdb-snarf doc}@anchor{209}@anchor{bbdb-snarf lisp-library-bbdb-snarf}@anchor{20a}
@chapter Lisp library (bbdb-snarf)


@menu
* Functions: Functions<15>. 
* Variables: Variables<8>. 

@end menu

@node Functions<15>,Variables<8>,,Lisp library bbdb-snarf
@anchor{bbdb-snarf functions}@anchor{20b}
@section Functions


@geindex bbdb-snarf-surrounding-space; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-surrounding-space}@anchor{20c}
@deffn {Function} bbdb@w{-}snarf@w{-}surrounding@w{-}space record

@format
Discard beginning and trailing space when snarfing RECORD.
@end format
@end deffn

@geindex bbdb-snarf-empty-lines; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-empty-lines}@anchor{20d}
@deffn {Function} bbdb@w{-}snarf@w{-}empty@w{-}lines record

@format
Discard empty lines when snarfing RECORD.
@end format
@end deffn

@geindex bbdb-snarf-name; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-name}@anchor{20e}
@deffn {Function} bbdb@w{-}snarf@w{-}name record

@format
Snarf name for RECORD.
@end format
@end deffn

@geindex bbdb-snarf-name-mail; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-name-mail}@anchor{20f}
@deffn {Function} bbdb@w{-}snarf@w{-}name@w{-}mail record

@format
Snarf name from mail address for RECORD.
@end format
@end deffn

@geindex bbdb-snarf-mail; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-mail}@anchor{210}
@deffn {Function} bbdb@w{-}snarf@w{-}mail record

@format
Snarf mail addresses for RECORD.
This uses the first subexpresion of @ref{211,,`bbdb-snarf-mail-regexp'}.
@end format
@end deffn

@geindex bbdb-snarf-label; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-label}@anchor{212}
@deffn {Function} bbdb@w{-}snarf@w{-}label field

@format
Extract the label before point, or return default label for FIELD.
@end format
@end deffn

@geindex bbdb-snarf-phone-nanp; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-phone-nanp}@anchor{213}
@deffn {Function} bbdb@w{-}snarf@w{-}phone@w{-}nanp record

@format
Snarf NANP phone numbers for RECORD.
NANP is the North American Numbering Plan used in North and Central America.
This uses the first subexpresion of @ref{214,,`bbdb-snarf-phone-nanp-regexp'}.
@end format
@end deffn

@geindex bbdb-snarf-phone-eu; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-phone-eu}@anchor{215}
@deffn {Function} bbdb@w{-}snarf@w{-}phone@w{-}eu record &optional  phone-regexp

@format
Snarf European phone numbers for RECORD.
PHONE-REGEXP is the regexp to match a phone number.
It defaults to @ref{216,,`bbdb-snarf-phone-eu-regexp'}.
@end format
@end deffn

@geindex bbdb-snarf-streets; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-streets}@anchor{217}
@deffn {Function} bbdb@w{-}snarf@w{-}streets address

@format
Snarf streets for ADDRESS.  This assumes a narrowed region.
@end format
@end deffn

@geindex bbdb-snarf-address-us; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-address-us}@anchor{218}
@deffn {Function} bbdb@w{-}snarf@w{-}address@w{-}us record

@format
Snarf a US address for RECORD.
@end format
@end deffn

@geindex bbdb-snarf-address-eu; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-address-eu}@anchor{219}
@deffn {Function} bbdb@w{-}snarf@w{-}address@w{-}eu record &optional  postcode-regexp country

@format
Snarf a European address for RECORD.
POSTCODE-REGEXP is a regexp matching the postcode assumed to appear
at the beginning of a line followed by the name of the city.  This format
is used in many continental European countries.
POSTCODE-REGEXP defaults to @ref{21a,,`bbdb-snarf-postcode-eu-regexp'}.
COUNTRY is the country to use.  It defaults to @ref{21b,,`bbdb-snarf-address-eu-country'}.
@end format
@end deffn

@geindex bbdb-snarf-address-eu; Emacs Lisp function

@deffn {Function} bbdb@w{-}snarf@w{-}address@w{-}eu record &optional  postcode-regexp country

@format
Snarf a European address for RECORD.
POSTCODE-REGEXP is a regexp matching the postcode assumed to appear
at the beginning of a line followed by the name of the city.  This format
is used in many continental European countries.
POSTCODE-REGEXP defaults to @ref{21a,,`bbdb-snarf-postcode-eu-regexp'}.
COUNTRY is the country to use.  It defaults to @ref{21b,,`bbdb-snarf-address-eu-country'}.
@end format
@end deffn

@geindex bbdb-snarf-url; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-url}@anchor{21c}
@deffn {Function} bbdb@w{-}snarf@w{-}url record

@format
Snarf URL for RECORD.
This uses the first subexpresion of @ref{21d,,`bbdb-snarf-url-regexp'}.
@end format
@end deffn

@geindex bbdb-snarf-notes; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-notes}@anchor{21e}
@deffn {Function} bbdb@w{-}snarf@w{-}notes record

@format
Snarf notes for RECORD.
@end format
@end deffn

@geindex bbdb-snarf-paragraph; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-paragraph}@anchor{21f}
@deffn {Function} bbdb@w{-}snarf@w{-}paragraph pos &optional  rule

@format
Snarf BBDB record from paragraph around position POS using RULE.
The paragraph is the one that contains POS or follows POS.
Interactively POS is the position of point.
RULE defaults to @ref{220,,`bbdb-snarf-rule-default'}.
See @ref{221,,`bbdb-snarf-rule-alist'} for details.
@end format
@end deffn

@geindex bbdb-snarf-yank; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf-yank}@anchor{222}
@deffn {Function} bbdb@w{-}snarf@w{-}yank  &optional rule

@format
Snarf a BBDB record from latest kill using RULE.
The latest kill may also be a window system selection, see @code{`current-kill'}.
RULE defaults to @ref{220,,`bbdb-snarf-rule-default'}.
See @ref{221,,`bbdb-snarf-rule-alist'} for details.
@end format
@end deffn

@geindex bbdb-snarf; Emacs Lisp function
@anchor{bbdb-snarf el function bbdb-snarf}@anchor{223}
@deffn {Function} bbdb@w{-}snarf string &optional  rule

@format
Snarf a BBDB record in STRING using RULE.  Display and return this record.
Interactively, STRING is the current region.
RULE defaults to @ref{220,,`bbdb-snarf-rule-default'}.
See @ref{221,,`bbdb-snarf-rule-alist'} for details.
@end format
@end deffn

@node Variables<8>,,Functions<15>,Lisp library bbdb-snarf
@anchor{bbdb-snarf variables}@anchor{224}
@section Variables


@geindex bbdb-snarf-rule-alist; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-rule-alist}@anchor{221}
@deffn {Variable} bbdb@w{-}snarf@w{-}rule@w{-}alist

@format
Alist of rules for snarfing.
Each rule is of the form (KEY FUNCTION FUNCTION ...).
The symbol KEY identifies the rule, see also @ref{220,,`bbdb-snarf-rule-default'}.

Snarfing is a cumulative process.  The text is copied to a temporary
snarf buffer that becomes current during snarfing.
Each FUNCTION is called with one arg, the RECORD we are snarfing,
and with point at the beginning of the snarf buffer.  FUNCTION should populate
the fields of RECORD.  It may delete the part of the snarf buffer
that it has processed so that the remaining FUNCTIONs operate only
on those parts that were not yet snarfed.  The order of the FUNCTION calls
in a rule is then crucial.
Unlike other parts of BBDB, FUNCTIONs need not update the cache and
hash table for RECORD which is done at the end by @ref{223,,`bbdb-snarf'}.
@end format
@end deffn

@geindex bbdb-snarf-rule-default; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-rule-default}@anchor{220}
@deffn {Variable} bbdb@w{-}snarf@w{-}rule@w{-}default

@format
Default rule for snarfing.
@end format
@end deffn

@geindex bbdb-snarf-mail-regexp; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-mail-regexp}@anchor{211}
@deffn {Variable} bbdb@w{-}snarf@w{-}mail@w{-}regexp

@format
Regexp matching a mail address.  Case is ignored.
The first subexpression becomes the mail address.
@end format
@end deffn

@geindex bbdb-snarf-name-regexp; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-name-regexp}@anchor{225}
@deffn {Variable} bbdb@w{-}snarf@w{-}name@w{-}regexp

@format
Regexp matching a name.  Case is ignored.
The first subexpression becomes the name.
@end format
@end deffn

@geindex bbdb-snarf-default-label-alist; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-default-label-alist}@anchor{226}
@deffn {Variable} bbdb@w{-}snarf@w{-}default@w{-}label@w{-}alist

@format
Default labels for snarfing.
This is an alist where each element is a cons pair (FIELD . LABEL).
The symbol FIELD denotes a record field like @code{`phone'} or @code{`address'}.
The string LABEL denotes the default label for FIELD.
@end format
@end deffn

@geindex bbdb-snarf-phone-nanp-regexp; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-phone-nanp-regexp}@anchor{214}
@deffn {Variable} bbdb@w{-}snarf@w{-}phone@w{-}nanp@w{-}regexp

@format
Regexp matching a NANP phone number.  Case is ignored.
NANP is the North American Numbering Plan used in North and Central America.
The first subexpression becomes the phone number.
@end format
@end deffn

@geindex bbdb-snarf-phone-eu-regexp; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-phone-eu-regexp}@anchor{216}
@deffn {Variable} bbdb@w{-}snarf@w{-}phone@w{-}eu@w{-}regexp

@format
Regexp matching a European phone number.
The first subexpression becomes the phone number.
@end format
@end deffn

@geindex bbdb-snarf-postcode-eu-regexp; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-postcode-eu-regexp}@anchor{21a}
@deffn {Variable} bbdb@w{-}snarf@w{-}postcode@w{-}eu@w{-}regexp

@format
Regexp matching many European postcodes.
@ref{219,,`bbdb-snarf-address-eu'} assumes that the address appears at the beginning
of a line followed by the name of the city.
@end format
@end deffn

@geindex bbdb-snarf-address-us-country; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-address-us-country}@anchor{227}
@deffn {Variable} bbdb@w{-}snarf@w{-}address@w{-}us@w{-}country

@format
Country to use for US addresses.  If nil leave country blank.
@end format
@end deffn

@geindex bbdb-snarf-address-eu-country; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-address-eu-country}@anchor{21b}
@deffn {Variable} bbdb@w{-}snarf@w{-}address@w{-}eu@w{-}country

@format
Country to use for EU addresses.  If nil leave country blank.
@end format
@end deffn

@geindex bbdb-snarf-url; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-url}@anchor{228}
@deffn {Variable} bbdb@w{-}snarf@w{-}url

@format
What xfield BBDB should use for URLs, or nil to not snarf URLs.
@end format
@end deffn

@geindex bbdb-snarf-url-regexp; Emacs Lisp variable
@anchor{bbdb-snarf el variable bbdb-snarf-url-regexp}@anchor{21d}
@deffn {Variable} bbdb@w{-}snarf@w{-}url@w{-}regexp

@format
Regexp matching a URL.  Case is ignored.
The first subexpression becomes the URL.
@end format
@end deffn

@geindex bbdb-snarf-rule-alist; Emacs Lisp variable

@deffn {Variable} bbdb@w{-}snarf@w{-}rule@w{-}alist

@format
Alist of rules for snarfing.
Each rule is of the form (KEY FUNCTION FUNCTION ...).
The symbol KEY identifies the rule, see also @ref{220,,`bbdb-snarf-rule-default'}.

Snarfing is a cumulative process.  The text is copied to a temporary
snarf buffer that becomes current during snarfing.
Each FUNCTION is called with one arg, the RECORD we are snarfing,
and with point at the beginning of the snarf buffer.  FUNCTION should populate
the fields of RECORD.  It may delete the part of the snarf buffer
that it has processed so that the remaining FUNCTIONs operate only
on those parts that were not yet snarfed.  The order of the FUNCTION calls
in a rule is then crucial.
Unlike other parts of BBDB, FUNCTIONs need not update the cache and
hash table for RECORD which is done at the end by @ref{223,,`bbdb-snarf'}.
@end format
@end deffn

@geindex bbdb-snarf-rule-alist; Emacs Lisp variable

@deffn {Variable} bbdb@w{-}snarf@w{-}rule@w{-}alist

@format
Alist of rules for snarfing.
Each rule is of the form (KEY FUNCTION FUNCTION ...).
The symbol KEY identifies the rule, see also @ref{220,,`bbdb-snarf-rule-default'}.

Snarfing is a cumulative process.  The text is copied to a temporary
snarf buffer that becomes current during snarfing.
Each FUNCTION is called with one arg, the RECORD we are snarfing,
and with point at the beginning of the snarf buffer.  FUNCTION should populate
the fields of RECORD.  It may delete the part of the snarf buffer
that it has processed so that the remaining FUNCTIONs operate only
on those parts that were not yet snarfed.  The order of the FUNCTION calls
in a rule is then crucial.
Unlike other parts of BBDB, FUNCTIONs need not update the cache and
hash table for RECORD which is done at the end by @ref{223,,`bbdb-snarf'}.
@end format
@end deffn

@geindex bbdb-snarf-rule-alist; Emacs Lisp variable

@deffn {Variable} bbdb@w{-}snarf@w{-}rule@w{-}alist

@format
Alist of rules for snarfing.
Each rule is of the form (KEY FUNCTION FUNCTION ...).
The symbol KEY identifies the rule, see also @ref{220,,`bbdb-snarf-rule-default'}.

Snarfing is a cumulative process.  The text is copied to a temporary
snarf buffer that becomes current during snarfing.
Each FUNCTION is called with one arg, the RECORD we are snarfing,
and with point at the beginning of the snarf buffer.  FUNCTION should populate
the fields of RECORD.  It may delete the part of the snarf buffer
that it has processed so that the remaining FUNCTIONs operate only
on those parts that were not yet snarfed.  The order of the FUNCTION calls
in a rule is then crucial.
Unlike other parts of BBDB, FUNCTIONs need not update the cache and
hash table for RECORD which is done at the end by @ref{223,,`bbdb-snarf'}.
@end format
@end deffn

@geindex bbdb-snarf-rule-alist; Emacs Lisp variable

@deffn {Variable} bbdb@w{-}snarf@w{-}rule@w{-}alist

@format
Alist of rules for snarfing.
Each rule is of the form (KEY FUNCTION FUNCTION ...).
The symbol KEY identifies the rule, see also @ref{220,,`bbdb-snarf-rule-default'}.

Snarfing is a cumulative process.  The text is copied to a temporary
snarf buffer that becomes current during snarfing.
Each FUNCTION is called with one arg, the RECORD we are snarfing,
and with point at the beginning of the snarf buffer.  FUNCTION should populate
the fields of RECORD.  It may delete the part of the snarf buffer
that it has processed so that the remaining FUNCTIONs operate only
on those parts that were not yet snarfed.  The order of the FUNCTION calls
in a rule is then crucial.
Unlike other parts of BBDB, FUNCTIONs need not update the cache and
hash table for RECORD which is done at the end by @ref{223,,`bbdb-snarf'}.
@end format
@end deffn

@geindex bbdb-snarf-rule-alist; Emacs Lisp variable

@deffn {Variable} bbdb@w{-}snarf@w{-}rule@w{-}alist

@format
Alist of rules for snarfing.
Each rule is of the form (KEY FUNCTION FUNCTION ...).
The symbol KEY identifies the rule, see also @ref{220,,`bbdb-snarf-rule-default'}.

Snarfing is a cumulative process.  The text is copied to a temporary
snarf buffer that becomes current during snarfing.
Each FUNCTION is called with one arg, the RECORD we are snarfing,
and with point at the beginning of the snarf buffer.  FUNCTION should populate
the fields of RECORD.  It may delete the part of the snarf buffer
that it has processed so that the remaining FUNCTIONs operate only
on those parts that were not yet snarfed.  The order of the FUNCTION calls
in a rule is then crucial.
Unlike other parts of BBDB, FUNCTIONs need not update the cache and
hash table for RECORD which is done at the end by @ref{223,,`bbdb-snarf'}.
@end format
@end deffn

@node Lisp library bbdb-vm,Lisp library bbdb-wl,Lisp library bbdb-snarf,Top
@anchor{bbdb-vm lisp-library-bbdb-vm}@anchor{229}@anchor{bbdb-vm doc}@anchor{22a}
@chapter Lisp library (bbdb-vm)


@menu
* Functions: Functions<16>. 
* Variables: Variables<9>. 

@end menu

@node Functions<16>,Variables<9>,,Lisp library bbdb-vm
@anchor{bbdb-vm functions}@anchor{22b}
@section Functions


@geindex vm-summary-function-B; Emacs Lisp function
@anchor{bbdb-vm el function vm-summary-function-B}@anchor{22c}
@deffn {Function} vm@w{-}summary@w{-}function@w{-}B m

@format
For VM message M return the BBDB name of the sender.
Respect @code{`vm-summary-uninteresting-senders'}.
@end format
@end deffn

@geindex bbdb/vm-auto-folder; Emacs Lisp function
@anchor{bbdb-vm el function bbdb/vm-auto-folder}@anchor{22d}
@deffn {Function} bbdb/vm@w{-}auto@w{-}folder 

@format
Add entries to @code{`vm-auto-folder-alist'} for the records in BBDB.
For each record that has a @code{`vm-folder'} xfield, add an element
\(MAIL-REGEXP . FOLDER-NAME) to @code{`vm-auto-folder-alist'}.
The element gets added to the sublists of @code{`vm-auto-folder-alist'}
specified in @ref{22e,,`bbdb/vm-auto-folder-headers'}.
MAIL-REGEXP matches the mail addresses of the BBDB record.
The value of the @code{`vm-folder'} xfield becomes FOLDER-NAME.
The @code{`vm-folder'} xfield is defined via @ref{22f,,`bbdb/vm-auto-folder-field'}.

Add this function to @ref{129,,`bbdb-before-save-hook'} and your .vm.
@end format
@end deffn

@geindex bbdb/vm-virtual-folder; Emacs Lisp function
@anchor{bbdb-vm el function bbdb/vm-virtual-folder}@anchor{230}
@deffn {Function} bbdb/vm@w{-}virtual@w{-}folder 

@format
Create @code{`vm-virtual-folder-alist'} according to the records in BBDB.
For each record that has a @code{`vm-virtual'} xfield, add or modify the
corresponding VIRTUAL-FOLDER-NAME element of @code{`vm-virtual-folder-alist'}.

  (VIRTUAL-FOLDER-NAME ((FOLDER-NAME ...)
                        (author-or-recipient MAIL-REGEXP)))

VIRTUAL-FOLDER-NAME is the first element of the @code{`vm-virtual'} xfield.
FOLDER-NAME ... are either the remaining elements of the @code{`vm-virtual'} xfield,
or @ref{231,,`bbdb/vm-virtual-real-folders'} or @code{`vm-primary-inbox'}.
MAIL-REGEXP matches the mail addresses of the BBDB record.
The @code{`vm-virtual'} xfield is defined via @ref{232,,`bbdb/vm-virtual-folder-field'}.

Add this function to @ref{129,,`bbdb-before-save-hook'} and your .vm.
@end format
@end deffn

@geindex bbdb/vm-auto-add-label; Emacs Lisp function
@anchor{bbdb-vm el function bbdb/vm-auto-add-label}@anchor{233}
@deffn {Function} bbdb/vm@w{-}auto@w{-}add@w{-}label record

@format
Automatically add labels to VM messages.
Add this to @ref{12f,,`bbdb-notice-record-hook'} to check the messages noticed by BBDB.
If the value of @ref{234,,`bbdb/vm-auto-add-label-field'} in the sender's BBDB record
matches a value in @ref{235,,`bbdb/vm-auto-add-label-list'} then a VM label will be added
to the message.  Such VM labels can be used, e.g., to mark messages via
@code{`vm-mark-matching-messages'} or to define virtual folders via
@code{`vm-create-virtual-folder'}

Typically @ref{234,,`bbdb/vm-auto-add-label-field'} and @ref{235,,`bbdb/vm-auto-add-label-list'}
refer to mail aliases FOO used with multiple records.  This adds a label FOO
to all incoming messages matching FOO.  Then VM can create a virtual folder
for these messages.  The concept of combining multiple recipients of an
outgoing message in one mail alias thus gets extended to incoming messages
from different senders.
@end format
@end deffn

@geindex bbdb-insinuate-vm; Emacs Lisp function
@anchor{bbdb-vm el function bbdb-insinuate-vm}@anchor{236}
@deffn {Function} bbdb@w{-}insinuate@w{-}vm 

@format
Hook BBDB into VM.
Do not call this in your init file.  Use @ref{7e,,`bbdb-initialize'}.
@end format
@end deffn

@node Variables<9>,,Functions<16>,Lisp library bbdb-vm
@anchor{bbdb-vm variables}@anchor{237}
@section Variables


@geindex bbdb/vm-auto-folder-headers; Emacs Lisp variable
@anchor{bbdb-vm el variable bbdb/vm-auto-folder-headers}@anchor{22e}
@deffn {Variable} bbdb/vm@w{-}auto@w{-}folder@w{-}headers

@format
The headers used by @ref{22d,,`bbdb/vm-auto-folder'}.
The order in this list is the order how matching will be performed.
@end format
@end deffn

@geindex bbdb/vm-auto-folder-field; Emacs Lisp variable
@anchor{bbdb-vm el variable bbdb/vm-auto-folder-field}@anchor{22f}
@deffn {Variable} bbdb/vm@w{-}auto@w{-}folder@w{-}field

@format
The xfield which @ref{22d,,`bbdb/vm-auto-folder'} searches for.
@end format
@end deffn

@geindex bbdb/vm-virtual-folder-field; Emacs Lisp variable
@anchor{bbdb-vm el variable bbdb/vm-virtual-folder-field}@anchor{232}
@deffn {Variable} bbdb/vm@w{-}virtual@w{-}folder@w{-}field

@format
The xfield which @ref{230,,`bbdb/vm-virtual-folder'} searches for.
@end format
@end deffn

@geindex bbdb/vm-virtual-real-folders; Emacs Lisp variable
@anchor{bbdb-vm el variable bbdb/vm-virtual-real-folders}@anchor{231}
@deffn {Variable} bbdb/vm@w{-}virtual@w{-}real@w{-}folders

@format
Real folders used for defining virtual folders.
If nil use @code{`vm-primary-inbox'}.
@end format
@end deffn

@geindex bbdb/vm-auto-add-label-list; Emacs Lisp variable
@anchor{bbdb-vm el variable bbdb/vm-auto-add-label-list}@anchor{235}
@deffn {Variable} bbdb/vm@w{-}auto@w{-}add@w{-}label@w{-}list

@format
List used by @ref{233,,`bbdb/vm-auto-add-label'} to automatically label VM messages.
Its elements may be strings used both as the xfield value to check for
and as the label to apply to the message.
If an element is a cons pair (VALUE . LABEL), VALUE is the xfield value
to search for and LABEL is the label to apply.
@end format
@end deffn

@geindex bbdb/vm-auto-add-label-field; Emacs Lisp variable
@anchor{bbdb-vm el variable bbdb/vm-auto-add-label-field}@anchor{234}
@deffn {Variable} bbdb/vm@w{-}auto@w{-}add@w{-}label@w{-}field

@format
Xfields used by @ref{233,,`bbdb/vm-auto-add-label'} to automatically label messages.
This is either a single BBDB xfield or a list of xfields that
@ref{233,,`bbdb/vm-auto-add-label'} uses to check for labels to apply to a message.
Defaults to @ref{f6,,`bbdb-mail-alias-field'} which defaults to @code{`mail-alias'}.
@end format
@end deffn

@node Lisp library bbdb-wl,Indices and tables,Lisp library bbdb-vm,Top
@anchor{bbdb-wl lisp-library-bbdb-wl}@anchor{238}@anchor{bbdb-wl doc}@anchor{239}
@chapter Lisp library (bbdb-wl)


@menu
* Functions: Functions<17>. 

@end menu

@node Functions<17>,,,Lisp library bbdb-wl
@anchor{bbdb-wl functions}@anchor{23a}
@section Functions


@geindex bbdb-insinuate-wl; Emacs Lisp function
@anchor{bbdb-wl el function bbdb-insinuate-wl}@anchor{23b}
@deffn {Function} bbdb@w{-}insinuate@w{-}wl 

@format
Hook BBDB into Wanderlust.
@end format
@end deffn

@node Indices and tables,Index,Lisp library bbdb-wl,Top
@anchor{index indices-and-tables}@anchor{23c}
@unnumbered Indices and tables



@itemize *

@item 
genindex

@item 
search
@end itemize

@node Index,,Indices and tables,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
